{"name": "my_prompt", "language": "py", "prompt": "\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"\n    Determines whether the intersection of two closed intervals results in a prime-length interval.\n    \n    Args:\n        interval1 (Tuple[int, int]): The first closed interval as a tuple (start, end).\n        interval2 (Tuple[int, int]): The second closed interval as a tuple (start, end).\n        \n    Returns:\n        str: Returns 'YES' if the length of the intersection is a prime number, 'NO' otherwise.\n            If the two intervals don't intersect, also returns 'NO'.\n    \"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_158_find_max.py", "prompt_terminology": "reworded", "tests": "\ndef check(candidate):\n    assert candidate((1, 2), (2, 3)) == 'NO'\n    assert candidate((-1, 1), (0, 4)) == 'NO'\n    assert candidate((-3, -1), (-5, 5)) == 'YES'\n    assert candidate((-2, 2), (-4, 0)) == 'YES'\n    assert candidate((-11, 2), (-1, -1)) == 'NO'\n    assert candidate((1, 2), (3, 5)) == 'NO'\n    assert candidate((1, 2), (1, 2)) == 'NO'\n    assert candidate((-2, -2), (-3, -2)) == 'NO'\n\ndef test_check():\n    check(intersection)\n\ntest_check()\n\n", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"]}

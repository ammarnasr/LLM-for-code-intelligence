{
  "python": [
    "from django import forms\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import validate_slug\nfrom django.db import models\nfrom django.utils import simplejson as json\nfrom django.utils.text import capfirst\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom philo.forms.fields import JSONFormField\nfrom philo.utils.registry import RegistryIterator\nfrom philo.validators import TemplateValidator, json_validator\n#from philo.models.fields.entities import *\n\n\nclass TemplateField(models.TextField):\n\t\"\"\"A :class:`TextField` which is validated with a :class:`.TemplateValidator`. ``allow``, ``disallow``, and ``secure`` will be passed into the validator's construction.\"\"\"\n\tdef __init__(self, allow=None, disallow=None, secure=True, *args, **kwargs):\n\t\tsuper(TemplateField, self).__init__(*args, **kwargs)\n\t\tself.validators.append(TemplateValidator(allow, disallow, secure))\n\n\nclass JSONDescriptor(object):\n\tdef __init__(self, field):\n\t\tself.field = field\n\t\n\tdef __get__(self, instance, owner):\n\t\tif instance is None:\n\t\t\traise AttributeError # ?\n\t\t\n\t\tif self.field.name not in instance.__dict__:\n\t\t\tjson_string = getattr(instance, self.field.attname)\n\t\t\tinstance.__dict__[self.field.name] = json.loads(json_string)\n\t\t\n\t\treturn instance.__dict__[self.field.name]\n\t\n\tdef __set__(self, instance, value):\n\t\tinstance.__dict__[self.field.name] = value\n\t\tsetattr(instance, self.field.attname, json.dumps(value))\n\t\n\tdef __delete__(self, instance):\n\t\tdel(instance.__dict__[self.field.name])\n\t\tsetattr(instance, self.field.attname, json.dumps(None))\n\n\nclass JSONField(models.TextField):\n\t\"\"\"A :class:`TextField` which stores its value on the model instance as a python object and stores its value in the database as JSON. Validated with :func:`.json_validator`.\"\"\"\n\tdefault_validators = [json_validator]\n\t\n\tdef get_attname(self):\n\t\treturn \"%s_json\" % self.name\n\t\n\tdef contribute_to_class(self, cls, name):\n\t\tsuper(JSONField, self).contribute_to_class(cls, name)\n\t\tsetattr(cls, name, JSONDescriptor(self))\n\t\tmodels.signals.pre_init.connect(self.fix_init_kwarg, sender=cls)\n\t\n\tdef fix_init_kwarg(self, sender, args, kwargs, **signal_kwargs):\n\t\t# Anything passed in as self.name is assumed to come from a serializer and\n\t\t# will be treated as a json string.\n\t\tif self.name in kwargs:\n\t\t\tvalue = kwargs.pop(self.name)\n\t\t\t\n\t\t\t# Hack to handle the xml serializer's handling of \"null\"\n\t\t\tif value is None:\n\t\t\t\tvalue = 'null'\n\t\t\t\n\t\t\tkwargs[self.attname] = value\n\t\n\tdef formfield(self, *args, **kwargs):\n\t\tkwargs[\"form_class\"] = JSONFormField\n\t\treturn super(JSONField, self).formfield(*args, **kwargs)\n\n\nclass SlugMultipleChoiceField(models.Field):\n\t\"\"\"Stores a selection of multiple items with unique slugs in the form of a comma-separated list. Also knows how to correctly handle :class:`RegistryIterator`\\ s passed in as choices.\"\"\"\n\t__metaclass__ = models.SubfieldBase\n\tdescription = _(\"Comma-separated slug field\")\n\t\n\tdef get_internal_type(self):\n\t\treturn \"TextField\"\n\t\n\tdef to",
    "import hashlib\nimport json\nimport logging\nimport os\nimport subprocess\nimport sys\nimport time\nfrom collections import defaultdict\n\nfrom shutil import copy\nfrom shutil import copyfile\nfrom shutil import copystat\nfrom shutil import copytree\nfrom tempfile import mkdtemp\n\nimport boto3\nimport botocore\nimport yaml\nimport sys\n\nfrom .helpers import archive\nfrom .helpers import get_environment_variable_value\nfrom .helpers import LambdaContext\nfrom .helpers import mkdir\nfrom .helpers import read\nfrom .helpers import timestamp\n\n\nARN_PREFIXES = {\n    \"cn-north-1\": \"aws-cn\",\n    \"cn-northwest-1\": \"aws-cn\",\n    \"us-gov-west-1\": \"aws-us-gov\",\n}\n\nlog = logging.getLogger(__name__)\n\n\ndef load_source(module_name, module_path):\n    \"\"\"Loads a python module from the path of the corresponding file.\"\"\"\n\n    if sys.version_info[0] == 3 and sys.version_info[1] >= 5:\n        import importlib.util\n        spec = importlib.util.spec_from_file_location(module_name, module_path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n    elif sys.version_info[0] == 3 and sys.version_info[1] < 5:\n        import importlib.machinery\n        loader = importlib.machinery.SourceFileLoader(module_name, module_path)\n        module = loader.load_module()\n    return module\n\n\ndef cleanup_old_versions(\n    src, keep_last_versions, config_file=\"config.yaml\", profile_name=None,\n):\n    \"\"\"Deletes old deployed versions of the function in AWS Lambda.\n\n    Won't delete $Latest and any aliased version\n\n    :param str src:\n        The path to your Lambda ready project (folder must contain a valid\n        config.yaml and handler module (e.g.: service.py).\n    :param int keep_last_versions:\n        The number of recent versions to keep and not delete\n    \"\"\"\n    if keep_last_versions <= 0:\n        print(\"Won't delete all versions. Please do this manually\")\n    else:\n        path_to_config_file = os.path.join(src, config_file)\n        cfg = read_cfg(path_to_config_file, profile_name)\n\n        profile_name = cfg.get(\"profile\")\n        aws_access_key_id = cfg.get(\"aws_access_key_id\")\n        aws_secret_access_key = cfg.get(\"aws_secret_access_key\")\n\n        client = get_client(\n            \"lambda\",\n            profile_name,\n            aws_access_key_id,\n            aws_secret_access_key,\n            cfg.get(\"region\"),\n        )\n\n        response = client.list_versions_by_function(\n            FunctionName=cfg.get(\"function_name\"),\n        )\n        versions = response.get(\"Versions\")\n        if len(response.get(\"Versions\")) < keep_last_versions:\n            print(\"Nothing to delete. (Too few versions published)\")\n        else:\n            version_numbers = [\n                elem.get(\"Version\") for elem in versions[1:-keep_last_versions]\n            ]\n            for version_number in version_numbers:\n                try:\n                    client.delete_function(\n                        FunctionName=cfg.get(\"function_name\"),\n                        Qualifier=ve",
    "# Copyright (c) 2015, Max Fillinger <max@max-fillinger.net>\n# \n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n# PERFORMANCE OF THIS SOFTWARE.\n\n# The epub format specification is available at http://idpf.org/epub/201\n\n'''Contains the EpubBuilder class to build epub2.0.1 files with the getebook\nmodule.'''\n\nimport html\nimport re\nimport datetime\nimport getebook\nimport os.path\nimport re\nimport zipfile\n\n__all__ = ['EpubBuilder', 'EpubTOC', 'Author']\n\ndef _normalize(name):\n    '''Transform \"Firstname [Middlenames] Lastname\" into\n    \"Lastname, Firstname [Middlenames]\".'''\n    split = name.split()\n    if len(split) == 1:\n        return name\n    return split[-1] + ', ' + ' '.join(name[0:-1])\n\ndef _make_starttag(tag, attrs):\n    'Write a starttag.'\n    out = '<' + tag\n    for key in attrs:\n        out += ' {}=\"{}\"'.format(key, html.escape(attrs[key]))\n    out += '>'\n    return out\n\ndef _make_xml_elem(tag, text, attr = []):\n    'Write a flat xml element.'\n    out = '    <' + tag\n    for (key, val) in attr:\n        out += ' {}=\"{}\"'.format(key, val)\n    if text:\n        out += '>{}</{}>\\n'.format(text, tag)\n    else:\n        out += ' />\\n'\n    return out\n\nclass EpubTOC(getebook.TOC):\n    'Table of contents.'\n    _head = ((\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n      '<ncx xmlns=\"http://www.daisy.org/z3986/2005/ncx/\" version=\"2005-1\" xml:lang=\"en-US\">\\n'\n      '  <head>\\n'\n      '    <meta name=\"dtb:uid\" content=\"{}\" />\\n'\n      '    <meta name=\"dtb:depth\" content=\"{}\" />\\n'\n      '    <meta name=\"dtb:totalPageCount\" content=\"0\" />\\n'\n      '    <meta name=\"dtb:maxPageNumber\" content=\"0\" />\\n'\n      '  </head>\\n'\n      '  <docTitle>\\n'\n      '    <text>{}</text>\\n'\n      '  </docTitle>\\n'\n    ))\n    _doc_author = ((\n      '  <docAuthor>\\n'\n      '    <text>{}</text>\\n'\n      '  </docAuthor>\\n'\n    ))\n    _navp = ((\n      '{0}<navPoint id=\"nav{1}\">\\n'\n      '{0}  <navLabel>\\n'\n      '{0}    <text>{2}</text>\\n'\n      '{0}  </navLabel>\\n'\n      '{0}  <content src=\"{3}\" />\\n'\n    ))\n\n    def _navp_xml(self, entry, indent_lvl):\n        'Write xml for an entry and all its subentries.'\n        xml = self._navp.format('  '*indent_lvl, str(entry.no), entry.text,\n          entry.target)\n        for sub in entry.entries:\n            xml += self._navp_xml(sub, indent_lvl+1)\n        xml += '  '*indent_lvl + '</navPoint>\\n'\n        re",
    "import numpy as np\nimport pandas as pd\nfrom pandas import Series, DataFrame\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import DBSCAN\nfrom sklearn import metrics\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import decomposition  # PCA\nfrom sklearn.metrics import confusion_matrix\n\nimport json\n\nimport ml.Features as ft\nfrom utils import Utils\n\nclass Identifier(object):\n\n    def __init__(self):\n        columns = ['mean_height', 'min_height', 'max_height', 'mean_width', 'min_width', 'max_width', 'time', 'girth','id']\n        self.data = DataFrame(columns=columns)\n        self.event = []\n    @staticmethod\n    def subscribe(ch, method, properties, body):\n        \"\"\"\n        prints the body message. It's the default callback method\n        :param ch: keep null\n        :param method: keep null\n        :param properties: keep null\n        :param body: the message\n        :return:\n        \"\"\"\n        #first we get the JSON from body\n\n        #we check if it's part of the walking event\n\n        #if walking event is completed, we\n\n\nif __name__ == '__main__':\n    # we setup needed params\n    MAX_HEIGHT = 203\n    MAX_WIDTH = 142\n    SPEED = 3\n    SAMPLING_RATE = 8\n    mq_host = '172.26.56.122'\n    queue_name = 'door_data'\n    # setting up MQTT subscriber\n    Utils.sub(queue_name=queue_name,callback=subscribe,host=mq_host)",
    "#!-*- coding:utf-8 -*-\nimport time\n\n\ndef retries(times=3, timeout=1):\n    \"\"\"\u5bf9\u672a\u6355\u83b7\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\"\"\"\n    def decorator(func):\n        def _wrapper(*args, **kw):\n            att, retry = 0, 0\n            while retry < times:\n                retry += 1\n                try:\n                    return func(*args, **kw)\n                except:\n                    att += timeout\n                    if retry < times:\n                        time.sleep(att)\n        return _wrapper\n    return decorator\n\n\ndef empty_content_retries(times=3, timeout=2):\n    \"\"\"\u54cd\u5e94\u4e3a\u7a7a\u7684\u8fdb\u884c\u91cd\u8bd5\"\"\"\n    def decorator(func):\n        def _wrapper(*args, **kw):\n            att, retry = 0, 0\n            while retry < times:\n                retry += 1\n                ret = func(*args, **kw)\n                if ret:\n                    return ret\n                att += timeout\n                time.sleep(att)\n        return _wrapper\n    return decorator\n\n\ndef use_logging(level):\n    \"\"\"\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\"\"\"\n    def decorator(func):\n        print func.__name__\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                print (\"level:%s, %s is running\" % (level, func.__name__))\n            elif level == \"info\":\n                print (\"level:%s, %s is running\" % (level, func.__name__))\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\nif __name__ == \"__main__\":\n    @use_logging(level=\"warn\")\n    def foo(name='foo'):\n        print(\"i am %s\" % name)\n    foo()",
    "\"\"\"\r\n********************************************************************\r\n      Test file for implementation check of CR3BP library.\r\n********************************************************************\r\n\r\nLast update: 21/01/2022\r\n\r\nDescription\r\n-----------\r\nContains a few sample orbit propagations to test the CR3BP library.\r\n\r\nThe orbits currently found in test file include:\r\n    - L2 southern NRHO (9:2 NRHO of Lunar Gateway Station)\r\n    - Distant Retrograde Orbit (DRO)\r\n    - Butterfly Orbit\r\n    - L2 Vertical Orbit\r\n\"\"\"\r\n\r\n# Testing CR3BP implementation\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom astropy import units as u\r\nfrom CR3BP import getChar_CR3BP, propagate, propagateSTM\r\n\r\nfrom poliastro.bodies import Earth, Moon\r\n\r\n# Earth-Moon system properties\r\nk1 = Earth.k.to(u.km**3 / u.s**2).value\r\nk2 = Moon.k.to(u.km**3 / u.s**2).value\r\nr12 = 384747.99198  # Earth-Moon distance\r\n\r\n# Compute CR3BP characterisitic values\r\nmu, kstr, lstr, tstr, vstr, nstr = getChar_CR3BP(k1, k2, r12)\r\n\r\n\r\n# -- Lunar Gateway Station Orbit - 9:2 NRHO\r\n\r\n\"\"\"\r\nThe orbit is a Near-Rectilinear Halo Orbit (NRHO) around the L2 Lagragian\r\npoint of the Earth-Moon system. The orbit presented here is a southern\r\nsub-family of the L2-NRHO. This orbit is 9:2 resonant orbit currenly set\r\nas the candidate orbit for the Lunar Gateway Station (LOP-G). Its called\r\n9:2 resonant since a spacecraft would complete 9 orbits in the NRHO for\r\nevery 2 lunar month (slightly different from lunar orbit period).\r\n\r\nThe exact orbital elements presented here are from the auther's simulations.\r\nThe orbit states were obtained starting form guess solutions given in various\r\nreferences. A few are provided below:\r\n\r\nRef: White Paper: Gateway Destination Orbit Model: A Continuous 15 Year NRHO\r\n    Reference Trajectory - NASA, 2019\r\nRef: Strategies for Low-Thrust Transfer Design Based on Direct Collocation\r\n    Techniques - Park, Howell and Folta\r\n\r\nThe NRHO are subfamily of the Halo orbits. The 'Near-Rectilinear' term comes\r\nfrom the very elongated state of the orbit considering a regular Halo. Halo\r\norbits occur in all three co-linear equilibrum points L1,L2 and L3. They occur\r\nin a pair of variants (nothern and southern) due to symmetry of CR3BP.\r\n\"\"\"\r\n\r\n# 9:2 L2 souther NRHO orbit\r\nr0 = np.array([[1.021881345465263, 0, -0.182000000000000]])\r\nv0 = np.array([0, -0.102950816739606, 0])\r\ntf = 1.509263667286943\r\n\r\n# number of points to plot\r\nNplt = 300\r\ntofs = np.linspace(0, tf, Nplt)\r\n\r\n# propagate the base trajectory\r\nrf, vf = propagate(mu, r0, v0, tofs, rtol=1e-11)\r\n\r\n# ploting orbit\r\nrf = np.array(rf)\r\n\r\nfig = plt.figure()\r\nax = plt.axes(projection=\"3d\")\r\nax.set_box_aspect(\r\n    (np.ptp(rf[:, 0]), np.ptp(rf[:, 1]), np.ptp(rf[:, 2]))\r\n)  # aspect ratio is 1:1:1 in data space\r\n# ploting the moon\r\nax.plot3D(1 - mu, 0, 0, \"ok\")\r\nax.set_title(\"L2 Southern NRHO\")\r\nax.set_xlabel(\"x-axis [nd]\")\r\nax.set_ylabel(\"y-axis [nd]\")\r\nax.set_zlabel(\"z-axis [nd]\")\r\n\r\nax.plot3D(rf[:, 0], rf[:, 1], rf[",
    "# -*- coding: utf8 -*-\n# Copyright (c) 2017-2021 THL A29 Limited, a Tencent company. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# \u64cd\u4f5c\u5931\u8d25\u3002\nFAILEDOPERATION = 'FailedOperation'\n\n# API\u7f51\u5173\u89e6\u53d1\u5668\u521b\u5efa\u5931\u8d25\u3002\nFAILEDOPERATION_APIGATEWAY = 'FailedOperation.ApiGateway'\n\n# \u521b\u5efa\u89e6\u53d1\u5668\u5931\u8d25\u3002\nFAILEDOPERATION_APIGW = 'FailedOperation.Apigw'\n\n# \u83b7\u53d6Apm InstanceId\u5931\u8d25\u3002\nFAILEDOPERATION_APMCONFIGINSTANCEID = 'FailedOperation.ApmConfigInstanceId'\n\n# \u5f53\u524d\u5f02\u6b65\u4e8b\u4ef6\u72b6\u6001\u4e0d\u652f\u6301\u6b64\u64cd\u4f5c\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\u3002\nFAILEDOPERATION_ASYNCEVENTSTATUS = 'FailedOperation.AsyncEventStatus'\n\n# \u590d\u5236\u51fd\u6570\u5931\u8d25\u3002\nFAILEDOPERATION_COPYFAILED = 'FailedOperation.CopyFailed'\n\n# \u4e0d\u652f\u6301\u590d\u5236\u5230\u8be5\u5730\u57df\u3002\nFAILEDOPERATION_COPYFUNCTION = 'FailedOperation.CopyFunction'\n\n# \u64cd\u4f5cCOS\u8d44\u6e90\u5931\u8d25\u3002\nFAILEDOPERATION_COS = 'FailedOperation.Cos'\n\n# \u521b\u5efa\u522b\u540d\u5931\u8d25\u3002\nFAILEDOPERATION_CREATEALIAS = 'FailedOperation.CreateAlias'\n\n# \u64cd\u4f5c\u5931\u8d25\u3002\nFAILEDOPERATION_CREATEFUNCTION = 'FailedOperation.CreateFunction'\n\n# \u521b\u5efa\u547d\u540d\u7a7a\u95f4\u5931\u8d25\u3002\nFAILEDOPERATION_CREATENAMESPACE = 'FailedOperation.CreateNamespace'\n\n# \u5f53\u524d\u51fd\u6570\u72b6\u6001\u65e0\u6cd5\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002\nFAILEDOPERATION_CREATETRIGGER = 'FailedOperation.CreateTrigger'\n\n# \u5f53\u524d\u8c03\u8bd5\u72b6\u6001\u65e0\u6cd5\u6267\u884c\u6b64\u64cd\u4f5c\u3002\nFAILEDOPERATION_DEBUGMODESTATUS = 'FailedOperation.DebugModeStatus'\n\n# \u8c03\u8bd5\u72b6\u6001\u4e0b\u65e0\u6cd5\u66f4\u65b0\u6267\u884c\u8d85\u65f6\u65f6\u95f4\u3002\nFAILEDOPERATION_DEBUGMODEUPDATETIMEOUTFAIL = 'FailedOperation.DebugModeUpdateTimeOutFail'\n\n# \u5220\u9664\u522b\u540d\u5931\u8d25\u3002\nFAILEDOPERATION_DELETEALIAS = 'FailedOperation.DeleteAlias'\n\n# \u5f53\u524d\u51fd\u6570\u72b6\u6001\u65e0\u6cd5\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u5728\u51fd\u6570\u72b6\u6001\u6b63\u5e38\u65f6\u91cd\u8bd5\u3002\nFAILEDOPERATION_DELETEFUNCTION = 'FailedOperation.DeleteFunction'\n\n# \u5220\u9664layer\u7248\u672c\u5931\u8d25\u3002\nFAILEDOPERATION_DELETELAYERVERSION = 'FailedOperation.DeleteLayerVersion'\n\n# \u65e0\u6cd5\u5220\u9664\u9ed8\u8ba4Namespace\u3002\nFAILEDOPERATION_DELETENAMESPACE = 'FailedOperation.DeleteNamespace'\n\n# \u5220\u9664\u89e6\u53d1\u5668\u5931\u8d25\u3002\nFAILEDOPERATION_DELETETRIGGER = 'FailedOperation.DeleteTrigger'\n\n# \u5f53\u524d\u51fd\u6570\u72b6\u6001\u65e0\u6cd5\u66f4\u65b0\u4ee3\u7801\uff0c\u8bf7\u5728\u72b6\u6001\u4e3a\u6b63\u5e38\u65f6\u66f4\u65b0\u3002\nFAILEDOPERATION_FUNCTIONNAMESTATUSERROR = 'FailedOperation.FunctionNameStatusError'\n\n# \u51fd\u6570\u5728\u90e8\u7f72\u4e2d,\u65e0\u6cd5\u505a\u6b64\u64cd\u4f5c\u3002\nFAILEDOPERATION_FUNCTIONSTATUSERROR = 'FailedOperation.FunctionStatusError'\n\n# \u5f53\u524d\u51fd\u6570\u7248\u672c\u72b6\u6001\u65e0\u6cd5\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u5728\u7248\u672c\u72b6\u6001\u4e3a\u6b63\u5e38\u65f6\u91cd\u8bd5\u3002\nFAILEDOPERATION_FUNCTIONVERSIONSTATUSNOTACTIVE = 'FailedOperation.FunctionVersionStatusNotActive'\n\n# \u83b7\u53d6\u522b\u540d\u4fe1\u606f\u5931\u8d25\u3002\nFAILEDOPERATION_GETALIAS = 'FailedOperation.GetAlias'\n\n# \u83b7\u53d6\u51fd\u6570\u4ee3\u7801\u5730\u5740\u5931\u8d25\u3002\nFAILEDOPERATION_GETFUNCTIONADDRESS = 'FailedOperation.GetFunctionAddress'\n\n# \u5f53\u524d\u8d26\u53f7\u6216\u547d\u540d\u7a7a\u95f4\u5904\u4e8e\u6b20\u8d39\u72b6\u6001\uff0c\u8bf7\u5728\u53ef\u7528\u65f6\u91cd\u8bd5\u3002\nFAILEDOPERATION_INSUFFICIENTBALANCE = 'FailedOperation.InsufficientBalance'\n\n# \u8c03\u7528\u51fd\u6570\u5931\u8d25\u3002\nFAILEDOPERATION_INVOKEFUNCTION = 'FailedOperation.InvokeFunction'\n\n# \u547d\u540d\u7a7a\u95f4\u5df2\u5b58\u5728\uff0c\u8bf7\u52ff\u91cd\u590d\u521b\u5efa\u3002\nFAILEDOPERATION_NAMESPACE = 'FailedOperation.Namespace'\n\n# \u670d\u52a1\u5f00\u901a\u5931\u8d25\u3002\nFAILEDOPERATION_OPENSERVICE = 'FailedOperation.OpenService'\n\n# \u64cd\u4f5c\u51b2\u7a81\u3002\nFAILEDOPERATION_",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom runner.koan import *\n\nclass AboutIteration(Koan):\n\n    def test_iterators_are_a_type(self):\n        it = iter(range(1,6))\n\n        total = 0\n\n        for num in it:\n            total += num\n\n        self.assertEqual(15 , total)\n\n    def test_iterating_with_next(self):\n        stages = iter(['alpha','beta','gamma'])\n\n        try:\n            self.assertEqual('alpha', next(stages))\n            next(stages)\n            self.assertEqual('gamma', next(stages))\n            next(stages)\n        except StopIteration as ex:\n            err_msg = 'Ran out of iterations'\n\n        self.assertRegex(err_msg, 'Ran out')\n\n    # ------------------------------------------------------------------\n\n    def add_ten(self, item):\n        return item + 10\n\n    def test_map_transforms_elements_of_a_list(self):\n        seq = [1, 2, 3]\n        mapped_seq = list()\n\n        mapping = map(self.add_ten, seq)\n\n        self.assertNotEqual(list, mapping.__class__)\n        self.assertEqual(map, mapping.__class__)\n        # In Python 3 built in iterator funcs return iterable view objects\n        # instead of lists\n\n        for item in mapping:\n            mapped_seq.append(item)\n\n        self.assertEqual([11, 12, 13], mapped_seq)\n\n        # Note, iterator methods actually return objects of iter type in\n        # python 3. In python 2 map() would give you a list.\n\n    def test_filter_selects_certain_items_from_a_list(self):\n        def is_even(item):\n            return (item % 2) == 0\n\n        seq = [1, 2, 3, 4, 5, 6]\n        even_numbers = list()\n\n        for item in filter(is_even, seq):\n            even_numbers.append(item)\n\n        self.assertEqual([2,4,6], even_numbers)\n\n    def test_just_return_first_item_found(self):\n        def is_big_name(item):\n            return len(item) > 4\n\n        names = [\"Jim\", \"Bill\", \"Clarence\", \"Doug\", \"Eli\"]\n        name = None\n\n        iterator = filter(is_big_name, names)\n        try:\n            name = next(iterator)\n        except StopIteration:\n            msg = 'Ran out of big names'\n\n        self.assertEqual(\"Clarence\", name)\n\n\n    # ------------------------------------------------------------------\n\n    def add(self,accum,item):\n        return accum + item\n\n    def multiply(self,accum,item):\n        return accum * item\n\n    def test_reduce_will_blow_your_mind(self):\n        import functools\n        # As of Python 3 reduce() has been demoted from a builtin function\n        # to the functools module.\n\n        result = functools.reduce(self.add, [2, 3, 4])\n        self.assertEqual(int, result.__class__)\n        # Reduce() syntax is same as Python 2\n\n        self.assertEqual(9, result)\n\n        result2 = functools.reduce(self.multiply, [2, 3, 4], 1)\n        self.assertEqual(24, result2)\n\n        # Extra Credit:\n        # Describe in your own words what reduce does.\n\n    # ------------------------------------------------------------------\n\n    def test_use_pass_for_iterations_with_no_body(se",
    "from api_request import Api\nfrom util import Util\nfrom twocheckout import Twocheckout\n\n\nclass Sale(Twocheckout):\n    def __init__(self, dict_):\n        super(self.__class__, self).__init__(dict_)\n\n    @classmethod\n    def find(cls, params=None):\n        if params is None:\n            params = dict()\n        response = cls(Api.call('sales/detail_sale', params))\n        return response.sale\n\n    @classmethod\n    def list(cls, params=None):\n        if params is None:\n            params = dict()\n        response = cls(Api.call('sales/list_sales', params))\n        return response.sale_summary\n\n    def refund(self, params=None):\n        if params is None:\n            params = dict()\n        if hasattr(self, 'lineitem_id'):\n            params['lineitem_id'] = self.lineitem_id\n            url = 'sales/refund_lineitem'\n        elif hasattr(self, 'invoice_id'):\n            params['invoice_id'] = self.invoice_id\n            url = 'sales/refund_invoice'\n        else:\n            params['sale_id'] = self.sale_id\n            url = 'sales/refund_invoice'\n        return Sale(Api.call(url, params))\n\n    def stop(self, params=None):\n        if params is None:\n            params = dict()\n        if hasattr(self, 'lineitem_id'):\n            params['lineitem_id'] = self.lineitem_id\n            return Api.call('sales/stop_lineitem_recurring', params)\n        elif hasattr(self, 'sale_id'):\n            active_lineitems = Util.active(self)\n            if dict(active_lineitems):\n                result = dict()\n                i = 0\n                for k, v in active_lineitems.items():\n                    lineitem_id = v\n                    params = {'lineitem_id': lineitem_id}\n                    result[i] = Api.call('sales/stop_lineitem_recurring', params)\n                    i += 1\n                response = { \"response_code\": \"OK\",\n                             \"response_message\": str(len(result)) + \" lineitems stopped successfully\"\n                }\n            else:\n                response = {\n                    \"response_code\": \"NOTICE\",\n                    \"response_message\": \"No active recurring lineitems\"\n                }\n        else:\n            response = { \"response_code\": \"NOTICE\",\n                          \"response_message\": \"This method can only be called on a sale or lineitem\"\n            }\n        return Sale(response)\n\n    def active(self):\n        active_lineitems = Util.active(self)\n        if dict(active_lineitems):\n            result = dict()\n            i = 0\n            for k, v in active_lineitems.items():\n                lineitem_id = v\n                result[i] = lineitem_id\n                i += 1\n            response = { \"response_code\": \"ACTIVE\",\n                         \"response_message\": str(len(result)) + \" active recurring lineitems\"\n            }\n        else:\n            response = {\n                \"response_code\": \"NOTICE\",\"response_message\":\n                \"No active recurring lineitems\"\n            }\n        return Sale(respons",
    "import json\nimport os\n\nfrom flask import request, g, render_template, make_response, jsonify, Response\nfrom helpers.raw_endpoint import get_id, store_json_to_file\nfrom helpers.groups import get_groups\nfrom json_controller import JSONController\nfrom main import app\nfrom pymongo import MongoClient, errors\n\n\nHERE = os.path.dirname(os.path.abspath(__file__))\n\n\n# setup database connection\ndef connect_client():\n    \"\"\"Connects to Mongo client\"\"\"\n    try:\n        return MongoClient(app.config['DB_HOST'], int(app.config['DB_PORT']))\n    except errors.ConnectionFailure as e:\n        raise e\n\n\ndef get_db():\n    \"\"\"Connects to Mongo database\"\"\"\n    if not hasattr(g, 'mongo_client'):\n        g.mongo_client = connect_client()\n        g.mongo_db = getattr(g.mongo_client, app.config['DB_NAME'])\n        g.groups_collection = g.mongo_db[os.environ.get('DB_GROUPS_COLLECTION')]\n    return g.mongo_db\n\n@app.teardown_appcontext\ndef close_db(error):\n    \"\"\"Closes connection with Mongo client\"\"\"\n    if hasattr(g, 'mongo_client'):\n        g.mongo_client.close()\n\n# Begin view routes\n@app.route('/')\n@app.route('/index/')\ndef index():\n    \"\"\"Landing page for SciNet\"\"\"\n    return render_template(\"index.html\")\n\n@app.route('/faq/')\ndef faq():\n    \"\"\"FAQ page for SciNet\"\"\"\n    return render_template(\"faq.html\")\n\n@app.route('/leaderboard/')\ndef leaderboard():\n    \"\"\"Leaderboard page for SciNet\"\"\"\n    get_db()\n    groups = get_groups(g.groups_collection)\n    return render_template(\"leaderboard.html\", groups=groups)\n\n@app.route('/ping', methods=['POST'])\ndef ping_endpoint():\n    \"\"\"API endpoint determines potential article hash exists in db\n\n    :return: status code 204 -- hash not present, continue submission\n    :return: status code 201 -- hash already exists, drop submission\n    \"\"\"\n    db = get_db()\n    target_hash = request.form.get('hash')\n    if db.raw.find({'hash': target_hash}).count():\n        return Response(status=201)\n    else:\n        return Response(status=204)\n\n@app.route('/articles')\ndef ArticleEndpoint():\n    \"\"\"Eventual landing page for searching/retrieving articles\"\"\"\n    if request.method == 'GET':\n        return render_template(\"articles.html\")\n\n@app.route('/raw', methods=['POST'])\ndef raw_endpoint():\n    \"\"\"API endpoint for submitting raw article data\n\n    :return: status code 405 - invalid JSON or invalid request type\n    :return: status code 400 - unsupported content-type or invalid publisher\n    :return: status code 201 - successful submission\n    \"\"\"\n    # Ensure post's content-type is supported\n    if request.headers['content-type'] == 'application/json':\n        # Ensure data is a valid JSON\n        try:\n            user_submission = json.loads(request.data)\n        except ValueError:\n            return Response(status=405)\n        # generate UID for new entry\n        uid = get_id()\n        # store incoming JSON in raw storage\n        file_path = os.path.join(\n                        HERE,\n                        'raw_payloads',\n                       ",
    "from corecat.constants import OBJECT_CODES, MODEL_VERSION\nfrom ._sqlalchemy import Base, CoreCatBaseMixin\nfrom ._sqlalchemy import Column, \\\n    Integer, \\\n    String, Text\n\n\nclass Project(CoreCatBaseMixin, Base):\n    \"\"\"Project Model class represent for the 'projects' table\n    which is used to store project's basic information.\"\"\"\n\n    # Add the real table name here.\n    # TODO: Add the database prefix here\n    __tablename__ = 'project'\n\n    # Column definition\n    project_id = Column('id', Integer,\n                        primary_key=True,\n                        autoincrement=True\n                        )\n    project_name = Column('name', String(100),\n                          nullable=False\n                          )\n    project_description = Column('description', Text,\n                                 nullable=True\n                                 )\n\n    # Relationship\n    # TODO: Building relationship\n\n    def __init__(self, project_name,\n                 created_by_user_id,\n                 **kwargs):\n        \"\"\"\n        Constructor of Project Model Class.\n\n        :param project_name: Name of the project.\n        :param created_by_user_id: Project is created under this user ID.\n        :param project_description: Description of the project.\n        \"\"\"\n\n        self.set_up_basic_information(\n            MODEL_VERSION[OBJECT_CODES['Project']],\n            created_by_user_id\n        )\n        self.project_name = project_name\n        self.project_description = kwargs.get('project_description', None)\n",
    "#!/usr/bin/env python\nfrom ansible.module_utils.hashivault import hashivault_argspec\nfrom ansible.module_utils.hashivault import hashivault_auth_client\nfrom ansible.module_utils.hashivault import hashivault_init\nfrom ansible.module_utils.hashivault import hashiwrapper\n\nANSIBLE_METADATA = {'status': ['stableinterface'], 'supported_by': 'community', 'version': '1.1'}\nDOCUMENTATION = '''\n---\nmodule: hashivault_approle_role_get\nversion_added: \"3.8.0\"\nshort_description: Hashicorp Vault approle role get module\ndescription:\n    - Module to get a approle role from Hashicorp Vault.\noptions:\n    name:\n        description:\n            - role name.\n    mount_point:\n        description:\n            - mount point for role\n        default: approle\nextends_documentation_fragment: hashivault\n'''\nEXAMPLES = '''\n---\n- hosts: localhost\n  tasks:\n    - hashivault_approle_role_get:\n        name: 'ashley'\n      register: 'vault_approle_role_get'\n    - debug: msg=\"Role is {{vault_approle_role_get.role}}\"\n'''\n\n\ndef main():\n    argspec = hashivault_argspec()\n    argspec['name'] = dict(required=True, type='str')\n    argspec['mount_point'] = dict(required=False, type='str', default='approle')\n    module = hashivault_init(argspec)\n    result = hashivault_approle_role_get(module.params)\n    if result.get('failed'):\n        module.fail_json(**result)\n    else:\n        module.exit_json(**result)\n\n\n@hashiwrapper\ndef hashivault_approle_role_get(params):\n    name = params.get('name')\n    client = hashivault_auth_client(params)\n    result = client.get_role(name, mount_point=params.get('mount_point'))\n    return {'role': result}\n\n\nif __name__ == '__main__':\n    main()\n",
    "from scrapy.spiders import Spider\r\nfrom scrapy.selector import Selector\r\nfrom scrapy.http import HtmlResponse\r\nfrom FIFAscrape.items import PlayerItem\r\nfrom urlparse import urlparse, urljoin\r\nfrom scrapy.http.request import Request\r\nfrom scrapy.conf import settings\r\nimport random\r\nimport time\r\n\r\nclass fifaSpider(Spider):\r\n    name = \"fifa\"\r\n    allowed_domains = [\"futhead.com\"]\r\n    start_urls = [\r\n        \"http://www.futhead.com/16/players/?level=all_nif&bin_platform=ps\"\r\n    ]\r\n\t\r\n\r\n    def parse(self, response):\r\n        #obtains links from page to page and passes links to parse_playerURL\r\n        sel = Selector(response)    #define selector based on response object (points to urls in start_urls by default) \r\n        url_list = sel.xpath('//a[@class=\"display-block padding-0\"]/@href')   #obtain a list of href links that contain relative links of players\r\n        for i in url_list:\r\n            relative_url = self.clean_str(i.extract())    #i is a selector and hence need to extract it to obtain unicode object\r\n            print urljoin(response.url, relative_url)   #urljoin is able to merge absolute and relative paths to form 1 coherent link\r\n            req = Request(urljoin(response.url, relative_url),callback=self.parse_playerURL)   #pass on request with new urls to parse_playerURL\r\n            req.headers[\"User-Agent\"] = self.random_ua()    \r\n            yield req\r\n        \r\n        next_url=sel.xpath('//div[@class=\"right-nav pull-right\"]/a[@rel=\"next\"]/@href').extract_first()  \r\n        if(next_url):                                                                       #checks if next page exists\r\n            clean_next_url = self.clean_str(next_url)\r\n            reqNext = Request(urljoin(response.url, clean_next_url),callback=self.parse)    #calls back this function to repeat process on new list of links\r\n            yield reqNext\r\n         \r\n    def parse_playerURL(self, response):    \r\n        #parses player specific data into items list\r\n        site = Selector(response)\r\n        items = []\r\n        item = PlayerItem()\r\n        item['1name'] = (response.url).rsplit(\"/\")[-2].replace(\"-\",\" \")\r\n        title = self.clean_str(site.xpath('/html/head/title/text()').extract_first())\r\n        item['OVR'] = title.partition(\"FIFA 16 -\")[1].split(\"-\")[0]\r\n        item['POS'] = self.clean_str(site.xpath('//div[@class=\"playercard-position\"]/text()').extract_first())\r\n        #stats = site.xpath('//div[@class=\"row player-center-container\"]/div/a')\r\n        stat_names = site.xpath('//span[@class=\"player-stat-title\"]')\r\n        stat_values = site.xpath('//span[contains(@class, \"player-stat-value\")]')\r\n        for index in range(len(stat_names)):\r\n            attr_name = stat_names[index].xpath('.//text()').extract_first()\r\n            item[attr_name] = stat_values[index].xpath('.//text()').extract_first()\r\n        items.append(item)\r\n        return items\r\n        \r\n    def clean_str(self,ustring):    \r\n        #removes wierd unicode chars (/u102 bla), ",
    "print(\"hello!!!!\")",
    "# coding=utf-8\n# --------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for license information.\n# Code generated by Microsoft (R) AutoRest Code Generator.\n# Changes may cause incorrect behavior and will be lost if the code is regenerated.\n# --------------------------------------------------------------------------\n\nfrom copy import deepcopy\nfrom typing import Any, Awaitable, Optional, TYPE_CHECKING\n\nfrom azure.core.rest import AsyncHttpResponse, HttpRequest\nfrom azure.mgmt.core import AsyncARMPipelineClient\nfrom msrest import Deserializer, Serializer\n\nfrom .. import models\nfrom ._configuration import SqlVirtualMachineManagementClientConfiguration\nfrom .operations import AvailabilityGroupListenersOperations, Operations, SqlVirtualMachineGroupsOperations, SqlVirtualMachinesOperations\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import,ungrouped-imports\n    from azure.core.credentials_async import AsyncTokenCredential\n\nclass SqlVirtualMachineManagementClient:\n    \"\"\"The SQL virtual machine management API provides a RESTful set of web APIs that interact with Azure Compute, Network & Storage services to manage your SQL Server virtual machine. The API enables users to create, delete and retrieve a SQL virtual machine, SQL virtual machine group or availability group listener.\n\n    :ivar availability_group_listeners: AvailabilityGroupListenersOperations operations\n    :vartype availability_group_listeners:\n     azure.mgmt.sqlvirtualmachine.aio.operations.AvailabilityGroupListenersOperations\n    :ivar operations: Operations operations\n    :vartype operations: azure.mgmt.sqlvirtualmachine.aio.operations.Operations\n    :ivar sql_virtual_machine_groups: SqlVirtualMachineGroupsOperations operations\n    :vartype sql_virtual_machine_groups:\n     azure.mgmt.sqlvirtualmachine.aio.operations.SqlVirtualMachineGroupsOperations\n    :ivar sql_virtual_machines: SqlVirtualMachinesOperations operations\n    :vartype sql_virtual_machines:\n     azure.mgmt.sqlvirtualmachine.aio.operations.SqlVirtualMachinesOperations\n    :param credential: Credential needed for the client to connect to Azure.\n    :type credential: ~azure.core.credentials_async.AsyncTokenCredential\n    :param subscription_id: Subscription ID that identifies an Azure subscription.\n    :type subscription_id: str\n    :param base_url: Service URL. Default value is 'https://management.azure.com'.\n    :type base_url: str\n    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n     Retry-After header is present.\n    \"\"\"\n\n    def __init__(\n        self,\n        credential: \"AsyncTokenCredential\",\n        subscription_id: str,\n        base_url: str = \"https://management.azure.com\",\n        **kwargs: Any\n    ) -> None:\n        self._config = SqlVirtualMachineManagementClientConfiguration(credential=credential, subscription_id",
    "from flask import Blueprint, request, render_template\nfrom ..load import processing_results\nfrom ..abbr import get_abbr_map\n\nabbr_map = get_abbr_map()\nliner_mod = Blueprint('liner', __name__, template_folder='templates', static_folder='static')\n\n\n@liner_mod.route('/liner', methods=['GET', 'POST'])\ndef liner():\n    if request.method == 'POST':\n        query = request.form['liner-text']\n        text = query.split('.')[:-1]\n        if len(text) == 0:\n            return render_template('projects/line.html', message='Please separate each line with \".\"')\n\n        abbr_expanded_text = \"\"\n        for word in query.split():\n            if word in abbr_map:\n                abbr_expanded_text += abbr_map[word]\n            else:\n                abbr_expanded_text += word\n            abbr_expanded_text += \" \" \n\n        data, emotion_sents, score, line_sentiment, text, length = processing_results(text)\n        return render_template('projects/line.html', data=[data, emotion_sents, score, zip(text, line_sentiment), length, abbr_expanded_text])\n    else:\n        return render_template('projects/line.html')\n",
    "# coding=utf-8\n# --------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n#\n# Code generated by Microsoft (R) AutoRest Code Generator.\n# Changes may cause incorrect behavior and will be lost if the code is\n# regenerated.\n# --------------------------------------------------------------------------\n\nfrom msrest.serialization import Model\n\n\nclass Dimension(Model):\n    \"\"\"Dimension of a resource metric. For e.g. instance specific HTTP requests\n    for a web app,\n    where instance name is dimension of the metric HTTP request.\n\n    :param name:\n    :type name: str\n    :param display_name:\n    :type display_name: str\n    :param internal_name:\n    :type internal_name: str\n    :param to_be_exported_for_shoebox:\n    :type to_be_exported_for_shoebox: bool\n    \"\"\"\n\n    _attribute_map = {\n        'name': {'key': 'name', 'type': 'str'},\n        'display_name': {'key': 'displayName', 'type': 'str'},\n        'internal_name': {'key': 'internalName', 'type': 'str'},\n        'to_be_exported_for_shoebox': {'key': 'toBeExportedForShoebox', 'type': 'bool'},\n    }\n\n    def __init__(self, name=None, display_name=None, internal_name=None, to_be_exported_for_shoebox=None):\n        super(Dimension, self).__init__()\n        self.name = name\n        self.display_name = display_name\n        self.internal_name = internal_name\n        self.to_be_exported_for_shoebox = to_be_exported_for_shoebox\n",
    "import asyncio\r\nimport discord\r\nimport datetime\r\nimport pytz\r\nfrom   discord.ext import commands\r\nfrom   Cogs import FuzzySearch\r\nfrom   Cogs import Settings\r\nfrom   Cogs import DisplayName\r\nfrom   Cogs import Message\r\nfrom   Cogs import Nullify\r\n\r\nclass Time:\r\n\r\n\t# Init with the bot reference, and a reference to the settings var\r\n\tdef __init__(self, bot, settings):\r\n\t\tself.bot = bot\r\n\t\tself.settings = settings\r\n\r\n\r\n\t@commands.command(pass_context=True)\r\n\tasync def settz(self, ctx, *, tz : str = None):\r\n\t\t\"\"\"Sets your TimeZone - Overrides your UTC offset - and accounts for DST.\"\"\"\r\n\t\tusage = 'Usage: `{}settz [Region/City]`\\nYou can get a list of available TimeZones with `{}listtz`'.format(ctx.prefix, ctx.prefix)\r\n\t\tif not tz:\r\n\t\t\tself.settings.setGlobalUserStat(ctx.author, \"TimeZone\", None)\r\n\t\t\tawait ctx.channel.send(\"*{}*, your TimeZone has been removed!\".format(DisplayName.name(ctx.author)))\r\n\t\t\treturn\r\n\t\t\r\n\t\t# Let's get the timezone list\r\n\t\ttz_list = FuzzySearch.search(tz, pytz.all_timezones, None, 3)\r\n\t\tif not tz_list[0]['Ratio'] == 1:\r\n\t\t\t# We didn't find a complete match\r\n\t\t\tmsg = \"I couldn't find that TimeZone!\\n\\nMaybe you meant one of the following?\\n```\"\r\n\t\t\tfor tz in tz_list:\r\n\t\t\t\tmsg += tz['Item'] + \"\\n\"\r\n\t\t\tmsg += '```'\r\n\t\t\tawait ctx.channel.send(msg)\r\n\t\t\treturn\r\n\t\t# We got a time zone\r\n\t\tself.settings.setGlobalUserStat(ctx.author, \"TimeZone\", tz_list[0]['Item'])\r\n\t\tawait ctx.channel.send(\"TimeZone set to *{}!*\".format(tz_list[0]['Item']))\r\n\r\n\t\r\n\t@commands.command(pass_context=True)\r\n\tasync def listtz(self, ctx, *, tz_search = None):\r\n\t\t\"\"\"List all the supported TimeZones in PM.\"\"\"\r\n\r\n\t\tif not tz_search:\r\n\t\t\tmsg = \"__Available TimeZones:__\\n\\n\"\r\n\t\t\tfor tz in pytz.all_timezones:\r\n\t\t\t\tmsg += tz + \"\\n\"\r\n\t\telse:\r\n\t\t\ttz_list = FuzzySearch.search(tz_search, pytz.all_timezones)\r\n\t\t\tmsg = \"__Top 3 TimeZone Matches:__\\n\\n\"\r\n\t\t\tfor tz in tz_list:\r\n\t\t\t\tmsg += tz['Item'] + \"\\n\"\r\n\r\n\t\tawait Message.say(self.bot, msg, ctx.channel, ctx.author, 1)\r\n\r\n\r\n\t@commands.command(pass_context=True)\r\n\tasync def tz(self, ctx, *, member = None):\r\n\t\t\"\"\"See a member's TimeZone.\"\"\"\r\n\t\t# Check if we're suppressing @here and @everyone mentions\r\n\t\tif self.settings.getServerStat(ctx.message.guild, \"SuppressMentions\").lower() == \"yes\":\r\n\t\t\tsuppress = True\r\n\t\telse:\r\n\t\t\tsuppress = False\r\n\r\n\t\tif member == None:\r\n\t\t\tmember = ctx.message.author\r\n\r\n\t\tif type(member) == str:\r\n\t\t\t# Try to get a user first\r\n\t\t\tmemberName = member\r\n\t\t\tmember = DisplayName.memberForName(memberName, ctx.message.guild)\r\n\t\t\tif not member:\r\n\t\t\t\tmsg = 'Couldn\\'t find user *{}*.'.format(memberName)\r\n\t\t\t\t# Check for suppress\r\n\t\t\t\tif suppress:\r\n\t\t\t\t\tmsg = Nullify.clean(msg)\r\n\t\t\t\tawait ctx.channel.send(msg)\r\n\t\t\t\treturn\r\n\r\n\t\t# We got one\r\n\t\ttimezone = self.settings.getGlobalUserStat(member, \"TimeZone\")\r\n\t\tif timezone == None:\r\n\t\t\tmsg = '*{}* hasn\\'t set their TimeZone yet - they can do so with the `{}settz [Region/City]` command.'.format(DisplayName.name(member), ctx.prefix)\r\n\t\t\tawait ctx.channel.send(msg)\r",
    "import unittest\n\nfrom katas.beta.what_color_is_your_name import string_color\n\n\nclass StringColorTestCase(unittest.TestCase):\n    def test_equal_1(self):\n        self.assertEqual(string_color('Jack'), '79CAE5')\n\n    def test_equal_2(self):\n        self.assertEqual(string_color('Joshua'), '6A10D6')\n\n    def test_equal_3(self):\n        self.assertEqual(string_color('Joshua Smith'), '8F00FB')\n\n    def test_equal_4(self):\n        self.assertEqual(string_color('Hayden Smith'), '7E00EE')\n\n    def test_equal_5(self):\n        self.assertEqual(string_color('Mathew Smith'), '8B00F1')\n\n    def test_is_none_1(self):\n        self.assertIsNone(string_color('a'))\n",
    "# coding: utf-8\n\nfrom sqlalchemy.testing import eq_, assert_raises, assert_raises_message, \\\n    config, is_\nimport re\nfrom sqlalchemy.testing.util import picklers\nfrom sqlalchemy.interfaces import ConnectionProxy\nfrom sqlalchemy import MetaData, Integer, String, INT, VARCHAR, func, \\\n    bindparam, select, event, TypeDecorator, create_engine, Sequence\nfrom sqlalchemy.sql import column, literal\nfrom sqlalchemy.testing.schema import Table, Column\nimport sqlalchemy as tsa\nfrom sqlalchemy import testing\nfrom sqlalchemy.testing import engines\nfrom sqlalchemy import util\nfrom sqlalchemy.testing.engines import testing_engine\nimport logging.handlers\nfrom sqlalchemy.dialects.oracle.zxjdbc import ReturningParam\nfrom sqlalchemy.engine import result as _result, default\nfrom sqlalchemy.engine.base import Engine\nfrom sqlalchemy.testing import fixtures\nfrom sqlalchemy.testing.mock import Mock, call, patch\nfrom contextlib import contextmanager\n\nusers, metadata, users_autoinc = None, None, None\nclass ExecuteTest(fixtures.TestBase):\n    __backend__ = True\n\n    @classmethod\n    def setup_class(cls):\n        global users, users_autoinc, metadata\n        metadata = MetaData(testing.db)\n        users = Table('users', metadata,\n            Column('user_id', INT, primary_key=True, autoincrement=False),\n            Column('user_name', VARCHAR(20)),\n        )\n        users_autoinc = Table('users_autoinc', metadata,\n            Column('user_id', INT, primary_key=True,\n                                    test_needs_autoincrement=True),\n            Column('user_name', VARCHAR(20)),\n        )\n        metadata.create_all()\n\n    @engines.close_first\n    def teardown(self):\n        testing.db.execute(users.delete())\n\n    @classmethod\n    def teardown_class(cls):\n        metadata.drop_all()\n\n    @testing.fails_on(\"postgresql+pg8000\",\n            \"pg8000 still doesn't allow single % without params\")\n    def test_no_params_option(self):\n        stmt = \"SELECT '%'\" + testing.db.dialect.statement_compiler(\n                                    testing.db.dialect, None).default_from()\n\n        conn = testing.db.connect()\n        result = conn.\\\n                execution_options(no_parameters=True).\\\n                scalar(stmt)\n        eq_(result, '%')\n\n    @testing.fails_on_everything_except('firebird',\n                                        'sqlite', '+pyodbc',\n                                        '+mxodbc', '+zxjdbc', 'mysql+oursql')\n    def test_raw_qmark(self):\n        def go(conn):\n            conn.execute('insert into users (user_id, user_name) '\n                         'values (?, ?)', (1, 'jack'))\n            conn.execute('insert into users (user_id, user_name) '\n                         'values (?, ?)', [2, 'fred'])\n            conn.execute('insert into users (user_id, user_name) '\n                         'values (?, ?)', [3, 'ed'], [4, 'horse'])\n            conn.execute('insert into users (user_id, user_name) '\n                         'values (?, ?)', (5, 'barney'), (",
    "\"\"\"\n``editquality generate_make -h``\n::\n\n    Code-generate Makefile from template and configuration\n\n    :Usage:\n        generate_make -h | --help\n        generate_make\n                     [--config=<path>]\n                     [--main=<filename>]\n                     [--output=<path>]\n                     [--templates=<path>]\n                     [--debug]\n\n    :Options:\n        --config=<path>         Directory to search for configuration files\n                                [default: config/]\n        --main=<filename>       Override to use a main template other than the\n                                default [default: Makefile.j2]\n        --output=<path>         Where to write the Makefile output.\n                                [default: <stdout>]\n        --templates=<path>      Directory to search for input templates.\n                                [default: templates/]\n        --debug                 Print debug logging\n\n\"\"\"\n\n# TODO:\n# * make API calls to learn things\n# * ores/config has dict merge\n# * survey dependency solvers\n# https://github.com/ninja-build/ninja/wiki/List-of-generators-producing-ninja-build-files\n# ** Still considering: scons, doit, drake, ninja, meson\n# ** Don't like so far: waf\n# * Where can we store information about samples?\n#   Original population rates; how we've distorted them.\n\nimport logging\nimport os.path\nimport sys\n\nimport docopt\n\nfrom .. import config\nfrom ..codegen import generate\n\nlogger = logging.getLogger(__name__)\n\n\ndef main(argv=None):\n    args = docopt.docopt(__doc__, argv=argv)\n\n    logging.basicConfig(\n        level=logging.DEBUG if args['--debug'] else logging.WARNING,\n        format='%(asctime)s %(levelname)s:%(name)s -- %(message)s'\n    )\n\n    config_path = args[\"--config\"]\n\n    output_f = sys.stdout \\\n        if args[\"--output\"] == \"<stdout>\" \\\n        else open(args[\"--output\"], \"w\")\n\n    templates_path = args[\"--templates\"]\n    main_template_path = args[\"--main\"]\n    if not os.path.isabs(main_template_path):\n        # Join a filename to the default templates dir.\n        main_template_path = os.path.join(templates_path, main_template_path)\n    with open(main_template_path, \"r\") as f:\n        main_template = f.read()\n\n    variables = config.load_config(config_path)\n\n    output = generate.generate(variables, templates_path, main_template)\n    output_f.write(output)\n",
    "# coding=utf-8\n# --------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n#\n# Code generated by Microsoft (R) AutoRest Code Generator.\n# Changes may cause incorrect behavior and will be lost if the code is\n# regenerated.\n# --------------------------------------------------------------------------\n\nfrom msrest.serialization import Model\n\n\nclass Product(Model):\n\n    _required = []\n\n    _attribute_map = {\n        'integer': {'key': 'integer', 'type': 'int'},\n        'string': {'key': 'string', 'type': 'str'},\n    }\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Product\n\n        :param int integer\n        :param str string\n        \"\"\"\n        self.integer = None\n        self.string = None\n\n        super(Product, self).__init__(*args, **kwargs)\n",
    "# coding=utf8\n\"\"\"\nParser for todo format string.\n\n  from todo.parser import parser\n  parser.parse(string)  # return an Todo instance\n\n\"\"\"\n\nfrom models import Task\nfrom models import Todo\n\nfrom ply import lex\nfrom ply import yacc\n\n\nclass TodoLexer(object):\n    \"\"\"\n    Lexer for Todo format string.\n    Tokens\n      ID        e.g. '1.'\n      DONE      e.g. '(x)'\n      TASK      e.g. 'This is a task'\n    \"\"\"\n\n    tokens = (\n        \"ID\",\n        \"DONE\",\n        \"TASK\",\n    )\n\n    t_ignore = \"\\x20\\x09\"  # ignore spaces and tabs\n\n    def t_ID(self, t):\n        r'\\d+\\.([uU]|[lL]|[uU][lL]|[lL][uU])?'\n        t.value = int(t.value[:-1])\n        return t\n\n    def t_DONE(self, t):\n        r'(\\(x\\))'\n        return t\n\n    def t_TASK(self, t):\n        r'((?!\\(x\\))).+'\n        return t\n\n    def t_newline(self, t):\n        r'\\n+'\n        t.lexer.lineno += len(t.value)\n\n    def t_error(self, t):\n        raise SyntaxError(\n            \"Illegal character: '%s' at Line %d\" % (t.value[0], t.lineno)\n        )\n\n    def __init__(self):\n        self.lexer = lex.lex(module=self)\n\n\nclass TodoParser(object):\n    \"\"\"\n    Parser for Todo format string, works with a todo lexer.\n\n    Parse string to Python list\n      todo_str = \"1. (x) Write email to tom\"\n      TodoParser().parse(todo_str)\n    \"\"\"\n\n    tokens = TodoLexer.tokens\n\n    def p_error(self, p):\n        if p:\n            raise SyntaxError(\n                \"Character '%s' at line %d\" % (p.value[0], p.lineno)\n            )\n        else:\n            raise SyntaxError(\"SyntaxError at EOF\")\n\n    def p_start(self, p):\n        \"start : translation_unit\"\n        p[0] = self.todo\n\n    def p_translation_unit(self, p):\n        \"\"\"\n        translation_unit : translate_task\n                         | translation_unit translate_task\n                         |\n        \"\"\"\n        pass\n\n    def p_translation_task(self, p):\n        \"\"\"\n        translate_task : ID DONE TASK\n                       | ID TASK\n        \"\"\"\n        if len(p) == 4:\n            done = True\n            content = p[3]\n        elif len(p) == 3:\n            done = False\n            content = p[2]\n        task = Task(p[1], content, done)\n        self.todo.append(task)\n\n    def __init__(self):\n        self.parser = yacc.yacc(module=self, debug=0, write_tables=0)\n\n    def parse(self, data):\n        # reset list\n        self.todo = Todo()\n        return self.parser.parse(data)\n\n\nlexer = TodoLexer()  # build lexer\nparser = TodoParser()  # build parser\n",
    "import time\n\nimport pymemcache.client\nimport pytest\n\nfrom limits import RateLimitItemPerMinute, RateLimitItemPerSecond\nfrom limits.storage import MemcachedStorage, storage_from_string\nfrom limits.strategies import (\n    FixedWindowElasticExpiryRateLimiter,\n    FixedWindowRateLimiter,\n)\nfrom tests.utils import fixed_start\n\n\n@pytest.mark.memcached\n@pytest.mark.flaky\nclass TestMemcachedStorage:\n    @pytest.fixture(autouse=True)\n    def setup(self, memcached, memcached_cluster):\n        self.storage_url = \"memcached://localhost:22122\"\n\n    def test_init_options(self, mocker):\n        constructor = mocker.spy(pymemcache.client, \"PooledClient\")\n        assert storage_from_string(self.storage_url, connect_timeout=1).check()\n        assert constructor.call_args[1][\"connect_timeout\"] == 1\n\n    @fixed_start\n    def test_fixed_window(self):\n        storage = MemcachedStorage(\"memcached://localhost:22122\")\n        limiter = FixedWindowRateLimiter(storage)\n        per_min = RateLimitItemPerSecond(10)\n        start = time.time()\n        count = 0\n\n        while time.time() - start < 0.5 and count < 10:\n            assert limiter.hit(per_min)\n            count += 1\n        assert not limiter.hit(per_min)\n\n        while time.time() - start <= 1:\n            time.sleep(0.1)\n        assert limiter.hit(per_min)\n\n    @fixed_start\n    def test_fixed_window_cluster(self):\n        storage = MemcachedStorage(\"memcached://localhost:22122,localhost:22123\")\n        limiter = FixedWindowRateLimiter(storage)\n        per_min = RateLimitItemPerSecond(10)\n        start = time.time()\n        count = 0\n\n        while time.time() - start < 0.5 and count < 10:\n            assert limiter.hit(per_min)\n            count += 1\n        assert not limiter.hit(per_min)\n\n        while time.time() - start <= 1:\n            time.sleep(0.1)\n        assert limiter.hit(per_min)\n\n    @fixed_start\n    def test_fixed_window_with_elastic_expiry(self):\n        storage = MemcachedStorage(\"memcached://localhost:22122\")\n        limiter = FixedWindowElasticExpiryRateLimiter(storage)\n        per_sec = RateLimitItemPerSecond(2, 2)\n\n        assert limiter.hit(per_sec)\n        time.sleep(1)\n        assert limiter.hit(per_sec)\n        assert not limiter.test(per_sec)\n        time.sleep(1)\n        assert not limiter.test(per_sec)\n        time.sleep(1)\n        assert limiter.test(per_sec)\n\n    @fixed_start\n    def test_fixed_window_with_elastic_expiry_cluster(self):\n        storage = MemcachedStorage(\"memcached://localhost:22122,localhost:22123\")\n        limiter = FixedWindowElasticExpiryRateLimiter(storage)\n        per_sec = RateLimitItemPerSecond(2, 2)\n\n        assert limiter.hit(per_sec)\n        time.sleep(1)\n        assert limiter.hit(per_sec)\n        assert not limiter.test(per_sec)\n        time.sleep(1)\n        assert not limiter.test(per_sec)\n        time.sleep(1)\n        assert limiter.test(per_sec)\n\n    def test_clear(self):\n        storage = MemcachedStorage(\"memcached://localhost:22122\")\n        limi",
    "import os\nimport sys\nimport tempfile\n\nfrom fabric.api import run, sudo, env, local, hide, settings\nfrom fabric.contrib.files import append, sed, exists, contains\nfrom fabric.context_managers import prefix\nfrom fabric.operations import get, put\nfrom fabric.context_managers import cd\n\nfrom fabric.tasks import Task\n\nfrom fab_deploy.functions import random_password\nfrom fab_deploy.base import postgres as base_postgres\n\nclass JoyentMixin(object):\n    version_directory_join = ''\n\n    def _get_data_dir(self, db_version):\n        # Try to get from svc first\n        output = run('svcprop -p config/data postgresql')\n        if output.stdout and exists(output.stdout, use_sudo=True):\n            return output.stdout\n        return base_postgres.PostgresInstall._get_data_dir(self, db_version)\n\n    def _install_package(self, db_version):\n        sudo(\"pkg_add postgresql%s-server\" %db_version)\n        sudo(\"pkg_add postgresql%s-replicationtools\" %db_version)\n        sudo(\"svcadm enable postgresql\")\n\n    def _restart_db_server(self, db_version):\n        sudo('svcadm restart postgresql')\n\n    def _stop_db_server(self, db_version):\n        sudo('svcadm disable postgresql')\n\n    def _start_db_server(self, db_version):\n        sudo('svcadm enable postgresql')\n\nclass PostgresInstall(JoyentMixin, base_postgres.PostgresInstall):\n    \"\"\"\n    Install postgresql on server\n\n    install postgresql package;\n    enable postgres access from localhost without password;\n    enable all other user access from other machines with password;\n    setup a few parameters related with streaming replication;\n    database server listen to all machines '*';\n    create a user for database with password.\n    \"\"\"\n\n    name = 'master_setup'\n    db_version = '9.1'\n\nclass SlaveSetup(JoyentMixin, base_postgres.SlaveSetup):\n    \"\"\"\n    Set up master-slave streaming replication: slave node\n    \"\"\"\n\n    name = 'slave_setup'\n\nclass PGBouncerInstall(Task):\n    \"\"\"\n    Set up PGBouncer on a database server\n    \"\"\"\n\n    name = 'setup_pgbouncer'\n\n    pgbouncer_src = 'http://pkgsrc.smartos.org/packages/SmartOS/2012Q2/databases/pgbouncer-1.4.2.tgz'\n    pkg_name = 'pgbouncer-1.4.2.tgz'\n    config_dir = '/etc/opt/pkg'\n\n    config = {\n        '*':              'host=127.0.0.1',\n        'logfile':        '/var/log/pgbouncer/pgbouncer.log',\n        'listen_addr':    '*',\n        'listen_port':    '6432',\n        'unix_socket_dir': '/tmp',\n        'auth_type':      'md5',\n        'auth_file':      '%s/pgbouncer.userlist' %config_dir,\n        'pool_mode':      'session',\n        'admin_users':    'postgres',\n        'stats_users':    'postgres',\n        }\n\n    def install_package(self):\n        sudo('pkg_add libevent')\n        with cd('/tmp'):\n            run('wget %s' %self.pgbouncer_src)\n            sudo('pkg_add %s' %self.pkg_name)\n\n    def _setup_parameter(self, file_name, **kwargs):\n        for key, value in kwargs.items():\n            origin = \"%s =\" %key\n            new = \"%s = %s\" %(key, value)\n           ",
    "\"\"\"\nGauged\nhttps://github.com/chriso/gauged (MIT Licensed)\nCopyright 2014 (c) Chris O'Hara <cohara87@gmail.com>\n\"\"\"\n\nfrom urlparse import urlparse, parse_qsl\nfrom urllib import unquote\nfrom .mysql import MySQLDriver\nfrom .sqlite import SQLiteDriver\nfrom .postgresql import PostgreSQLDriver\n\n\ndef parse_dsn(dsn_string):\n    \"\"\"Parse a connection string and return the associated driver\"\"\"\n    dsn = urlparse(dsn_string)\n    scheme = dsn.scheme.split('+')[0]\n    username = password = host = port = None\n    host = dsn.netloc\n    if '@' in host:\n        username, host = host.split('@')\n        if ':' in username:\n            username, password = username.split(':')\n            password = unquote(password)\n        username = unquote(username)\n    if ':' in host:\n        host, port = host.split(':')\n        port = int(port)\n    database = dsn.path.split('?')[0][1:]\n    query = dsn.path.split('?')[1] if '?' in dsn.path else dsn.query\n    kwargs = dict(parse_qsl(query, True))\n    if scheme == 'sqlite':\n        return SQLiteDriver, [dsn.path], {}\n    elif scheme == 'mysql':\n        kwargs['user'] = username or 'root'\n        kwargs['db'] = database\n        if port:\n            kwargs['port'] = port\n        if host:\n            kwargs['host'] = host\n        if password:\n            kwargs['passwd'] = password\n        return MySQLDriver, [], kwargs\n    elif scheme == 'postgresql':\n        kwargs['user'] = username or 'postgres'\n        kwargs['database'] = database\n        if port:\n            kwargs['port'] = port\n        if 'unix_socket' in kwargs:\n            kwargs['host'] = kwargs.pop('unix_socket')\n        elif host:\n            kwargs['host'] = host\n        if password:\n            kwargs['password'] = password\n        return PostgreSQLDriver, [], kwargs\n    else:\n        raise ValueError('Unknown driver %s' % dsn_string)\n\n\ndef get_driver(dsn_string):\n    driver, args, kwargs = parse_dsn(dsn_string)\n    return driver(*args, **kwargs)\n",
    "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ibtokin.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and \"\n                \"available on your PYTHONPATH environment variable? Did you \"\n                \"forget to activate a virtual environment?\"\n            )\n        raise\n    execute_from_command_line(sys.argv)\n",
    "import boto\nimport mock\nimport moto\nimport tempfile\nimport unittest\n\nfrom click.testing import CliRunner\n\nfrom rubberjackcli.click import rubberjack\n\n\nclass CLITests(unittest.TestCase):\n\n    @moto.mock_s3_deprecated\n    @mock.patch('boto.beanstalk.layer1.Layer1.create_application_version')\n    @mock.patch('boto.beanstalk.layer1.Layer1.update_environment')\n    def test_deploy(self, cav, ue):\n        s3 = boto.connect_s3()\n        s3.create_bucket(\"laterpay-rubberjack-ebdeploy\")  # FIXME Remove hardcoded bucket name\n\n        with tempfile.NamedTemporaryFile() as tmp:\n            result = CliRunner().invoke(rubberjack, ['deploy', tmp.name], catch_exceptions=False)\n\n            self.assertEquals(result.exit_code, 0, result.output)\n\n    @moto.mock_s3_deprecated\n    @mock.patch('boto.beanstalk.layer1.Layer1.describe_environments')\n    @mock.patch('boto.beanstalk.layer1.Layer1.update_environment')\n    def test_promote(self, ue, de):\n        de.return_value = {\n            'DescribeEnvironmentsResponse': {\n                'DescribeEnvironmentsResult': {\n                    'Environments': [\n                        {\n                            'EnvironmentName': 'laterpay-devnull-live',  # FIXME Remove hardcoded EnvName\n                            'VersionLabel': 'old',\n                        },\n                        {\n                            'EnvironmentName': 'laterpay-devnull-dev',  # FIXME Remove hardcoded EnvName\n                            'VersionLabel': 'new',\n                        },\n                    ],\n                },\n            },\n        }\n\n        CliRunner().invoke(rubberjack, ['promote'], catch_exceptions=False)\n\n    @moto.mock_s3_deprecated\n    @mock.patch('sys.exit')\n    @mock.patch('boto.beanstalk.layer1.Layer1.describe_environments')\n    @mock.patch('boto.beanstalk.layer1.Layer1.update_environment')\n    def test_promoting_same_version(self, ue, de, se):\n        de.return_value = {\n            'DescribeEnvironmentsResponse': {\n                'DescribeEnvironmentsResult': {\n                    'Environments': [\n                        {\n                            'EnvironmentName': 'laterpay-devnull-live',  # FIXME Remove hardcoded EnvName\n                            'VersionLabel': 'same',\n                        },\n                        {\n                            'EnvironmentName': 'laterpay-devnull-dev',  # FIXME Remove hardcoded EnvName\n                            'VersionLabel': 'same',\n                        },\n                    ],\n                },\n            },\n        }\n\n        CliRunner().invoke(rubberjack, ['promote'], catch_exceptions=False)\n\n        self.assertTrue(se.called)\n\n    @moto.mock_s3_deprecated\n    def test_sigv4(self):\n        CliRunner().invoke(rubberjack, ['--sigv4-host', 'foo', 'deploy'], catch_exceptions=False)\n\n    @moto.mock_s3_deprecated\n    @mock.patch('boto.beanstalk.layer1.Layer1.create_application_version')\n    @mock.patch('boto.beanstalk.layer1.Layer1.update_environment')\n",
    "from __future__ import absolute_import, division, print_function\n# note: py.io capture tests where copied from\n# pylib 1.4.20.dev2 (rev 13d9af95547e)\nfrom __future__ import with_statement\nimport pickle\nimport os\nimport sys\nfrom io import UnsupportedOperation\n\nimport _pytest._code\nimport py\nimport pytest\nimport contextlib\n\nfrom _pytest import capture\nfrom _pytest.capture import CaptureManager\nfrom _pytest.main import EXIT_NOTESTSCOLLECTED\n\n\nneedsosdup = pytest.mark.xfail(\"not hasattr(os, 'dup')\")\n\nif sys.version_info >= (3, 0):\n    def tobytes(obj):\n        if isinstance(obj, str):\n            obj = obj.encode('UTF-8')\n        assert isinstance(obj, bytes)\n        return obj\n\n    def totext(obj):\n        if isinstance(obj, bytes):\n            obj = str(obj, 'UTF-8')\n        assert isinstance(obj, str)\n        return obj\nelse:\n    def tobytes(obj):\n        if isinstance(obj, unicode):\n            obj = obj.encode('UTF-8')\n        assert isinstance(obj, str)\n        return obj\n\n    def totext(obj):\n        if isinstance(obj, str):\n            obj = unicode(obj, 'UTF-8')\n        assert isinstance(obj, unicode)\n        return obj\n\n\ndef oswritebytes(fd, obj):\n    os.write(fd, tobytes(obj))\n\n\ndef StdCaptureFD(out=True, err=True, in_=True):\n    return capture.MultiCapture(out, err, in_, Capture=capture.FDCapture)\n\n\ndef StdCapture(out=True, err=True, in_=True):\n    return capture.MultiCapture(out, err, in_, Capture=capture.SysCapture)\n\n\nclass TestCaptureManager(object):\n    def test_getmethod_default_no_fd(self, monkeypatch):\n        from _pytest.capture import pytest_addoption\n        from _pytest.config import Parser\n        parser = Parser()\n        pytest_addoption(parser)\n        default = parser._groups[0].options[0].default\n        assert default == \"fd\" if hasattr(os, \"dup\") else \"sys\"\n        parser = Parser()\n        monkeypatch.delattr(os, 'dup', raising=False)\n        pytest_addoption(parser)\n        assert parser._groups[0].options[0].default == \"sys\"\n\n    @needsosdup\n    @pytest.mark.parametrize(\"method\",\n                             ['no', 'sys', pytest.mark.skipif('not hasattr(os, \"dup\")', 'fd')])\n    def test_capturing_basic_api(self, method):\n        capouter = StdCaptureFD()\n        old = sys.stdout, sys.stderr, sys.stdin\n        try:\n            capman = CaptureManager(method)\n            capman.start_global_capturing()\n            outerr = capman.suspend_global_capture()\n            assert outerr == (\"\", \"\")\n            outerr = capman.suspend_global_capture()\n            assert outerr == (\"\", \"\")\n            print(\"hello\")\n            out, err = capman.suspend_global_capture()\n            if method == \"no\":\n                assert old == (sys.stdout, sys.stderr, sys.stdin)\n            else:\n                assert not out\n            capman.resume_global_capture()\n            print(\"hello\")\n            out, err = capman.suspend_global_capture()\n            if method != \"no\":\n                assert out == \"hello\\n\"\n            capman.st",
    "import zmq\nimport datetime\nimport pytz\n\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.conf import settings\n\nfrom registrations.models import Registration\nfrom registrations import handlers\nfrom registrations import tasks\n\nclass Command(BaseCommand):\n\n    def log(self, message):\n        f = open(settings.TASK_LOG_PATH, 'a')\n        now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)\n        log_message = \"%s\\t%s\\n\" % (now, message)\n        self.stdout.write(log_message)\n        f.write(log_message)\n        f.close()\n\n    def handle(self, *args, **options):\n        \n        context = zmq.Context() \n        pull_socket = context.socket(zmq.PULL) \n        pull_socket.bind('tcp://*:7002') \n        self.log(\"Registration Worker ZMQ Socket Bound to 7002\")\n        \n        while True:\n            try: \n                data = pull_socket.recv_json() \n                task_name = data.pop('task')\n                task_kwargs = data.pop('kwargs')\n                self.log(\"Got task '%s' with kwargs: %s\" % (task_name, task_kwargs))\n                if hasattr(tasks, task_name):\n                    result = getattr(tasks, task_name)(**task_kwargs)\n                    self.log(\"Task '%s' result: %s\" % (task_name, result))\n                else:\n                    self.log(\"Received unknown task: %s\", task_name)\n            except Exception, e: \n                self.log(\"Error: %s\" % e)\n\n        pull_socket.close()\n        context.term()\n",
    "#!/usr/bin/python\nfrom noisemapper.mapper import *\n#from collectors.lib import utils\n\n### Define the object mapper and start mapping\n\n\ndef main():\n#    utils.drop_privileges()\n    mapper = NoiseMapper()\n    mapper.run()\n\nif __name__ == \"__main__\":\n    main()\n",
    "import numpy as np\nfrom numpy import cumsum, sum, searchsorted\nfrom numpy.random import rand\nimport math\nimport utils\nimport core.sentence as sentence\nimport core.markovchain as mc\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n# Dialogue making class. Need to review where to return a string, where to return a list of tokens, etc.\n# setters: list of speakers, pronouns, priors etc.\n# random transitions\n# Internal: build list of structures:\n#     e.g.{:speaker_name \"Alice\", :speaker_pronoun \"she\", :speaker_str \"she\", :speech_verb \"said\", :position \"end\"}\n# Then end with fn that maps that out to a suitable string\n#     e.g. \"<SPEECH>, she said.\"\n# External bit then replaces <SPEECH> with a markov-chain-generated sentence (or several).\n\n\nclass dialogue_maker(object):\n    \"\"\"Class to handle creating dialogue based on a list of speakers and a sentence generator.\"\"\"\n    def __init__(self, names, pronouns, mc):\n        self.speakers = [{\"name\": n, \"pronoun\": p} for n, p in list(zip(names, pronouns))]\n        self._transitions = self.make_transition_probs()\n        self._speech_acts = [\"said\", \"whispered\", \"shouted\", \"cried\"]\n        self._acts_transitions = [25, 2, 2, 2]\n        self.mc = mc\n        # self.seeds = seeds\n        self.target_len = np.random.randint(5, 50, size=len(names))  # rough words per sentence\n\n    def make_transition_probs(self):\n        \"\"\"Make transition matrix between speakers, with random symmetric biases added in\"\"\"\n        n = len(self.speakers)  # TODO why this line ???\n        transitions = np.random.randint(5, size=(n, n)) + 1\n        transitions += transitions.transpose()\n        for i in range(0, math.floor(n / 2)):\n            s1 = np.random.randint(n)\n            s2 = np.random.randint(n)\n            transitions[s1][s2] += 10\n            transitions[s2][s1] += 8\n        return(transitions)\n\n    def after(self, speaker_id):\n        \"\"\"Pick next person to speak\"\"\"\n        row = self._transitions[speaker_id]\n        sucessor = searchsorted(cumsum(row), rand() * sum(row))\n        return sucessor\n\n    def speaker_sequence(self, speaker_id, n):\n        \"\"\"Random walk through transitions matrix to produce a sequence of speaker ids\"\"\"\n        seq = []\n        for i in range(n):\n            seq.append(speaker_id)\n            speaker_id = self.after(speaker_id)\n        return seq\n\n    def speech_sequence(self, n):\n        speech_acts_seq = []\n        next_speech_id = 0\n        for i in range(n):\n            next_speech_id = searchsorted(cumsum(self._acts_transitions), rand() * sum(self._acts_transitions))\n            speech_acts_seq.append(self._speech_acts[next_speech_id])\n        return speech_acts_seq\n\n    def seq_to_names(self, sequence):\n        return([self.speakers[id] for id in sequence])\n\n    def make_speech_bits(self, seeds):\n        n = len(seeds)\n        speaker_id = self.speaker_sequence(0, n)\n        speech_acts_seq = self.speech_sequence(n)\n        bits = []\n        ss = sentence.SentenceMaker(self.mc)\n     ",
    "# -*- coding: utf-8 -*-\n\nfrom django.contrib.admin import TabularInline\nfrom .models import GalleryPhoto\n\n\nclass PhotoInline(TabularInline):\n    \"\"\"\n    Tabular inline that will be displayed in the gallery form during frontend\n    editing or in the admin site.\n    \"\"\"\n    model = GalleryPhoto\n    fk_name = \"gallery\"\n",
    "from __future__ import annotations\n\nfrom collections import defaultdict\nfrom collections.abc import Generator, Iterable, Mapping, MutableMapping\nfrom contextlib import contextmanager\nimport logging\nimport re\nimport textwrap\nfrom types import MappingProxyType\nfrom typing import TYPE_CHECKING, Any, NamedTuple\n\nfrom markdown_it.rules_block.html_block import HTML_SEQUENCES\n\nfrom mdformat import codepoints\nfrom mdformat._compat import Literal\nfrom mdformat._conf import DEFAULT_OPTS\nfrom mdformat.renderer._util import (\n    RE_CHAR_REFERENCE,\n    decimalify_leading,\n    decimalify_trailing,\n    escape_asterisk_emphasis,\n    escape_underscore_emphasis,\n    get_list_marker_type,\n    is_tight_list,\n    is_tight_list_item,\n    longest_consecutive_sequence,\n    maybe_add_link_brackets,\n)\nfrom mdformat.renderer.typing import Postprocess, Render\n\nif TYPE_CHECKING:\n    from mdformat.renderer import RenderTreeNode\n\nLOGGER = logging.getLogger(__name__)\n\n# A marker used to point a location where word wrap is allowed\n# to occur.\nWRAP_POINT = \"\\x00\"\n# A marker used to indicate location of a character that should be preserved\n# during word wrap. Should be converted to the actual character after wrap.\nPRESERVE_CHAR = \"\\x00\"\n\n\ndef make_render_children(separator: str) -> Render:\n    def render_children(\n        node: RenderTreeNode,\n        context: RenderContext,\n    ) -> str:\n        return separator.join(child.render(context) for child in node.children)\n\n    return render_children\n\n\ndef hr(node: RenderTreeNode, context: RenderContext) -> str:\n    thematic_break_width = 70\n    return \"_\" * thematic_break_width\n\n\ndef code_inline(node: RenderTreeNode, context: RenderContext) -> str:\n    code = node.content\n    all_chars_are_whitespace = not code.strip()\n    longest_backtick_seq = longest_consecutive_sequence(code, \"`\")\n    if longest_backtick_seq:\n        separator = \"`\" * (longest_backtick_seq + 1)\n        return f\"{separator} {code} {separator}\"\n    if code.startswith(\" \") and code.endswith(\" \") and not all_chars_are_whitespace:\n        return f\"` {code} `\"\n    return f\"`{code}`\"\n\n\ndef html_block(node: RenderTreeNode, context: RenderContext) -> str:\n    content = node.content.rstrip(\"\\n\")\n    # Need to strip leading spaces because we do so for regular Markdown too.\n    # Without the stripping the raw HTML and Markdown get unaligned and\n    # semantic may change.\n    content = content.lstrip()\n    return content\n\n\ndef html_inline(node: RenderTreeNode, context: RenderContext) -> str:\n    return node.content\n\n\ndef _in_block(block_name: str, node: RenderTreeNode) -> bool:\n    while node.parent:\n        if node.parent.type == block_name:\n            return True\n        node = node.parent\n    return False\n\n\ndef hardbreak(node: RenderTreeNode, context: RenderContext) -> str:\n    if _in_block(\"heading\", node):\n        return \"<br /> \"\n    return \"\\\\\" + \"\\n\"\n\n\ndef softbreak(node: RenderTreeNode, context: RenderContext) -> str:\n    if context.do_wrap and _in_block(\"paragraph\",",
    "import teca.utils as tecautils\nimport teca.ConfigHandler as tecaconf\nimport unittest\n\nclass TestFileFilter(unittest.TestCase):\n    def setUp(self):\n        self.conf = tecaconf.ConfigHandler(\n            \"tests/test_data/configuration.json\",\n            {\"starting_path\": \"tests/test_data/images\"}\n        )\n        self.files_list = [\n          \"foo.doc\",\n          \"yukinon.jpg\",\n          \"cuteflushadoingflushathings.webm\"\n        ]\n\n    def test_dothefiltering(self):\n        self.assertTrue(\"foo.doc\" not in\n                        tecautils.filterImages(self.files_list,\n                                               self.conf))\n        self.assertTrue(\"yukinon.jpg\" in\n                        tecautils.filterImages(self.files_list,\n                                               self.conf))\n\n    def test_nofiles(self):\n        self.assertEqual(0, len(tecautils.filterImages([], self.conf)))\n",
    "#!/usr/bin/env python\n\nfrom hdf5handler import HDF5Handler\n\nhandler = HDF5Handler('mydata.hdf5')\nhandler.open()\n\nfor i in range(100):\n    handler.put(i, 'numbers')\n\nhandler.close()\n\n\n",
    "\"\"\"\n[2015-07-13] Challenge #223 [Easy] Garland words\n\nhttps://www.reddit.com/r/dailyprogrammer/comments/3d4fwj/20150713_challenge_223_easy_garland_words/\n\n# Description\nA [_garland word_](http://blog.vivekhaldar.com/post/89763722591/garland-words) is one that starts and ends with the\nsame N letters in the same order, for some N greater than 0, but less than the length of the word. I'll call the\nmaximum N for which this works the garland word's _degree_. For instance, \"onion\" is a garland word of degree 2,\nbecause its first 2 letters \"on\" are the same as its last 2 letters. The name \"garland word\" comes from the fact that\nyou can make chains of the word in this manner:\n    onionionionionionionionionionion...\nToday's challenge is to write a function `garland` that, given a lowercase word, returns the degree of the word if it's\na garland word, and 0 otherwise.\n# Examples\n    garland(\"programmer\") -> 0\n    garland(\"ceramic\") -> 1\n    garland(\"onion\") -> 2\n    garland(\"alfalfa\") -> 4\n# Optional challenges\n1. Given a garland word, print out the chain using that word, as with \"onion\" above. You can make it as long or short\nas you like, even infinite.\n1. Find the largest degree of any garland word in the [enable1 English word\nlist](https://code.google.com/p/dotnetperls-controls/downloads/detail?name=enable1.txt).\n1. Find a word list for some other language, and see if you can find a language with a garland word with a higher\ndegree.\n*Thanks to /u/skeeto for submitting this challenge on /r/dailyprogrammer_ideas!*\n\"\"\"\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "from decimal import Decimal\n\nfrom django import forms\nfrom django.template.loader import render_to_string\nfrom django.template.defaultfilters import slugify\n\nclass BaseWidget(forms.TextInput):\n    \"\"\"\n    Base widget. Do not use this directly.\n    \"\"\"\n    template = None\n    instance = None\n\n    def get_parent_id(self, name, attrs):\n        final_attrs = self.build_attrs(attrs, type=self.input_type, name=name)\n        return final_attrs['id']\n\n    def get_widget_id(self, prefix, name, key=''):\n        if self.instance:\n            opts = self.instance._meta\n            widget_id = '%s-%s-%s_%s-%s' % (prefix, name, opts.app_label, opts.module_name, self.instance.pk)\n        else:\n            widget_id = '%s-%s' % (prefix, name)\n        if key:\n            widget_id = '%s_%s' % (widget_id, slugify(key))\n        return widget_id\n\n    def get_values(self, min_value, max_value, step=1):\n        decimal_step = Decimal(str(step))\n        value = Decimal(str(min_value))\n        while value <= max_value:\n            yield value\n            value += decimal_step\n\nclass SliderWidget(BaseWidget):\n    \"\"\"\n    Slider widget.\n\n    In order to use this widget you must load the jQuery.ui slider\n    javascript.\n\n    This widget triggers the following javascript events:\n\n    - *slider_change* with the vote value as argument\n      (fired when the user changes his vote)\n    - *slider_delete* without arguments\n      (fired when the user deletes his vote)\n\n    It's easy to bind these events using jQuery, e.g.::\n\n        $(document).bind('slider_change', function(event, value) {\n            alert('New vote: ' + value);\n        });\n    \"\"\"\n    def __init__(self, min_value, max_value, step, instance=None,\n        can_delete_vote=True, key='', read_only=False, default='',\n        template='ratings/slider_widget.html', attrs=None):\n        \"\"\"\n        The argument *default* is used when the initial value is None.\n        \"\"\"\n        super(SliderWidget, self).__init__(attrs)\n        self.min_value = min_value\n        self.max_value = max_value\n        self.step = step\n        self.instance = instance\n        self.can_delete_vote = can_delete_vote\n        self.read_only = read_only\n        self.default = default\n        self.template = template\n        self.key = key\n\n    def get_context(self, name, value, attrs=None):\n        # here we convert *min_value*, *max_value*, *step* and *value*\n        # to string to avoid odd behaviours of Django localization\n        # in the template (and, for backward compatibility we do not\n        # want to use the *unlocalize* filter)\n        attrs['type'] = 'hidden'\n        return {\n            'min_value': str(self.min_value),\n            'max_value': str(self.max_value),\n            'step': str(self.step),\n            'can_delete_vote': self.can_delete_vote,\n            'read_only': self.read_only,\n            'default': self.default,\n            'parent': super(SliderWidget, self).render(name, value, attrs),\n            'parent_id': self.",
    "#!/usr/bin/env python\nimport sys\nimport os\nfrom treestore import Treestore\n\n\ntry: taxonomy = sys.argv[1]\nexcept: taxonomy = None\n\nt = Treestore()\n\ntreebase_uri = 'http://purl.org/phylo/treebase/phylows/tree/%s'\n\ntree_files = [x for x in os.listdir('trees') if x.endswith('.nex')]\nbase_uri = 'http://www.phylocommons.org/trees/%s'\ntree_list = set(t.list_trees())\nfor tree_uri in tree_list:\n    if not 'TB2_' in tree_uri: continue\n    tree_id = t.id_from_uri(tree_uri)\n    tb_uri = treebase_uri % (tree_id.replace('_', ':'))\n    print tree_id, tb_uri\n    t.annotate(tree_uri, annotations='?tree bibo:cites <%s> .' % tb_uri)\n",
    "from .stats_view_base import StatsViewSwagger, StatsViewSwaggerKeyRequired\nfrom .stats_util_dataverses import StatsMakerDataverses\n\n\nclass DataverseCountByMonthView(StatsViewSwaggerKeyRequired):\n    \"\"\"API View - Dataverse counts by Month.\"\"\"\n\n    # Define the swagger attributes\n    # Note: api_path must match the path in urls.py\n    #\n    api_path = '/dataverses/count/monthly'\n    summary = ('Number of published Dataverses by'\n            ' the month they were created*.  (*'\n            ' Not month published)')\n    description = ('Returns a list of counts and'\n            ' cumulative counts of all Dataverses added in a month')\n    description_200 = 'A list of Dataverse counts by month'\n\n    param_names = StatsViewSwagger.PARAM_DV_API_KEY +\\\n                StatsViewSwagger.BASIC_DATE_PARAMS +\\\n                StatsViewSwagger.PUBLISH_PARAMS +\\\n                StatsViewSwagger.PRETTY_JSON_PARAM +\\\n                StatsViewSwagger.PARAM_AS_CSV\n\n    tags = [StatsViewSwagger.TAG_DATAVERSES]\n\n    def get_stats_result(self, request):\n        \"\"\"Return the StatsResult object for this statistic\"\"\"\n        stats_datasets = StatsMakerDataverses(**request.GET.dict())\n\n        pub_state = self.get_pub_state(request)\n\n        if pub_state == self.PUB_STATE_ALL:\n            stats_result = stats_datasets.get_dataverse_counts_by_month()\n        elif pub_state == self.PUB_STATE_UNPUBLISHED:\n            stats_result = stats_datasets.get_dataverse_counts_by_month_unpublished()\n        else:\n            stats_result = stats_datasets.get_dataverse_counts_by_month_published()\n\n        return stats_result\n\nclass DataverseTotalCounts(StatsViewSwaggerKeyRequired):\n    \"\"\"API View - Total count of all Dataverses\"\"\"\n\n    # Define the swagger attributes\n    # Note: api_path must match the path in urls.py\n    #\n    api_path = '/dataverses/count'\n    summary = ('Simple count of published Dataverses')\n    description = ('Returns number of published Dataverses')\n    description_200 = 'Number of published Dataverses'\n    param_names = StatsViewSwagger.PARAM_DV_API_KEY + StatsViewSwagger.PUBLISH_PARAMS + StatsViewSwagger.PRETTY_JSON_PARAM\n    tags = [StatsViewSwagger.TAG_DATAVERSES]\n    result_name = StatsViewSwagger.RESULT_NAME_TOTAL_COUNT\n\n\n    def get_stats_result(self, request):\n        \"\"\"Return the StatsResult object for this statistic\"\"\"\n        stats_datasets = StatsMakerDataverses(**request.GET.dict())\n\n        pub_state = self.get_pub_state(request)\n\n        if pub_state == self.PUB_STATE_ALL:\n            stats_result = stats_datasets.get_dataverse_count()\n        elif pub_state == self.PUB_STATE_UNPUBLISHED:\n            stats_result = stats_datasets.get_dataverse_count_unpublished()\n        else:\n            stats_result = stats_datasets.get_dataverse_count_published()\n\n        return stats_result\n\n\nclass DataverseAffiliationCounts(StatsViewSwaggerKeyRequired):\n    \"\"\"API View - Number of Dataverses by Affiliation\"\"\"\n\n    # Define the swagger attributes\n    # Note: a",
    "import uuid\n\nfrom django.db import models\nfrom django.conf import settings\nfrom django.contrib.auth.models import AbstractUser\nfrom django.contrib.auth.models import BaseUserManager\nfrom django.utils import timezone\n\nfrom accelerator_abstract.models import BaseUserRole\nfrom accelerator_abstract.models.base_base_profile import EXPERT_USER_TYPE\n\n\nMAX_USERNAME_LENGTH = 30\n\n\nclass UserManager(BaseUserManager):\n    use_in_migrations = True\n\n    def _create_user(self, email, password,\n                     is_staff, is_superuser, **extra_fields):\n        \"\"\"\n        Creates and saves an User with the given email and password.\n        \"\"\"\n        now = timezone.now()\n        if not email:\n            raise ValueError('An email address must be provided.')\n        email = self.normalize_email(email)\n        if \"is_active\" not in extra_fields:\n            extra_fields[\"is_active\"] = True\n        if \"username\" not in extra_fields:\n            # For now we need to have a unique id that is at\n            # most 30 characters long.  Using uuid and truncating.\n            # Ideally username goes away entirely at some point\n            # since we're really using email.  If we have to keep\n            # username for some reason then we could switch over\n            # to a string version of the pk which is guaranteed\n            # be unique.\n            extra_fields[\"username\"] = str(uuid.uuid4())[:MAX_USERNAME_LENGTH]\n        user = self.model(email=email,\n                          is_staff=is_staff,\n                          is_superuser=is_superuser,\n                          last_login=None,\n                          date_joined=now,\n                          **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_user(self, email=None, password=None, **extra_fields):\n        return self._create_user(email, password, False, False,\n                                 **extra_fields)\n\n    def create_superuser(self, email, password, **extra_fields):\n        return self._create_user(email, password, True, True,\n                                 **extra_fields)\n\n\nclass User(AbstractUser):\n    # Override the parent email field to add uniqueness constraint\n    email = models.EmailField(blank=True, unique=True)\n\n    objects = UserManager()\n\n    class Meta:\n        db_table = 'auth_user'\n        managed = settings.ACCELERATOR_MODELS_ARE_MANAGED\n\n    def __init__(self, *args, **kwargs):\n        super(User, self).__init__(*args, **kwargs)\n        self.startup = None\n        self.team_member = None\n        self.profile = None\n        self.user_finalist_roles = None\n\n    class AuthenticationException(Exception):\n        pass\n\n    def __str__(self):\n        return self.email\n\n    def full_name(self):\n        fn = self.first_name\n        ln = self.last_name\n        if fn and ln:\n            name = u\"%s %s\" % (fn, ln)\n        else:\n            name = str(self.email)\n        return name\n\n    def user_phone(self):\n   ",
    "from setuptools import setup, find_packages\nfrom codecs import open\nimport os\n\ndef read(*paths):\n    \"\"\"Build a file path from *paths* and return the contents.\"\"\"\n    with open(os.path.join(*paths), 'r') as f:\n        return f.read()\n\nsetup(\n    name='transposer',\n    version='0.0.3',\n    description='Transposes columns and rows in delimited text files',\n    long_description=(read('README.rst')),\n    url='https://github.com/keithhamilton/transposer',\n    author='Keith Hamilton',\n    maintainer='Keith Hamilton',\n    maintainer_email='the.keith.hamilton@gmail.com',\n    license='BSD License',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Topic :: Office/Business'\n       ],\n    keywords='text, csv, tab-delimited, delimited, excel, sheet, spreadsheet',\n    packages=find_packages(exclude=['contrib', 'docs', 'test*', 'bin', 'include', 'lib', '.idea']),\n    install_requires=[],\n    package_data={},\n    data_files=[],\n    entry_points={\n        'console_scripts': [\n           'transposer=transposer.script.console_script:main'\n        ]\n    }\n)\n",
    "# -*- coding: utf-8 -*-\n# Generated by Django 1.11 on 2017-11-01 20:02\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('phone_numbers', '0001_initial'),\n        ('sims', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='phonenumber',\n            name='related_sim',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='sims.Sim'),\n        ),\n    ]\n",
    "def calc():\n\th, l = input().split(' ')\n\n\tmapa = []\n\n\tfor i_row in range(int(h)):\n\t\tmapa.append(input().split(' '))\n\n\tmaior_num = 0\n\n\t\n\n\tfor row in mapa:\n\t\tfor col in row:\n\t\t\tn = int(col)\n\t\t\tif (n > maior_num):\n\t\t\t\tmaior_num = n\n\t\t\t\n\t\t\t\n\n\tqtd = [0 for i in range(maior_num + 1)]\n\n\tfor row in mapa:\n\t\tfor col in row:\n\t\t\tn = int(col)\t\n\n\t\t\tqtd[n] = qtd[n] + 1\n\t\n\tmenor = 1\n\tfor i in range(1, len(qtd)):\n\t\tif (qtd[i] <= qtd[menor]):\t\n\t\t\tmenor = i\t\n\n\t\n\n\tprint(menor)\n\t\n\ncalc()\n",
    "#!/usr/bin/env python\n\n\"\"\"\nManage and display experimental results.\n\"\"\"\n\n__license__ = 'MIT License <http://www.opensource.org/licenses/mit-license.php>'\n__author__ = 'Lucas Theis <lucas@theis.io>'\n__docformat__ = 'epytext'\n__version__ = '0.4.3'\n\nimport sys\nimport os\nimport numpy\nimport random\nimport scipy\nimport socket\n\nsys.path.append('./code')\n\nfrom argparse import ArgumentParser\nfrom pickle import Unpickler, dump\nfrom subprocess import Popen, PIPE\nfrom os import path\nfrom warnings import warn\nfrom time import time, strftime, localtime\nfrom numpy import ceil, argsort\nfrom numpy.random import rand, randint\nfrom distutils.version import StrictVersion\nfrom BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\nfrom httplib import HTTPConnection\nfrom getopt import getopt\n\nclass Experiment:\n\t\"\"\"\n\t@type time: float\n\t@ivar time: time at initialization of experiment\n\n\t@type duration: float\n\t@ivar duration: time in seconds between initialization and saving\n\n\t@type script: string\n\t@ivar script: stores the content of the main Python script\n\n\t@type platform: string\n\t@ivar platform: information about operating system\n\n\t@type processors: string\n\t@ivar processors: some information about the processors\n\n\t@type environ: string\n\t@ivar environ: environment variables at point of initialization\n\n\t@type hostname: string\n\t@ivar hostname: hostname of server running the experiment\n\n\t@type cwd: string\n\t@ivar cwd: working directory at execution time\n\n\t@type comment: string\n\t@ivar comment: a comment describing the experiment\n\n\t@type results: dictionary\n\t@ivar results: container to store experimental results\n\n\t@type commit: string\n\t@ivar commit: git commit hash\n\n\t@type modified: boolean\n\t@ivar modified: indicates uncommited changes\n\n\t@type filename: string\n\t@ivar filename: path to stored results\n\n\t@type seed: int\n\t@ivar seed: random seed used through the experiment\n\n\t@type versions: dictionary\n\t@ivar versions: versions of Python, numpy and scipy\n\t\"\"\"\n\n\tdef __str__(self):\n\t\t\"\"\"\n\t\tSummarize information about the experiment.\n\n\t\t@rtype: string\n\t\t@return: summary of the experiment\n\t\t\"\"\"\n\n\t\tstrl = []\n\n\t\t# date and duration of experiment\n\t\tstrl.append(strftime('date \\t\\t %a, %d %b %Y %H:%M:%S', localtime(self.time)))\n\t\tstrl.append('duration \\t ' + str(int(self.duration)) + 's')\n\t\tstrl.append('hostname \\t ' + self.hostname)\n\n\t\t# commit hash\n\t\tif self.commit:\n\t\t\tif self.modified:\n\t\t\t\tstrl.append('commit \\t\\t ' + self.commit + ' (modified)')\n\t\t\telse:\n\t\t\t\tstrl.append('commit \\t\\t ' + self.commit)\n\n\t\t# results\n\t\tstrl.append('results \\t {' + ', '.join(map(str, self.results.keys())) + '}')\n\n\t\t# comment\n\t\tif self.comment:\n\t\t\tstrl.append('\\n' + self.comment)\n\n\t\treturn '\\n'.join(strl)\n\n\n\n\tdef __del__(self):\n\t\tself.status(None)\n\n\n\n\tdef __init__(self, filename='', comment='', seed=None, server=None, port=8000):\n\t\t\"\"\"\n\t\tIf the filename is given and points to an existing experiment, load it.\n\t\tOtherwise store the current timestamp and try to get commit information\n\t\tfrom the repository in t",
    "import traceback\n\n\nclass EnsureExceptionHandledGuard:\n    \"\"\"Helper for ensuring that Future's exceptions were handled.\n\n    This solves a nasty problem with Futures and Tasks that have an\n    exception set: if nobody asks for the exception, the exception is\n    never logged.  This violates the Zen of Python: 'Errors should\n    never pass silently.  Unless explicitly silenced.'\n\n    However, we don't want to log the exception as soon as\n    set_exception() is called: if the calling code is written\n    properly, it will get the exception and handle it properly.  But\n    we *do* want to log it if result() or exception() was never called\n    -- otherwise developers waste a lot of time wondering why their\n    buggy code fails silently.\n\n    An earlier attempt added a __del__() method to the Future class\n    itself, but this backfired because the presence of __del__()\n    prevents garbage collection from breaking cycles.  A way out of\n    this catch-22 is to avoid having a __del__() method on the Future\n    class itself, but instead to have a reference to a helper object\n    with a __del__() method that logs the traceback, where we ensure\n    that the helper object doesn't participate in cycles, and only the\n    Future has a reference to it.\n\n    The helper object is added when set_exception() is called.  When\n    the Future is collected, and the helper is present, the helper\n    object is also collected, and its __del__() method will log the\n    traceback.  When the Future's result() or exception() method is\n    called (and a helper object is present), it removes the the helper\n    object, after calling its clear() method to prevent it from\n    logging.\n\n    One downside is that we do a fair amount of work to extract the\n    traceback from the exception, even when it is never logged.  It\n    would seem cheaper to just store the exception object, but that\n    references the traceback, which references stack frames, which may\n    reference the Future, which references the _EnsureExceptionHandledGuard,\n    and then the _EnsureExceptionHandledGuard would be included in a cycle,\n    which is what we're trying to avoid! As an optimization, we don't\n    immediately format the exception; we only do the work when\n    activate() is called, which call is delayed until after all the\n    Future's callbacks have run.  Since usually a Future has at least\n    one callback (typically set by 'yield from') and usually that\n    callback extracts the callback, thereby removing the need to\n    format the exception.\n\n    PS. I don't claim credit for this solution.  I first heard of it\n    in a discussion about closing files when they are collected.\n    \"\"\"\n\n    __slots__ = ['exc', 'tb', 'hndl', 'cls']\n\n    def __init__(self, exc, handler):\n        self.exc = exc\n        self.hndl = handler\n        self.cls = type(exc)\n        self.tb = None\n\n    def activate(self):\n        exc = self.exc\n        if exc is not None:\n            self.exc = None\n            self.tb = tracebac",
    "__package__ = 'archivebox.core'\n",
    "import logging.handlers\nimport os\n\n_pabotlog = logging.getLogger('PABot')\n\n_pabotlog.setLevel(logging.DEBUG)\n\n_logPath = os.path.abspath(\"./logging/pabot.log\")\n\n_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')\n\n_consoleStreamHandler = logging.StreamHandler()\n_consoleStreamHandler.setLevel(logging.DEBUG)\n_consoleStreamHandler.setFormatter(_formatter)\n\n_symLogRotFileHandler = logging.handlers.RotatingFileHandler(_logPath, maxBytes=2000000, backupCount=5)\n_symLogRotFileHandler.setLevel(logging.DEBUG)\n_symLogRotFileHandler.setFormatter(_formatter)\n\n_pabotlog.addHandler(_consoleStreamHandler)\n_pabotlog.addHandler(_symLogRotFileHandler)\n\n\ndef LogPABotMessage(message):\n    _pabotlog.info(message)\n\n\ndef LogPABotError(message):\n    _pabotlog.error(message)\n",
    "import ast\nimport heisenberg.library.heisenberg_dynamics_context\nimport heisenberg.library.orbit_plot\nimport heisenberg.option_parser\nimport heisenberg.plot\nimport heisenberg.util\nimport matplotlib\nimport numpy as np\nimport sys\n\n# https://github.com/matplotlib/matplotlib/issues/5907 says this should fix \"Exceeded cell block limit\" problems\nmatplotlib.rcParams['agg.path.chunksize'] = 10000\n\ndynamics_context = heisenberg.library.heisenberg_dynamics_context.Numeric()\n\nop = heisenberg.option_parser.OptionParser(module=heisenberg.plot)\n# Add the subprogram-specific options here.\nop.add_option(\n    '--initial-preimage',\n    dest='initial_preimage',\n    type='string',\n    help='Specifies the preimage of the initial conditions with respect to the embedding map specified by the --embedding-dimension and --embedding-solution-sheet-index option values.  Should have the form [x_1,...,x_n], where n is the embedding dimension and x_i is a floating point literal for each i.'\n)\nop.add_option(\n    '--initial',\n    dest='initial',\n    type='string',\n    help='Specifies the initial conditions [x,y,z,p_x,p_y,p_z], where each of x,y,z,p_x,p_y,p_z are floating point literals.'\n)\nop.add_option(\n    '--optimization-iterations',\n    dest='optimization_iterations',\n    default=1000,\n    type='int',\n    help='Specifies the number of iterations to run the optimization for (if applicable).  Default is 1000.'\n)\nop.add_option(\n    '--optimize-initial',\n    dest='optimize_initial',\n    action='store_true',\n    default=False,\n    help='Indicates that the specified initial condition (via whichever of the --initial... options) should be used as the starting point for an optimization to attempt to close the orbit.  Default value is False.'\n)\nop.add_option(\n    '--output-dir',\n    dest='output_dir',\n    default='.',\n    help='Specifies the directory to write plot images and data files to.  Default is current directory.'\n)\nop.add_option(\n    '--disable-plot-initial',\n    dest='disable_plot_initial',\n    action='store_true',\n    default=False,\n    help='Disables plotting the initial curve; only has effect if --optimize-initial is specified.'\n)\n\noptions,args = op.parse_argv_and_validate()\nif options is None:\n    sys.exit(-1)\n\nnum_initial_conditions_specified = sum([\n    options.initial_preimage is not None,\n    options.initial is not None,\n])\nif num_initial_conditions_specified != 1:\n    print('Some initial condition option must be specified; --initial-preimage, --initial.  However, {0} of those were specified.'.format(num_initial_conditions_specified))\n    op.print_help()\n    sys.exit(-1)\n\n# Validate subprogram-specific options here.\n\n# Attempt to parse initial conditions.  Upon success, the attribute options.qp_0 should exist.\nif options.initial_preimage is not None:\n    try:\n        options.initial_preimage = np.array(ast.literal_eval(options.initial_preimage))\n        expected_shape = (options.embedding_dimension,)\n        if options.initial_preimage.shape != expected_shape:\n      ",
    "def send_simple_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/sandbox049ff464a4d54974bb0143935f9577ef.mailgun.org/messages\",\n        auth=(\"api\", \"key-679dc79b890e700f11f001a6bf86f4a1\"),\n        data={\"from\": \"Mailgun Sandbox <postmaster@sandbox049ff464a4d54974bb0143935f9577ef.mailgun.org>\",\n              \"to\": \"nick <nicorellius@gmail.com>\",\n              \"subject\": \"Hello nick\",\n              \"text\": \"Congratulations nick, you just sent an email with Mailgun!  You are truly awesome!  You can see a record of this email in your logs: https://mailgun.com/cp/log .  You can send up to 300 emails/day from this sandbox server.  Next, you should add your own domain so you can send 10,000 emails/month for free.\"})\n\n\n# cURL command to send mail aith API key\n# curl -s --user 'api:key-679dc79b890e700f11f001a6bf86f4a1' \\\n#     https://api.mailgun.net/v3/mail.pdxpixel.com/messages \\\n#     -F from='Excited User <mailgun@pdxpixel.com>' \\\n#     -F to=nick@pdxpixel.com \\\n#     -F subject='Hello' \\\n#     -F text='Testing some Mailgun awesomness!'\n",
    "def load_keys(filepath):\n    \"\"\"\n    Loads the Twitter API keys into a dict.\n    :param filepath: file path to config file with Twitter API keys.\n    :return: keys_dict\n    :raise: IOError\n    \"\"\"\n    try:\n        keys_file = open(filepath, 'rb')\n        keys = {}\n        for line in keys_file:\n            key, value = line.split('=')\n            keys[key.strip()] = value.strip()\n    except IOError:\n        message = ('File {} cannot be opened.'\n                   ' Check that it exists and is binary.')\n        print message.format(filepath)\n        raise\n    except:\n        print \"Error opening or unpickling file.\"\n        raise\n    return keys\n",
    "\"\"\"Main entry points for scripts.\"\"\"\n\nfrom __future__ import print_function, division\n\nfrom argparse import ArgumentParser\nfrom collections import OrderedDict\nfrom copy import copy\nfrom datetime import datetime\nimport glob\nimport json\nimport logging\nimport math\nimport os\n\nimport scipy.stats\nimport numpy as np\n\nfrom .version import __version__\nfrom .psffuncs import gaussian_moffat_psf\nfrom .psf import TabularPSF, GaussianMoffatPSF\nfrom .io import read_datacube, write_results, read_results\nfrom .fitting import (guess_sky, fit_galaxy_single, fit_galaxy_sky_multi,\n                      fit_position_sky, fit_position_sky_sn_multi,\n                      RegularizationPenalty)\nfrom .utils import yxbounds\nfrom .extern import ADR, Hyper_PSF3D_PL\n\n\n__all__ = [\"cubefit\", \"cubefit_subtract\", \"cubefit_plot\"]\n\nMODEL_SHAPE = (32, 32)\nSPAXEL_SIZE = 0.43\nMIN_NMAD = 2.5  # Minimum Number of Median Absolute Deviations above\n                # the minimum spaxel value in fit_position\nLBFGSB_FACTOR = 1e10\nREFWAVE = 5000.  # reference wavelength in Angstroms for PSF params and ADR\nPOSITION_BOUND = 3.  # Bound on fitted positions relative in initial positions\n\ndef snfpsf(wave, psfparams, header, psftype):\n    \"\"\"Create a 3-d PSF based on SNFactory-specific parameterization of\n    Gaussian + Moffat PSF parameters and ADR.\"\"\"\n\n    # Get Gaussian+Moffat parameters at each wavelength.\n    relwave = wave / REFWAVE - 1.0\n    ellipticity = abs(psfparams[0]) * np.ones_like(wave)\n    alpha = np.abs(psfparams[1] +\n                   psfparams[2] * relwave +\n                   psfparams[3] * relwave**2)\n\n    # correlated parameters (coefficients determined externally)\n    sigma = 0.545 + 0.215 * alpha  # Gaussian parameter\n    beta  = 1.685 + 0.345 * alpha  # Moffat parameter\n    eta   = 1.040 + 0.0   * alpha  # gaussian ampl. / moffat ampl.\n\n    # Atmospheric differential refraction (ADR): Because of ADR,\n    # the center of the PSF will be different at each wavelength,\n    # by an amount that we can determine (pretty well) from the\n    # atmospheric conditions and the pointing and angle of the\n    # instrument. We calculate the offsets here as a function of\n    # observation and wavelength and input these to the model.\n\n    # Correction to parallactic angle and airmass for 2nd-order effects\n    # such as MLA rotation, mechanical flexures or finite-exposure\n    # corrections. These values have been trained on faint-std star\n    # exposures.\n    #\n    # `predict_adr_params` uses 'AIRMASS', 'PARANG' and 'CHANNEL' keys\n    # in input dictionary.\n    delta, theta = Hyper_PSF3D_PL.predict_adr_params(header)\n\n    # check for crazy values of pressure and temperature, and assign default\n    # values.\n    pressure = header.get('PRESSURE', 617.)\n    if not 550. < pressure < 650.:\n        pressure = 617.\n    temp = header.get('TEMP', 2.)\n    if not -20. < temp < 20.:\n        temp = 2.\n\n    adr = ADR(pressure, temp, lref=REFWAVE, delta=delta, theta=theta)\n    adr_refract = adr.refract(0, 0, ",
    "# -*- coding: utf-8 -*-\n\n\ndef calc_note(count, value):\n    qnt = 0\n    if count >= value:\n        qnt = int(count) / value\n    print '%d nota(s) de R$ %d.00' % (qnt, value)\n    return count - qnt * value\n\n\nn = float(raw_input())\n\nprint 'NOTAS:'\nn = calc_note(n, 100)\nn = calc_note(n, 50)\nn = calc_note(n, 20)\nn = calc_note(n, 10)\nn = calc_note(n, 5)\nn = calc_note(n, 2)\nprint 'MOEDAS:'\nprint '%d moeda(s) de R$ 1.00' % int(n)\nn -= int(n)\nm50 = n / 0.50\nprint '%d moeda(s) de R$ 0.50' % m50\nn -= int(m50) * 0.50\nm25 = n / 0.25\nprint '%d moeda(s) de R$ 0.25' % m25\nn -= int(m25) * 0.25\nm10 = n / 0.10\nprint '%d moeda(s) de R$ 0.10' % m10\nn -= int(m10) * 0.10\nif round(n, 2) >= 0.05:\n    print '1 moeda(s) de R$ 0.05'\n    m1 = (n - 0.05) * 100\nelse:\n    print '0 moeda(s) de R$ 0.05'\n    m1 = round(n, 2) * 100\nif round(m1, 0):\n    print '%.0f moeda(s) de R$ 0.01' % m1\nelse:\n    print '0 moeda(s) de R$ 0.01'\n",
    "import datetime\nimport time\nimport boto\nimport redis\nimport requests\nimport random\nimport zlib\nfrom django.shortcuts import get_object_or_404\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom django.template.loader import render_to_string\nfrom django.db import IntegrityError\nfrom django.db.models import Q\nfrom django.views.decorators.cache import never_cache\nfrom django.core.urlresolvers import reverse\nfrom django.contrib.auth import login as login_user\nfrom django.contrib.auth import logout as logout_user\nfrom django.contrib.auth.models import User\nfrom django.http import HttpResponse, HttpResponseRedirect, HttpResponseForbidden, Http404\nfrom django.conf import settings\nfrom django.core.mail import mail_admins\nfrom django.core.validators import email_re\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.contrib.sites.models import Site\nfrom django.utils import feedgenerator\nfrom mongoengine.queryset import OperationError\nfrom mongoengine.queryset import NotUniqueError\nfrom apps.recommendations.models import RecommendedFeed\nfrom apps.analyzer.models import MClassifierTitle, MClassifierAuthor, MClassifierFeed, MClassifierTag\nfrom apps.analyzer.models import apply_classifier_titles, apply_classifier_feeds\nfrom apps.analyzer.models import apply_classifier_authors, apply_classifier_tags\nfrom apps.analyzer.models import get_classifiers_for_user, sort_classifiers_by_feed\nfrom apps.profile.models import Profile\nfrom apps.reader.models import UserSubscription, UserSubscriptionFolders, RUserStory, Feature\nfrom apps.reader.forms import SignupForm, LoginForm, FeatureForm\nfrom apps.rss_feeds.models import MFeedIcon, MStarredStoryCounts\nfrom apps.search.models import MUserSearch\nfrom apps.statistics.models import MStatistics\n# from apps.search.models import SearchStarredStory\ntry:\n    from apps.rss_feeds.models import Feed, MFeedPage, DuplicateFeed, MStory, MStarredStory\nexcept:\n    pass\nfrom apps.social.models import MSharedStory, MSocialProfile, MSocialServices\nfrom apps.social.models import MSocialSubscription, MActivity, MInteraction\nfrom apps.categories.models import MCategory\nfrom apps.social.views import load_social_page\nfrom apps.rss_feeds.tasks import ScheduleImmediateFetches\nfrom utils import json_functions as json\nfrom utils.user_functions import get_user, ajax_login_required\nfrom utils.feed_functions import relative_timesince\nfrom utils.story_functions import format_story_link_date__short\nfrom utils.story_functions import format_story_link_date__long\nfrom utils.story_functions import strip_tags\nfrom utils import log as logging\nfrom utils.view_functions import get_argument_or_404, render_to, is_true\nfrom utils.view_functions import required_params\nfrom utils.ratelimit import ratelimit\nfrom vendor.timezones.utilities import localtime_for_timezone\n\n\nBANNED_URLS = [\n    \"brentozar.com\",\n]\n\n@never_cache\n@render_to('reader/dashboard.xhtml')\ndef index(request, **kwargs):\n    if request.method ",
    "__author__ = \"Guillaume\"\n__license__ = \"MIT\"\n__copyright__ = \"2015, ESRF\"\n\nimport numpy\nfrom freesas.model import SASModel\n\n\nclass Grid:\n    \"\"\"\n    This class is used to create a grid which include all the input models\n    \"\"\"\n    def __init__(self, inputfiles):\n        \"\"\"\n        :param inputfiles: list of pdb files needed for averaging\n        \"\"\"\n        self.inputs = inputfiles\n        self.size = []\n        self.nbknots = None\n        self.radius = None\n        self.coordknots = []\n\n    def __repr__(self):\n        return \"Grid with %i knots\"%self.nbknots\n\n    def spatial_extent(self):\n        \"\"\"\n        Calculate the maximal extent of input models\n        \n        :return self.size: 6-list with x,y,z max and then x,y,z min\n        \"\"\"\n        atoms = []\n        models_fineness = []\n        for files in self.inputs:\n            m = SASModel(files)\n            if len(atoms)==0:\n                atoms = m.atoms\n            else:\n                atoms = numpy.append(atoms, m.atoms, axis=0)\n            models_fineness.append(m.fineness)\n        mean_fineness = sum(models_fineness) / len(models_fineness)\n\n        coordmin = atoms.min(axis=0) - mean_fineness\n        coordmax = atoms.max(axis=0) + mean_fineness\n        self.size = [coordmax[0],coordmax[1],coordmax[2],coordmin[0],coordmin[1],coordmin[2]]\n\n        return self.size\n\n    def calc_radius(self, nbknots=None):\n        \"\"\"\n        Calculate the radius of each point of a hexagonal close-packed grid, \n        knowing the total volume and the number of knots in this grid.\n\n        :param nbknots: number of knots wanted for the grid\n        :return radius: the radius of each knot of the grid\n        \"\"\"\n        if len(self.size)==0:\n            self.spatial_extent()\n        nbknots = nbknots if nbknots is not None else 5000\n        size = self.size\n        dx = size[0] - size[3]\n        dy = size[1] - size[4]\n        dz = size[2] - size[5]\n        volume = dx * dy * dz\n\n        density = numpy.pi / (3*2**0.5)\n        radius = ((3 /( 4 * numpy.pi)) * density * volume / nbknots)**(1.0/3)\n        self.radius = radius\n\n        return radius\n\n    def make_grid(self):\n        \"\"\"\n        Create a grid using the maximal size and the radius previously computed.\n        The geometry used is a face-centered cubic lattice (fcc).\n\n        :return knots: 2d-array, coordinates of each dot of the grid. Saved as self.coordknots.\n        \"\"\"\n        if len(self.size)==0:\n            self.spatial_extent()\n        if self.radius is None:\n            self.calc_radius()\n\n        radius = self.radius\n        a = numpy.sqrt(2.0)*radius\n\n        xmax = self.size[0]\n        xmin = self.size[3]\n        ymax = self.size[1]\n        ymin = self.size[4]\n        zmax = self.size[2]\n        zmin = self.size[5]\n\n        x = 0.0\n        y = 0.0\n        z = 0.0\n\n        xlist = []\n        ylist = []\n        zlist = []\n        knots = numpy.empty((1,4), dtype=\"float\")\n        while (zmin + z) <= zmax:\n            zlist.append(z",
    "#!/usr/bin/env python\n\n\"\"\"\nProject-wide application configuration.\n\nDO NOT STORE SECRETS, PASSWORDS, ETC. IN THIS FILE.\nThey will be exposed to users. Use environment variables instead.\nSee get_secrets() below for a fast way to access them.\n\"\"\"\n\nimport os\n\n\"\"\"\nNAMES\n\"\"\"\n# Project name used for display\nPROJECT_NAME = 'quotable'\n\n# Project name in urls\n# Use dashes, not underscores!\nPROJECT_SLUG = 'quotable'\n\n# The name of the repository containing the source\nREPOSITORY_NAME = 'quotable'\nREPOSITORY_URL = 'git@github.com:nprapps/%s.git' % REPOSITORY_NAME\nREPOSITORY_ALT_URL = None # 'git@bitbucket.org:nprapps/%s.git' % REPOSITORY_NAME'\n\n# The name to be used in paths on the server\nPROJECT_FILENAME = 'quotable'\n\n\"\"\"\nDEPLOYMENT\n\"\"\"\nFILE_SERVER = 'tools.apps.npr.org'\nS3_BUCKET = 'tools.apps.npr.org'\nASSETS_S3_BUCKET = 'assets.apps.npr.org'\n\n# These variables will be set at runtime. See configure_targets() below\nDEBUG = True\n\n\"\"\"\nCOPY EDITING\n\"\"\"\nCOPY_GOOGLE_DOC_KEY = '0AlXMOHKxzQVRdHZuX1UycXplRlBfLVB0UVNldHJYZmc'\n\n\"\"\"\nSHARING\n\"\"\"\nPROJECT_DESCRIPTION = 'An opinionated project template for (mostly) server-less apps.'\nSHARE_URL = 'http://%s/%s/' % (S3_BUCKET, PROJECT_SLUG)\n\nTWITTER = {\n    'TEXT': PROJECT_NAME,\n    'URL': SHARE_URL,\n    # Will be resized to 120x120, can't be larger than 1MB\n    'IMAGE_URL': ''\n}\n\nFACEBOOK = {\n    'TITLE': PROJECT_NAME,\n    'URL': SHARE_URL,\n    'DESCRIPTION': PROJECT_DESCRIPTION,\n    # Should be square. No documented restrictions on size\n    'IMAGE_URL': TWITTER['IMAGE_URL'],\n    'APP_ID': '138837436154588'\n}\n\nGOOGLE = {\n    # Thumbnail image for Google News / Search.\n    # No documented restrictions on resolution or size\n    'IMAGE_URL': TWITTER['IMAGE_URL']\n}\n\nNPR_DFP = {\n    'STORY_ID': '203618536',\n    'TARGET': 'News_NPR_News_Investigations',\n    'ENVIRONMENT': 'NPRTEST',\n    'TESTSERVER': 'true'\n}\n\n\"\"\"\nSERVICES\n\"\"\"\nGOOGLE_ANALYTICS_ID = 'UA-5828686-4'\n\n",
    "import os\nimport logging\n\nfrom django.core.management.base import BaseCommand\nfrom django.core.mail import send_mail\nfrom django.template.loader import get_template\n\nfrom workshops.models import Badge, Person, Role\n\nlogger = logging.getLogger()\n\n\nclass Command(BaseCommand):\n    help = 'Report instructors activity.'\n\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--send-out-for-real', action='store_true', default=False,\n            help='Send information to the instructors.',\n        )\n        parser.add_argument(\n            '--no-may-contact-only', action='store_true', default=False,\n            help='Include instructors not willing to be contacted.',\n        )\n        parser.add_argument(\n            '--django-mailing', action='store_true', default=False,\n            help='Use Django mailing system. This requires some environmental '\n                 'variables to be set, see `settings.py`.',\n        )\n        parser.add_argument(\n            '-s', '--sender', action='store',\n            default='workshops@carpentries.org',\n            help='E-mail used in \"from:\" field.',\n        )\n\n    def foreign_tasks(self, tasks, person, roles):\n        \"\"\"List of other instructors' tasks, per event.\"\"\"\n        return [\n            task.event.task_set.filter(role__in=roles)\n                               .exclude(person=person)\n                               .select_related('person')\n            for task in tasks\n        ]\n\n    def fetch_activity(self, may_contact_only=True):\n        roles = Role.objects.filter(name__in=['instructor', 'helper'])\n        instructor_badges = Badge.objects.instructor_badges()\n\n        instructors = Person.objects.filter(badges__in=instructor_badges)\n        instructors = instructors.exclude(email__isnull=True)\n        if may_contact_only:\n            instructors = instructors.exclude(may_contact=False)\n\n        # let's get some things faster\n        instructors = instructors.select_related('airport') \\\n                                 .prefetch_related('task_set', 'lessons',\n                                                   'award_set', 'badges')\n\n        # don't repeat the records\n        instructors = instructors.distinct()\n\n        result = []\n        for person in instructors:\n            tasks = person.task_set.filter(role__in=roles) \\\n                                   .select_related('event', 'role')\n            record = {\n                'person': person,\n                'lessons': person.lessons.all(),\n                'instructor_awards': person.award_set.filter(\n                    badge__in=person.badges.instructor_badges()\n                ),\n                'tasks': zip(tasks,\n                             self.foreign_tasks(tasks, person, roles)),\n            }\n            result.append(record)\n\n        return result\n\n    def make_message(self, record):\n        tmplt = get_template('mailing/instructor_activity.txt')\n        return tmplt.render(context=record)\n\n    def subject(self,",
    "# coding=utf-8\n# --------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for license information.\n# Code generated by Microsoft (R) AutoRest Code Generator.\n# Changes may cause incorrect behavior and will be lost if the code is regenerated.\n# --------------------------------------------------------------------------\nimport functools\nfrom typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar\nimport warnings\n\nfrom azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error\nfrom azure.core.paging import ItemPaged\nfrom azure.core.pipeline import PipelineResponse\nfrom azure.core.pipeline.transport import HttpResponse\nfrom azure.core.rest import HttpRequest\nfrom azure.core.tracing.decorator import distributed_trace\nfrom azure.mgmt.core.exceptions import ARMErrorFormat\nfrom msrest import Serializer\n\nfrom .. import models as _models\nfrom .._vendor import _convert_request, _format_url_section\nT = TypeVar('T')\nJSONType = Any\nClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]\n\n_SERIALIZER = Serializer()\n_SERIALIZER.client_side_validation = False\n\ndef build_delete_request(\n    scope: str,\n    policy_assignment_name: str,\n    **kwargs: Any\n) -> HttpRequest:\n    api_version = \"2016-12-01\"\n    accept = \"application/json, text/json\"\n    # Construct URL\n    url = kwargs.pop(\"template_url\", '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}')\n    path_format_arguments = {\n        \"scope\": _SERIALIZER.url(\"scope\", scope, 'str', skip_quote=True),\n        \"policyAssignmentName\": _SERIALIZER.url(\"policy_assignment_name\", policy_assignment_name, 'str'),\n    }\n\n    url = _format_url_section(url, **path_format_arguments)\n\n    # Construct parameters\n    query_parameters = kwargs.pop(\"params\", {})  # type: Dict[str, Any]\n    query_parameters['api-version'] = _SERIALIZER.query(\"api_version\", api_version, 'str')\n\n    # Construct headers\n    header_parameters = kwargs.pop(\"headers\", {})  # type: Dict[str, Any]\n    header_parameters['Accept'] = _SERIALIZER.header(\"accept\", accept, 'str')\n\n    return HttpRequest(\n        method=\"DELETE\",\n        url=url,\n        params=query_parameters,\n        headers=header_parameters,\n        **kwargs\n    )\n\n\ndef build_create_request(\n    scope: str,\n    policy_assignment_name: str,\n    *,\n    json: JSONType = None,\n    content: Any = None,\n    **kwargs: Any\n) -> HttpRequest:\n    content_type = kwargs.pop('content_type', None)  # type: Optional[str]\n\n    api_version = \"2016-12-01\"\n    accept = \"application/json, text/json\"\n    # Construct URL\n    url = kwargs.pop(\"template_url\", '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}')\n    path_format_arguments = {\n        \"scope\": _SERIALIZER.url(\"s",
    "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jun 25 16:20:12 2015\n\n@author: Bal\u00e1zs Hidasi\n@lastmodified: Loreto Parisi (loretoparisi at gmail dot com)\n\"\"\"\n\nimport sys\nimport os\nimport numpy as np\nimport pandas as pd\nimport datetime as dt\n\n# To redirect output to file\nclass Logger(object):\n    def __init__(self, filename=\"Default.log\"):\n        self.terminal = sys.stdout\n        self.log = open(filename, \"a\")\n    def write(self, message):\n        self.terminal.write(message)\n        self.log.write(message)\n    def flush(self):\n        pass\nsys.stdout = Logger( os.environ['HOME' ] + '/theano.log' )\n\nPATH_TO_ORIGINAL_DATA = os.environ['HOME'] + '/'\nPATH_TO_PROCESSED_DATA = os.environ['HOME'] + '/'\n\ndata = pd.read_csv(PATH_TO_ORIGINAL_DATA + 'yoochoose-clicks.dat', sep=',', header=None, usecols=[0,1,2], dtype={0:np.int32, 1:str, 2:np.int64})\ndata.columns = ['SessionId', 'TimeStr', 'ItemId']\ndata['Time'] = data.TimeStr.apply(lambda x: dt.datetime.strptime(x, '%Y-%m-%dT%H:%M:%S.%fZ').timestamp()) #This is not UTC. It does not really matter.\ndel(data['TimeStr'])\n\nsession_lengths = data.groupby('SessionId').size()\ndata = data[np.in1d(data.SessionId, session_lengths[session_lengths>1].index)]\nitem_supports = data.groupby('ItemId').size()\ndata = data[np.in1d(data.ItemId, item_supports[item_supports>=5].index)]\nsession_lengths = data.groupby('SessionId').size()\ndata = data[np.in1d(data.SessionId, session_lengths[session_lengths>=2].index)]\n\ntmax = data.Time.max()\nsession_max_times = data.groupby('SessionId').Time.max()\nsession_train = session_max_times[session_max_times < tmax-86400].index\nsession_test = session_max_times[session_max_times >= tmax-86400].index\ntrain = data[np.in1d(data.SessionId, session_train)]\ntest = data[np.in1d(data.SessionId, session_test)]\ntest = test[np.in1d(test.ItemId, train.ItemId)]\ntslength = test.groupby('SessionId').size()\ntest = test[np.in1d(test.SessionId, tslength[tslength>=2].index)]\nprint('Full train set\\n\\tEvents: {}\\n\\tSessions: {}\\n\\tItems: {}'.format(len(train), train.SessionId.nunique(), train.ItemId.nunique()))\ntrain.to_csv(PATH_TO_PROCESSED_DATA + 'rsc15_train_full.txt', sep='\\t', index=False)\nprint('Test set\\n\\tEvents: {}\\n\\tSessions: {}\\n\\tItems: {}'.format(len(test), test.SessionId.nunique(), test.ItemId.nunique()))\ntest.to_csv(PATH_TO_PROCESSED_DATA + 'rsc15_test.txt', sep='\\t', index=False)\n\ntmax = train.Time.max()\nsession_max_times = train.groupby('SessionId').Time.max()\nsession_train = session_max_times[session_max_times < tmax-86400].index\nsession_valid = session_max_times[session_max_times >= tmax-86400].index\ntrain_tr = train[np.in1d(train.SessionId, session_train)]\nvalid = train[np.in1d(train.SessionId, session_valid)]\nvalid = valid[np.in1d(valid.ItemId, train_tr.ItemId)]\ntslength = valid.groupby('SessionId').size()\nvalid = valid[np.in1d(valid.SessionId, tslength[tslength>=2].index)]\nprint('Train set\\n\\tEvents: {}\\n\\tSessions: {}\\n\\tItems: {}'.format(len(train_tr), train_tr.SessionId.nunique(), train_tr.Ite",
    "\n\nfrom attributes import *\nfrom constants  import *\n\n\n# ------------------------------------------------------------------------------\n#\nclass UnitManager (Attributes) :\n    \"\"\" \n    UnitManager class -- manages a pool \n    \"\"\"\n\n\n    # --------------------------------------------------------------------------\n    #\n    def __init__ (self, url=None, scheduler='default', session=None) :\n\n        Attributes.__init__ (self)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def add_pilot (self, pid) :\n        \"\"\"\n        add (Compute or Data)-Pilot(s) to the pool\n        \"\"\"\n\n        raise Exception (\"%s.add_pilot() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def list_pilots (self, ptype=ANY) :\n        \"\"\"\n        List IDs of data and/or compute pilots\n        \"\"\"\n\n        raise Exception (\"%s.list_pilots() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def remove_pilot (self, pid, drain=False) :\n        \"\"\"\n        Remove pilot(s) (does not cancel the pilot(s), but removes all units\n        from the pilot(s).\n\n        `drain` determines what happens to the units which are managed by the\n        removed pilot(s).  If `True`, the pilot removal is delayed until all\n        units reach a final state.  If `False` (the default), then `RUNNING`\n        units will be canceled, and `PENDING` units will be re-assinged to the\n        unit managers for re-scheduling to other pilots.\n        \"\"\"\n\n        raise Exception (\"%s.remove_pilot() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def submit_unit (self, description) :\n        \"\"\"\n        Instantiate and return (Compute or Data)-Unit object(s)\n        \"\"\"\n\n        raise Exception (\"%s.submit_unit() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def list_units (self, utype=ANY) :\n        \"\"\"\n        List IDs of data and/or compute units\n        \"\"\"\n\n        raise Exception (\"%s.list_units() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def get_unit (self, uids) :\n        \"\"\"\n        Reconnect to and return (Compute or Data)-Unit object(s)\n        \"\"\"\n\n        raise Exception (\"%s.get_unit() is not implemented\" % self.__class__.__name__)\n\n\n    # --------------------------------------------------------------------------\n    #\n    def wait_unit (self, uids, state=[DONE, FAILED, CANCELED], timeout=-1.0) :\n        \"\"\"\n        Wait for given unit(s) to enter given state\n        \"\"\"\n\n        raise Exception (\"%s.wait_unit() is not implemented\" % self.__class__.__name__)\n\n\n    # -------------------------------------",
    "import datetime\n\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.utils import timezone\n\nfrom .models import Action\n\n\ndef create_action(user, verb, target=None):\n    now = timezone.now()\n    last_minute = now - datetime.timedelta(seconds=60)\n    similar_actions = Action.objects.filter(user_id=user.id, verb=verb, created__gte=last_minute)\n\n    if target:\n        target_ct = ContentType.objects.get_for_model(target)\n        similar_actions = Action.objects.filter(target_ct=target_ct, target_id=target.id)\n\n    if not similar_actions:\n        action = Action(user=user, verb=verb, target=target)\n        action.save()\n        return True\n    return False\n",
    "# -*- coding: utf-8 -*-\n#\n# RedPipe documentation build configuration file, created by\n# sphinx-quickstart on Wed Apr 19 13:22:45 2017.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath('.'))\n\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nimport os\nimport sys\nfrom os import path\n\nROOTDIR = path.abspath(os.path.dirname(os.path.dirname(__file__)))\n\nsys.path.insert(0, ROOTDIR)\n\nimport redpipe  # noqa\n\nextensions = [\n    'alabaster',\n    'sphinx.ext.autodoc',\n    'sphinx.ext.intersphinx',\n    'sphinx.ext.viewcode',\n    'sphinx.ext.napoleon',\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = u'RedPipe'\ncopyright = u'2017, John Loehrer'\nauthor = u'John Loehrer'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = redpipe.__version__\n\n# The full version, including alpha/beta/rc tags.\nrelease = redpipe.__version__\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin the",
    "from src.tools.dictionaries import PostLoadedDict\n\n# Utility class\n################################################\nclass ServerImplementationDict(PostLoadedDict):\n    def __missing__(self, key):\n        try:\n            return super().__missing__(key)\n        except KeyError:\n            return NotImplemented\n################################################\n\n\n\nclass Server():\n    def __init__(self, shortname, loader):\n        # Not preloaded\n        # loaders must produce dictionaries (or an appropriate iterable)\n        # with the required keys.\n        # The reason for this is that code for certain servers need not be loaded\n        # if it's not going to be used at all\n        # It also prevents import loop collisions.\n        global __ServerImplementationDict\n        self.__data = ServerImplementationDict(loader)\n        self.__shortname = shortname\n    \n    @property\n    def shortname(self):\n    # This is the only property provided from above\n        return self.__shortname\n        \n    def __str__(self):\n        return str(self.__shortname)\n        \n    # All other properties must come from canonical sources\n    # provided by the server loader\n    \n    # CONSTANTS (STRINGS, BOOLEANS, INTS, ETC.)\n    \n    @property\n    def name(self):\n        return self.__data['str_name']\n        \n    @property\n    def internal_shortname(self):\n        return self.__data['str_shortname']\n        \n    @property\n    def beta(self):\n        return self.__data['bool_tester']\n    \n    \n    # CLASSES\n    \n    # 1- Credentials:\n    \n    @property\n    def Auth(self): # I really don't know how to call this.\n        return self.__data['cls_auth']\n    @property\n    def auth_fields(self):\n        return self.__data['list_authkeys']\n        \n    # 2- Server Elements:\n    \n    @property\n    def Player(self):\n        return self.__data['cls_player']\n    \n    @property\n    def Tournament(self):\n        return self.__data['cls_tournament']",
    "# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2008 John Paulett (john -at- paulett.org)\n# Copyright (C) 2009, 2011, 2013 David Aguilar (davvid -at- gmail.com)\n# All rights reserved.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution.\n\n\"\"\"Python library for serializing any arbitrary object graph into JSON.\n\njsonpickle can take almost any Python object and turn the object into JSON.\nAdditionally, it can reconstitute the object back into Python.\n\nThe object must be accessible globally via a module and must\ninherit from object (AKA new-style classes).\n\nCreate an object::\n\n    class Thing(object):\n        def __init__(self, name):\n            self.name = name\n\n    obj = Thing('Awesome')\n\nUse jsonpickle to transform the object into a JSON string::\n\n    import jsonpickle\n    frozen = jsonpickle.encode(obj)\n\nUse jsonpickle to recreate a Python object from a JSON string::\n\n    thawed = jsonpickle.decode(frozen)\n\n.. warning::\n\n    Loading a JSON string from an untrusted source represents a potential\n    security vulnerability.  jsonpickle makes no attempt to sanitize the input.\n\nThe new object has the same type and data, but essentially is now a copy of\nthe original.\n\n.. code-block:: python\n\n    assert obj.name == thawed.name\n\nIf you will never need to load (regenerate the Python class from JSON), you can\npass in the keyword unpicklable=False to prevent extra information from being\nadded to JSON::\n\n    oneway = jsonpickle.encode(obj, unpicklable=False)\n    result = jsonpickle.decode(oneway)\n    assert obj.name == result['name'] == 'Awesome'\n\n\"\"\"\nimport sys, os\nfrom music21 import common\nsys.path.append(common.getSourceFilePath() + os.path.sep + 'ext')\n\n\nfrom jsonpickle import pickler\nfrom jsonpickle import unpickler\nfrom jsonpickle.backend import JSONBackend\nfrom jsonpickle.version import VERSION\n\n# ensure built-in handlers are loaded\n__import__('jsonpickle.handlers')\n\n__all__ = ('encode', 'decode')\n__version__ = VERSION\n\njson = JSONBackend()\n\n# Export specific JSONPluginMgr methods into the jsonpickle namespace\nset_preferred_backend = json.set_preferred_backend\nset_encoder_options = json.set_encoder_options\nload_backend = json.load_backend\nremove_backend = json.remove_backend\nenable_fallthrough = json.enable_fallthrough\n\n\ndef encode(value,\n           unpicklable=True,\n           make_refs=True,\n           keys=False,\n           max_depth=None,\n           backend=None,\n           warn=False,\n           max_iter=None):\n    \"\"\"Return a JSON formatted representation of value, a Python object.\n\n    :param unpicklable: If set to False then the output will not contain the\n        information necessary to turn the JSON data back into Python objects,\n        but a simpler JSON stream is produced.\n    :param max_depth: If set to a non-negative integer then jsonpickle will\n        not recurse deeper than 'max_depth' steps into the object.  Anything\n        deeper than 'max_depth' is represented u",
    "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Wed Sep 09 13:04:53 2015\r\n\r\n* If TimerTool.exe is running, kill the process.\r\n* If input parameter is given, start TimerTool and set clock resolution\r\nStarts TimerTool.exe and sets the clock resolution to argv[0] ms\r\n\r\nEx: python set_clock_resolution 0.5\r\n@author: marcus\r\n\"\"\"\r\n\r\nimport time, datetime\r\nfrom socket import gethostname, gethostbyname\r\nimport os\r\nimport numpy as np\r\n\r\ndef main():\r\n    \r\n    my_path = os.path.join('C:',os.sep,'Share','sync_clocks')\r\n    os.chdir(my_path)\r\n    \r\n    # Initial timestamps\r\n    t1 = time.clock()\r\n    t2 = time.time()\r\n    t3 = datetime.datetime.now()\r\n    \r\n    td1 = []\r\n    td2 = []\r\n    td3 = []\r\n    for i in xrange(100):\r\n        td1.append(time.clock()-t1)\r\n        td2.append(time.time() -t2)    \r\n        td3.append((datetime.datetime.now()-t3).total_seconds())        \r\n        time.sleep(0.001)\r\n        \r\n    # Create text file and write header\r\n    t = datetime.datetime.now()\r\n    ip = gethostbyname(gethostname()).split('.')[-1]\r\n    f_name = '_'.join([ip,'test_clock_res',str(t.year),str(t.month),str(t.day),\r\n                       str(t.hour),str(t.minute),str(t.second)])\r\n    f = open(f_name+'.txt','w')\r\n    f.write('%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n'    %\r\n            ('mean_clock','median_clock','sd_clock',\r\n             'mean_time','median_time','sd_time',\r\n             'mean_datetime','median_datetime','sd_datetime',))     \r\n        \r\n    # Write results to text file\r\n    f.write('%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\t%.2f\\n' % \r\n            (np.mean(np.diff(td1))*1000, np.median(np.diff(td1))*1000,np.std(np.diff(td1))*1000,\r\n             np.mean(np.diff(td2))*1000, np.median(np.diff(td2))*1000,np.std(np.diff(td2))*1000,\r\n             np.mean(np.diff(td3))*1000, np.median(np.diff(td3))*1000,np.std(np.diff(td3))*1000))\r\n             \r\n    f.close()\r\n\r\nif __name__ == \"__main__\":\r\n    main()    ",
    "blocklevel = [\"blockquote\", \"div\", \"form\", \"p\", \"table\", \"video\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"details\", \"article\", \"header\", \"main\"]\ndef normalizeEnter(src):\n\t#Deletes all user defined for readability reason existing line breaks that are issues for the HTML output\n\tfor elem in blocklevel:\n\t\twhile src.find(\"\\r<\" + elem) > -1:\n\t\t\tsrc = src.replace(\"\\r<\" + elem, \"<\" + elem)\n\t\twhile src.find(\"</\" + elem + \">\\r\") > -1:\n\t\t\tsrc = src.replace(\"</\" + elem + \">\\r\", \"</\" + elem + \">\")\n\t\twhile src.find(\">\\r\") > -1:\n\t\t\tsrc = src.replace(\">\\r\", \">\") #It is really needed, it created some other bugs?!\n\t\twhile src.find(\"\\r</\") > -1:\n\t\t\tsrc = src.replace(\"\\r</\", \"</\") ##It is really needed, it created some other bugs?!\n\treturn src\ndef main(islinput, inputfile, pluginData, globalData):\n\tcurrentIndex = 0\n\tfor item in islinput:\n\t\titem = normalizeEnter(item) #Deletes not wanted line breaks in order to prevent the problem we have with Markdown.\n\t\tislinput[currentIndex] = item\n\t\tcurrentIndex += 1\n\treturn islinput, pluginData, globalData\n",
    "import cairo\n\nfrom gi.repository import Gtk\nfrom gi.repository import Gdk\n\nfrom pylsner import plugin\n\n\nclass Window(Gtk.Window):\n\n    def __init__(self):\n        super(Window, self).__init__(skip_pager_hint=True,\n                                     skip_taskbar_hint=True,\n                                    )\n        self.set_title('Pylsner')\n\n        screen = self.get_screen()\n        self.width = screen.get_width()\n        self.height = screen.get_height()\n        self.set_size_request(self.width, self.height)\n        self.set_position(Gtk.WindowPosition.CENTER)\n        rgba = screen.get_rgba_visual()\n        self.set_visual(rgba)\n        self.override_background_color(Gtk.StateFlags.NORMAL,\n                                       Gdk.RGBA(0, 0, 0, 0),\n                                      )\n\n        self.set_wmclass('pylsner', 'pylsner')\n        self.set_type_hint(Gdk.WindowTypeHint.DOCK)\n        self.stick()\n        self.set_keep_below(True)\n\n        drawing_area = Gtk.DrawingArea()\n        drawing_area.connect('draw', self.redraw)\n        self.refresh_cnt = 0\n        self.add(drawing_area)\n\n        self.connect('destroy', lambda q: Gtk.main_quit())\n\n        self.widgets = []\n\n        self.show_all()\n\n    def refresh(self, force=False):\n        self.refresh_cnt += 1\n        if self.refresh_cnt >= 60000:\n            self.refresh_cnt = 0\n        redraw_required = False\n        for wid in self.widgets:\n            if (self.refresh_cnt % wid.metric.refresh_rate == 0) or force:\n                wid.refresh()\n                redraw_required = True\n        if redraw_required:\n            self.queue_draw()\n        return True\n\n    def redraw(self, _, ctx):\n        ctx.set_antialias(cairo.ANTIALIAS_SUBPIXEL)\n        for wid in self.widgets:\n            wid.redraw(ctx)\n\n\nclass Widget:\n\n    def __init__(self,\n                 name='default',\n                 metric={'plugin': 'time'},\n                 indicator={'plugin': 'arc'},\n                 fill={'plugin': 'rgba_255'},\n                ):\n        self.name = name\n        MetricPlugin = plugin.load_plugin('metrics', metric['plugin'])\n        self.metric = MetricPlugin(**metric)\n        IndicatorPlugin = plugin.load_plugin('indicators', indicator['plugin'])\n        self.indicator = IndicatorPlugin(**indicator)\n        FillPlugin = plugin.load_plugin('fills', fill['plugin'])\n        self.fill = FillPlugin(**fill)\n\n    def refresh(self):\n        self.metric.refresh()\n        self.fill.refresh(self.metric.value)\n\n    def redraw(self, ctx):\n        ctx.set_source(self.fill.pattern)\n        self.indicator.redraw(ctx, self.metric.value)\n",
    "# Given the list values = [] , write code that fills the list with each set of numbers below.\n# a.1     2   3   4   5   6   7   8   9   10\n\n\nlist = []\n\nfor i in range(11):\n    list.append(i)\n\nprint(list)",
    "\"\"\"\nTests for L{monotone}.\n\"\"\"\nfrom hypothesis import given, strategies as st\nimport errno\n\nfrom monotone import get_clock_info, monotonic\nfrom monotone import _api, _bindings\n\nimport os\n\nimport platform\n\nimport pytest\n\nneeds_posix = pytest.mark.skipif(\n    os.name == \"posix\" and platform.system() == \"Darwin\",\n    reason=\"POSIX-only tests (clock_gettime(3))\",\n)\nneeds_macos = pytest.mark.skipif(\n    platform.system() != \"Darwin\",\n    reason=\"macOS-only tests (mach_absolute_time(3))\",\n)\n\n\n@pytest.fixture\ndef errno_value():\n    \"\"\"\n    A particular errno.\n    \"\"\"\n    return errno.EINVAL\n\n\n@pytest.fixture\ndef strerror(errno_value):\n    \"\"\"\n    The string representation of a particular errno\n    \"\"\"\n    return \"[Errno {}] Invalid argument\".format(errno_value)\n\n\n@pytest.fixture\ndef apply_failing_clock_call(monkeypatch):\n    \"\"\"\n    Return a callable that patches in a failing system call fake that\n    fails and return a list of calls to that fake.\n    \"\"\"\n\n    def _apply_failing_clock_call(name, errno_value):\n        calls = []\n\n        def _failing_clock_call(clock_id, timespec):\n            calls.append((clock_id, timespec))\n            monkeypatch.setattr(_api.ffi, \"errno\", errno.EINVAL)\n            return -1\n\n        monkeypatch.setattr(_api, name, _failing_clock_call)\n\n        return calls\n\n    return _apply_failing_clock_call\n\n\n@pytest.fixture\ndef apply_timespec(monkeypatch):\n    \"\"\"\n    Return a callable that patches in a fake over the specified clock\n    call that sets the specified resolution and returns a list of\n    calls to that fake.\n    \"\"\"\n\n    def _apply_timespec(name, goal_timespec):\n        calls = []\n\n        def _fake_clock_call(clock_id, timespec):\n            calls.append((clock_id, timespec))\n            timespec[0] = goal_timespec[0]\n            return 0\n\n        monkeypatch.setattr(_api, name, _fake_clock_call)\n\n        return calls\n\n    return _apply_timespec\n\n\nclass TestSimpleNamespace(object):\n    \"\"\"\n    Tests for L{_SimpleNamespace}.\n    \"\"\"\n\n    def test_init(self):\n        \"\"\"\n        The initializer updates the instance's C{__dict__} with its\n        keyword arguments.\n        \"\"\"\n        namespace = _api._SimpleNamespace(x=1)\n        assert namespace.x == 1\n\n    def test_repr(self):\n        \"\"\"\n        The instance's repr reflects its C{__dict__}\n        \"\"\"\n        namespace = _api._SimpleNamespace()\n        namespace.y = 2\n        assert repr(namespace) == \"namespace(y=2)\"\n\n    def test_eq(self):\n        \"\"\"\n        Two instances with equal C{__dict__}s are equal.\n        \"\"\"\n        assert _api._SimpleNamespace(a=1) == _api._SimpleNamespace(a=1)\n\n\n@needs_posix\nclass TestGetClockInfoPosix(object):\n\n    \"\"\"\n    Tests for L{get_clock_info}.\n    \"\"\"\n\n    def test_non_monotonic(self):\n        \"\"\"\n        L{get_clock_info} only knows about the monotonic clock.\n        \"\"\"\n        with pytest.raises(ValueError):\n            get_clock_info(\"not monotonic\")\n\n    def test_failure(self, apply_failing_clock_call, errno_value, st",
    "\"\"\"\nhttp://community.topcoder.com/stat?c=problem_statement&pm=1667\n\nSingle Round Match 147 Round 1 - Division II, Level One\n\"\"\"\n\n\nclass CCipher:\n    def decode(self, cipherText, shift):\n        a = ord('A')\n        decoder = [a + (c - shift if c >= shift else c - shift + 26) for c in range(26)]\n        plain = [chr(decoder[ord(c) - a]) for c in cipherText]\n        return ''.join(plain)\n",
    "from hwt.synthesizer.rtlLevel.extract_part_drivers import extract_part_drivers\nfrom hwt.synthesizer.rtlLevel.remove_unconnected_signals import removeUnconnectedSignals\nfrom hwt.synthesizer.rtlLevel.mark_visibility_of_signals_and_check_drivers import markVisibilityOfSignalsAndCheckDrivers\n\n\nclass DummyPlatform():\n    \"\"\"\n    :note: all processors has to be callable with only one parameter\n        which is actual Unit/RtlNetlist instance\n    \"\"\"\n\n    def __init__(self):\n        self.beforeToRtl = []\n        self.beforeToRtlImpl = []\n        self.afterToRtlImpl = []\n\n        self.beforeHdlArchGeneration = [\n            extract_part_drivers,\n            removeUnconnectedSignals,\n            markVisibilityOfSignalsAndCheckDrivers,\n        ]\n        self.afterToRtl = []\n",
    "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nRJUST = 12\n\n\ndef format_fans(fans):\n    return format_line(prefix='fans'.rjust(RJUST), values=fans)\n\n\ndef format_rpms(rpms):\n    return format_line(prefix='rpms'.rjust(RJUST), values=rpms)\n\n\ndef format_pwms(pwms):\n    return format_line(prefix='pwms'.rjust(RJUST), values=pwms)\n\n\ndef format_tmps(tmps):\n    return format_line(prefix='temps'.rjust(RJUST), values=tmps)\n\n\ndef format_names(names):\n    return format_line(prefix='names'.rjust(RJUST), values=names)\n\n\ndef format_ports(ports):\n    return format_line(prefix='ports'.rjust(RJUST), values=ports)\n\n\ndef format_temps(temps):\n    return format_line(prefix='temps'.rjust(RJUST), values=temps)\n\n\ndef format_ambients(ambients):\n    return format_line(prefix='ambients'.rjust(RJUST), values=ambients)\n\n\ndef format_limits(limits):\n    return format_line(prefix='limits'.rjust(RJUST), values=limits)\n\n\ndef format_buffers(buffers):\n    return format_line(prefix='buffers'.rjust(RJUST), values=buffers)\n\n\ndef format_headrooms(headrooms):\n    return format_line(prefix='headrooms'.rjust(RJUST), values=headrooms)\n\n\ndef format_directions(directions):\n    return format_line(prefix='directions'.rjust(RJUST), values=directions)\n\n\ndef format_differences(differences):\n    return format_line(prefix='differences'.rjust(RJUST), values=differences)\n\n\ndef format_pwms_new(pwms_new):\n    return format_line(prefix='new pwms'.rjust(RJUST), values=pwms_new)\n\n\ndef format_line(prefix, values):\n    line = ''\n    line += prefix\n    line += ': '\n    line += '['\n    for value in values:\n        try:\n            if value >= 1:\n                value = int(round(value, 0))\n            if 1 > value != 0:\n                value = str(value)[1:4].ljust(3, '0')\n        except TypeError:\n            # value is None\n            pass\n\n        value = str(value) if value is not None else ''\n        line += value.rjust(6)\n        line += ', '\n    line = line[:-len(', ')]\n    line += ']'\n\n    return line\n",
    "# -*- coding: utf-8 -*-\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\n\n\nclass Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        # Adding model 'Package'\n        db.create_table(u'api_package', (\n            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n            ('name', self.gf('django.db.models.fields.CharField')(unique=True, max_length=500, db_index=True)),\n            ('url', self.gf('django.db.models.fields.CharField')(unique=True, max_length=500)),\n            ('created_at', self.gf('django.db.models.fields.DateField')(auto_now_add=True, blank=True)),\n        ))\n        db.send_create_signal(u'api', ['Package'])\n\n        # Adding unique constraint on 'Package', fields ['name', 'url']\n        db.create_unique(u'api_package', ['name', 'url'])\n\n\n    def backwards(self, orm):\n        # Removing unique constraint on 'Package', fields ['name', 'url']\n        db.delete_unique(u'api_package', ['name', 'url'])\n\n        # Deleting model 'Package'\n        db.delete_table(u'api_package')\n\n\n    models = {\n        u'api.package': {\n            'Meta': {'unique_together': \"(('name', 'url'),)\", 'object_name': 'Package'},\n            'created_at': ('django.db.models.fields.DateField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500', 'db_index': 'True'}),\n            'url': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '500'})\n        }\n    }\n\n    complete_apps = ['api']",
    "from __future__ import absolute_import\n\nimport matplotlib\n# Force matplotlib to not use any Xwindows backend.\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n\nfrom plotly.tests.utils import compare_dict\nfrom plotly.tests.test_optional.optional_utils import run_fig\nfrom plotly.tests.test_optional.test_matplotlylib.data.annotations import *\n\n\ndef test_annotations():\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3], 'b-')\n    ax.plot([3, 2, 1], 'b-')\n    ax.text(0.001, 0.999,\n            'top-left', transform=ax.transAxes, va='top', ha='left')\n    ax.text(0.001, 0.001,\n            'bottom-left', transform=ax.transAxes, va='baseline', ha='left')\n    ax.text(0.999, 0.999,\n            'top-right', transform=ax.transAxes, va='top', ha='right')\n    ax.text(0.999, 0.001,\n            'bottom-right', transform=ax.transAxes, va='baseline', ha='right')\n    renderer = run_fig(fig)\n    for data_no, data_dict in enumerate(renderer.plotly_fig['data']):\n        equivalent, msg = compare_dict(data_dict,\n                                       ANNOTATIONS['data'][data_no])\n        assert equivalent, msg\n    for no, note in enumerate(renderer.plotly_fig['layout']['annotations']):\n        equivalent, msg = compare_dict(note,\n                                       ANNOTATIONS['layout']['annotations'][no])\n        assert equivalent, msg\n",
    "from distutils.core import setup\n\nsetup(\n    # Application name:\n    name=\"streaker\",\n\n    # Version number (initial):\n    version=\"0.0.1\",\n\n    # Application author details:\n    author=\"Aldi Alimucaj\",\n    author_email=\"aldi.alimucaj@gmail.com\",\n\n    # Packages\n    packages=[\"streaker\"],\n\n    scripts=['bin/streaker'],\n\n    # Include additional files into the package\n    include_package_data=True,\n\n    # Details\n    url=\"http://pypi.python.org/pypi/Streaker_v001/\",\n\n    #\n    license=\"MIT\",\n    description=\"GitHub streak manipulator\",\n\n    # long_description=open(\"README.txt\").read(),\n\n    # Dependent packages (distributions)\n    install_requires=[\n        # \"\",\n    ],\n)\n",
    "from __future__ import absolute_import, division, print_function, unicode_literals\n\n# Statsd client. Loosely based on the version by Steve Ivy <steveivy@gmail.com>\n\nimport logging\nimport random\nimport socket\nimport time\nfrom contextlib import contextmanager\n\nlog = logging.getLogger(__name__)\n\n\nclass StatsD(object):\n\n    def __init__(self, host='localhost', port=8125, enabled=True, prefix=''):\n        self.addr = None\n        self.enabled = enabled\n        if enabled:\n            self.set_address(host, port)\n        self.prefix = prefix\n        self.udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    def set_address(self, host, port=8125):\n        try:\n            self.addr = (socket.gethostbyname(host), port)\n        except socket.gaierror:\n            self.addr = None\n            self.enabled = False\n\n    @contextmanager\n    def timed(self, stat, sample_rate=1):\n        log.debug('Entering timed context for %r' % (stat,))\n        start = time.time()\n        yield\n        duration = int((time.time() - start) * 1000)\n        log.debug('Exiting timed context for %r' % (stat,))\n        self.timing(stat, duration, sample_rate)\n\n    def timing(self, stats, time, sample_rate=1):\n        \"\"\"\n        Log timing information\n        \"\"\"\n        unit = 'ms'\n        log.debug('%r took %s %s' % (stats, time, unit))\n        self.update_stats(stats, \"%s|%s\" % (time, unit), sample_rate)\n\n    def increment(self, stats, sample_rate=1):\n        \"\"\"\n        Increments one or more stats counters\n        \"\"\"\n        self.update_stats(stats, 1, sample_rate)\n\n    def decrement(self, stats, sample_rate=1):\n        \"\"\"\n        Decrements one or more stats counters\n        \"\"\"\n        self.update_stats(stats, -1, sample_rate)\n\n    def update_stats(self, stats, delta=1, sampleRate=1):\n        \"\"\"\n        Updates one or more stats counters by arbitrary amounts\n        \"\"\"\n        if not self.enabled or self.addr is None:\n            return\n\n        if type(stats) is not list:\n            stats = [stats]\n        data = {}\n        for stat in stats:\n            data[\"%s%s\" % (self.prefix, stat)] = \"%s|c\" % delta\n\n        self.send(data, sampleRate)\n\n    def send(self, data, sample_rate):\n        sampled_data = {}\n\n        if sample_rate < 1:\n            if random.random() <= sample_rate:\n                for stat, value in data.items():\n                    sampled_data[stat] = \"%s|@%s\" % (value, sample_rate)\n        else:\n            sampled_data = data\n\n        try:\n            for stat, value in sampled_data.items():\n                self.udp_sock.sendto(\"%s:%s\" % (stat, value), self.addr)\n        except Exception as e:\n            log.exception('Failed to send data to the server: %r', e)\n\n\nif __name__ == '__main__':\n    sd = StatsD()\n    for i in range(1, 100):\n        sd.increment('test')\n",
    "from setuptools import setup, find_packages\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name='fcit',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version='1.2.0',\n\n    description='A decision-tree based conditional independence test',\n    long_description=long_description,\n\n    # The project's main homepage.\n    url = 'https://github.com/kjchalup/fcit',\n\n    # Author details\n    author = 'Krzysztof Chalupka',\n    author_email = 'janchatko@gmail.com',\n\n    # Choose your license\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Science/Research',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n\n    # What does your project relate to?\n    keywords='machine learning statistics decision trees',\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=['contrib', 'docs', 'tests']),\n\n    # Alternatively, if you want to distribute just a my_module.py, uncomment\n    # this:\n    #   py_modules=[\"my_module\"],\n\n    # List run-time dependencies here.  These will be installed by pip when\n    # your project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['numpy', 'sklearn', 'scipy', 'joblib'],\n)\n\n",
    "import pandas as pd\nimport os\nimport time\nfrom datetime import datetime\nimport re\nfrom time import mktime\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use(\"dark_background\")\n\n# path = \"X:/Backups/intraQuarter\" # for Windows with X files :)\n# if git clone'ed then use relative path,\n# assuming you extracted the downloaded zip into this project's folder:\npath = \"intraQuarter\"\n\ndef Key_Stats(gather=\"Total Debt/Equity (mrq)\"):\n  statspath = path+'/_KeyStats'\n  stock_list = [x[0] for x in os.walk(statspath)]\n  df = pd.DataFrame(\n    columns = [\n      'Date',\n      'Unix',\n      'Ticker',\n      'DE Ratio',\n      'Price',\n      'stock_p_change',\n      'SP500',\n      'sp500_p_change',\n      'Difference',\n      'Status'\n    ]\n  )\n\n  sp500_df = pd.DataFrame.from_csv(\"YAHOO-INDEX_GSPC.csv\")\n\n  ticker_list = []\n\n  for each_dir in stock_list[1:25]:\n    each_file = os.listdir(each_dir)\n\n    # ticker = each_dir.split(\"\\\\\")[1] # Windows only\n    # ticker = each_dir.split(\"/\")[1] # this didn't work so do this:\n    ticker = os.path.basename(os.path.normpath(each_dir))\n    # print(ticker) # uncomment to verify\n    ticker_list.append(ticker)\n\n    starting_stock_value = False\n    starting_sp500_value = False\n    \n    if len(each_file) > 0:\n      for file in each_file:\n        date_stamp = datetime.strptime(file, '%Y%m%d%H%M%S.html')\n        unix_time = time.mktime(date_stamp.timetuple())\n        full_file_path = each_dir + '/' + file\n        source = open(full_file_path,'r').read()\n        try:\n          try:\n            value = float(source.split(gather+':</td><td class=\"yfnc_tabledata1\">')[1].split('</td>')[0])\n          except:\n            value = float(source.split(gather+':</td>\\n<td class=\"yfnc_tabledata1\">')[1].split('</td>')[0])\n              \n          try:\n            sp500_date = datetime.fromtimestamp(unix_time).strftime('%Y-%m-%d')\n            row = sp500_df[(sp500_df.index == sp500_date)]\n            sp500_value = float(row['Adjusted Close'])\n          except:\n            sp500_date = datetime.fromtimestamp(unix_time-259200).strftime('%Y-%m-%d')\n            row = sp500_df[(sp500_df.index == sp500_date)]\n            sp500_value = float(row['Adjusted Close'])\n\n          try:\n            stock_price = float(source.split('</small><big><b>')[1].split('</b></big>')[0])\n          except:\n            try:\n              stock_price = (source.split('</small><big><b>')[1].split('</b></big>')[0])\n              #print(stock_price)\n              stock_price = re.search(r'(\\d{1,8}\\.\\d{1,8})', stock_price)\n              stock_price = float(stock_price.group(1))\n              #print(stock_price)\n            except:\n              try:\n                stock_price = (source.split('<span class=\"time_rtq_ticker\">')[1].split('</span>')[0])\n                #print(stock_price)\n                stock_price = re.search(r'(\\d{1,8}\\.\\d{1,8})', stock_price)\n                stock_price = float(stock_price.group(1))\n                #print(stock_pr",
    "from __future__ import absolute_import\n\nfrom .base import WhiteNoise\n\n__version__ = '2.0.3'\n\n__all__ = ['WhiteNoise']\n",
    "import struct\n\n''' Refer to docs for all the exact formats. There are many so check them out before converting things yourself '''\n''' If there's a specific offset you want to do things from, use pack_into and unack_into from the docs '''\n\n#Integer to string\ni1= 1234\nprint \"Int to string as 8 byte little endian\", repr(struct.pack(\"<Q\",i1))\nprint \"Int to string as 8 byte big endian\", repr(struct.pack(\">Q\",i1))\n\n#String to integer. Make sure size of destination matches the length of the string\ns1= '1234'\nprint \"String to 4 byte integer little endian\", struct.unpack(\"<i\", s1)\nprint \"String to 4 byte integer big endian\", struct.unpack(\">i\", s1)\n\n''' Whenever you want to convert to and from binary, think of binascii '''\nimport binascii\nh1= binascii.b2a_hex(s1)\nprint \"String to hex\", h1\nuh1= binascii.a2b_hex(h1)\nprint \"Hex to string, even a binary string\", uh1\n",
    "# -*- coding: utf-8 -*-\n\n# Copyright (c) 2016 J\u00e9r\u00e9mie DECOCK (http://www.jdhp.org)\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n\"\"\"\nTODO...\n\"\"\"\n\n__all__ = ['GreedyPlayer']\n\nimport random\n\nfrom jdhp.tictactoe.player.abstract import Player\n\nclass GreedyPlayer(Player):\n    \"\"\"\n    TODO...\n    \"\"\"\n\n    def play(self, game, state):\n        \"\"\"\n        TODO...\n        \"\"\"\n        action_list = game.getSetOfValidActions(state)\n\n        choosen_action = None\n\n        # Choose actions that lead to immediate victory...\n        for action in action_list:\n            next_state = game.nextState(state, action, self)\n            if game.hasWon(self, next_state):\n                choosen_action = action\n                break\n\n        # ... otherwise choose randomly\n        if choosen_action is None:\n            #print(\"randomly choose action\")    # debug\n            choosen_action = random.choice(action_list)\n\n        return choosen_action\n",
    "__author__ = 'besta'\n\n\nclass BestaPlayer:\n\n    def __init__(self, fichier, player):\n        self.fichier = fichier\n        self.grille = self.getFirstGrid()\n        self.best_hit = 0\n        self.players = player\n\n    def getFirstGrid(self):\n        \"\"\"\n        Implements function to get the first grid.\n\n        :return: the grid.\n        \"\"\"\n        li = []\n        with open(self.fichier, 'r') as fi:\n            for line in fi.readlines():\n                li.append(line)\n        return li\n\n    def updateGrid(self):\n        \"\"\"\n        Implements function to update the grid to alter n-1\n        round values\n\n        \"\"\"\n        with open(self.fichier, 'r') as fi:\n            for line in fi.readlines():\n                i = 0\n                for car in line:\n                    j = 0\n                    if car != '\\n':\n                        self.grille[i][j] = car\n                        j += 1\n                    i += 1\n\n    def grilleEmpty(self):\n        \"\"\"\n        Implement function to check if the grid is empty.\n\n        \"\"\"\n        for line in self.grille:\n            for car in line[:len(line) - 1]:\n                if car != '0':\n                    return False\n        return True\n\n    def checkLines(self, player, inARow):\n        \"\"\"\n        Implements function to check the current lines setup to evaluate best combinaison.\n\n        :param player: check for your numbers (your player number) or those of your opponent.\n        :param inARow: how many tokens in a row (3 or 2).\n        :return: true or false\n\n        \"\"\"\n        count = 0\n        flag = False\n        for line_number, line in enumerate(self.grille):\n            count = 0\n            for car_pos, car in enumerate(line[:len(line) - 1]):\n                if int(car) == player and not flag:\n                    count = 1\n                    flag = True\n                elif int(car) == player and flag:\n                    count += 1\n                    if count == inARow:\n                        if car_pos - inARow >= 0 and self.canPlayLine(line_number, car_pos - inARow):\n                            return True, car_pos - inARow\n                        if car_pos + 1 <= 6 and self.canPlayLine(line_number, car_pos + 1):\n                            return True, car_pos + 1\n                else:\n                    count = 0\n        return False, 0\n\n    def canPlayLine(self, line, col):\n        \"\"\"\n        Function to check if we can fill the line with a token.\n        :param line: which line\n        :param col: which column\n        :return: true or false\n        \"\"\"\n        if line == 5:\n            return self.grille[line][col] == '0'\n        else:\n            return self.grille[line][col] == '0' and self.grille[line + 1][col] != '0'\n\n    def changeColumnInLines(self):\n        \"\"\"\n        Implements function to transform columns in lines to make tests eaiser.\n        :return: a reverse matrice\n        \"\"\"\n        column = []\n        for x in xrange(7):\n            col = ''\n           ",
    "# User info wrapper object\nimport logging\n\nclass User(object):\n    \"\"\"\n    Wrapper object around an entry in users.json. Behaves like a read-only dictionary if\n    asked, but adds some useful logic to decouple the front end from the JSON structure.\n    \"\"\"\n\n    _NAME_KEYS = [\"display_name\", \"real_name\"]\n    _DEFAULT_IMAGE_KEY = \"image_512\"\n\n    def __init__(self, raw_data):\n        self._raw = raw_data\n\n    def __getitem__(self, key):\n        return self._raw[key]\n\n    @property\n    def display_name(self):\n        \"\"\"\n        Find the most appropriate display name for a user: look for a \"display_name\", then\n        a \"real_name\", and finally fall back to the always-present \"name\".\n        \"\"\"\n        for k in self._NAME_KEYS:\n            if self._raw.get(k):\n                return self._raw[k]\n            if \"profile\" in self._raw and self._raw[\"profile\"].get(k):\n                return self._raw[\"profile\"][k]\n        return self._raw[\"name\"]\n\n    @property\n    def email(self):\n        \"\"\"\n        Shortcut property for finding the e-mail address or bot URL.\n        \"\"\"\n        if \"profile\" in self._raw:\n            email = self._raw[\"profile\"].get(\"email\")\n        elif \"bot_url\" in self._raw:\n            email = self._raw[\"bot_url\"]\n        else:\n            email = None\n        if not email:\n            logging.debug(\"No email found for %s\", self._raw.get(\"name\"))\n        return email\n\n    def image_url(self, pixel_size=None):\n        \"\"\"\n        Get the URL for the user icon in the desired pixel size, if it exists. If no\n        size is supplied, give the URL for the full-size image.\n        \"\"\"\n        if \"profile\" not in self._raw:\n            return\n        profile = self._raw[\"profile\"]\n        if (pixel_size):\n            img_key = \"image_%s\" % pixel_size\n            if img_key in profile:\n                return profile[img_key]\n        return profile[self._DEFAULT_IMAGE_KEY]\n\n\ndef deleted_user(id):\n    \"\"\"\n    Create a User object for a deleted user.\n    \"\"\"\n    deleted_user = {\n        \"id\": id,\n        \"name\": \"deleted-\" + id,\n        \"deleted\": True,\n        \"is_bot\": False,\n        \"is_app_user\": False,\n    }\n    return User(deleted_user)\n",
    "#!/hpf/largeprojects/ccmbio/naumenko/tools/bcbio/anaconda/bin/python\n\n\"\"\"\nLooks for a specific sample\n\"\"\"\n\nimport re\nimport sys\nimport os\nimport os.path\n\nsample = sys.argv[1]\n\nfamily,sample_only = sample.split(\"_\")\n\nmatch = re.match('\\d*',family)\n\nif match:\n    prefix=str(int(match.group(0))/100)\n    report_path = prefix+'x/'+family\n    \n    report=0\n    bam=0\n    \n    errors = []\n    \n    if os.path.isfile(report_path+'/'+family+'.csv'):\n\t#print(\"Report exists\")\n\treport=1\n    else:\n\terrors.append('Error: no report')\n\t\n    if os.path.isfile(report_path+'/'+sample+'.bam'):\n\t#print(\"Bam exists\")\n\tbam=1\n    else:\n\terrors.append(' ERROR: no bam')\n\t\n    if (bam==1 and report==1):\n        print(sample+'\\t'+os.getcwd()+\"/\"+report_path+\"\\t\"+os.getcwd()+\"/\"+report_path+'/'+sample+'.bam')\n    else:\n\tprint(sample+'\\t'+' '.join(errors))\nelse:\n    print(\"Family ID is not starting with digital\")\n",
    "# -*- coding: utf-8 -*-\n\"\"\"\nDate: 2/2/2017\n\nTeam: Satoshi Nakamoto\n@Authors: Alex Levering and Hector Muro\n\nNon-standard dependencies:\n* Twython\n* NLTK\n* Folium\n* Geocoder\n* psycopg2\n\nTO DO BEFOREHAND:\nThe following steps are non-automatable and have to be performed manually.\n* Have the NLTK vader lexicon locally (nltk.download(\"vader_lexicon\"))\n* Have PostGIS installed on PostgreSQL\n* Set the file paths specified below to wherever your folder is\n* Upgrade folium to the latest version (0.2.1)\n\"\"\"\n\n\n\n# Naming options for tables, intermediates and outputs are available in the wrapper.\nif __name__ == \"__main__\":\n    \"\"\"\n        The tool is not supplied with Tweets out-of-the-box. Set 'gather_data' to True and leave it\n        running for a while. If loop is false it will terminate in a minute or so and create a map from the results automatically\n        \n        This tool was tested and intended for OSGeo Live installs used in the GeoScripting course.\n    \"\"\"\n    import tweetAnalysisWrapper\n    tweetAnalysisWrapper.performTweetResearch(folder_path = r\"/home/user/git/SatoshiNakamotoGeoscripting/Final_assignment\",\n                                              defaultdb = \"postgres\", # Making a new database requires connecting to an existing database\n                                              user = \"user\", # PostgreSQL username (user is default value on OSGeo Live)\n                                              password = \"user\", # PostgreSQL password (user is default on OSGeo Live)\n                                              ouputdb = \"tweet_research\", # Specify the output database that is to be created\n                                              tweet_table_name = \"tweets\", # Output table where the Tweets are stored\n                                              gather_data = True, # When True: Will gather data from the Twitter stream\n                                              search_terms = [\"Trump\"], # Twitter terms to search for                                   \n                                              loop_gathering = False, # When True: Will not stop gathering when terminated - use for prolonged gathering\n                                              APP_KEY = \"\", # Get these from developer.twitter.com when you make your application\n                                              APP_SECRET =  \"\",\n                                              OAUTH_TOKEN =  \"\",\n                                              OAUTH_TOKEN_SECRET = \"\")\n",
    "#!/usr/bin/python\n#coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport os\nimport unittest\nimport xlrd\n\nimport msp.schedule_parser as schedule_parser\n\n__author__ = \"Andrey Konovalov\"\n__copyright__ = \"Copyright (C) 2014 Andrey Konovalov\"\n__license__ = \"MIT\"\n__version__ = \"0.1\"\n\nthis_dir, this_filename = os.path.split(__file__)\nSCHEDULE_PATH = os.path.join(this_dir, \"..\", \"data\", \"2013_fall\", \"4kurs.xls\")\n\nclass WeekdayRangeTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetWeekdayRange(0), (4, 11))\n    self.assertEqual(self.schedule.GetWeekdayRange(1), (12, 19))\n    self.assertEqual(self.schedule.GetWeekdayRange(2), (20, 27))\n    self.assertEqual(self.schedule.GetWeekdayRange(3), (28, 37))\n    self.assertEqual(self.schedule.GetWeekdayRange(4), (38, 47))\n    self.assertEqual(self.schedule.GetWeekdayRange(5), (48, 57))\n\nclass DepartmentCountTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetDepartmentCount(), 9)\n\nclass DepartmentRangeTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetDepartmentRange(0), (2, 11))\n    self.assertEqual(self.schedule.GetDepartmentRange(1), (13, 20))\n    self.assertEqual(self.schedule.GetDepartmentRange(2), (22, 32))\n    self.assertEqual(self.schedule.GetDepartmentRange(3), (34, 36))\n    self.assertEqual(self.schedule.GetDepartmentRange(4), (38, 43))\n    self.assertEqual(self.schedule.GetDepartmentRange(5), (45, 53))\n    self.assertEqual(self.schedule.GetDepartmentRange(6), (55, 62))\n    self.assertEqual(self.schedule.GetDepartmentRange(7), (64, 71))\n    self.assertEqual(self.schedule.GetDepartmentRange(8), (73, 77))\n\nclass DepartmentsRowTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetDepartmentsRow(), 3)\n\nclass HoursColumnTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetHoursColumn(), 1)\n\nclass HoursRangesTest(unittest.TestCase):\n  def setUp(self):\n    self.schedule = schedule_parser.Schedule()\n    self.schedule.Parse(SCHEDULE_PATH)\n\n  def runTest(self):\n    self.assertEqual(self.schedule.GetHoursRanges(0), [(4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)])\n    self.assertEqual(self.schedule.GetHoursRanges(3), [(28, 30), (30, 31), (31, 32), (32, 34), (34, 35), (35, 36), (36, 37)])\n    self.assertEqual(self.schedule.GetHoursRanges(5), [(48, 49), (49, 50), (50, 52), (52, 53), (53, 54), (54, 56), (56, 57)])\n\nclass Gr",
    "\nimport gzip\nimport glob\n\nimport numpy as np\nimport pandas as pd\n\nfrom scipy.stats import pearsonr\nfrom scipy.stats import spearmanr\n\n\ndef get_num_lines_gz(filename):\n    num_lines = 0\n    with gzip.open(filename, \"r\") as fp:\n        for line in fp:\n            num_lines += 1\n    \n    return num_lines\n\n\ndef main():\n    \"\"\"get stats from PAS-seq\n    \n    - num reads per file\n    - gene quant level spearman correlations\n\n    \"\"\"\n    \n    # files\n    DATA_DIR = \"/mnt/lab_data/kundaje/projects/skin/data/bds/processed.chipseq.2017-01-23.histones\"\n    \n    # params\n    marks = [\"H3K27ac\", \"H3K4me1\", \"H3K27me3\", \"CTCF\"]\n    days = np.arange(0, 7, 3)\n    days = [\"d{}\".format(day).replace(\".\", \"\") for day in days]\n    reps = [\"1\", \"2\"]\n    \n    # results \n    results = {}\n    results[\"mark_or_tf\"] = [] \n    results[\"timepoint\"] = []\n    results[\"replicate\"] = []\n    #results[\"num_input_reads\"] = []\n    results[\"num_nodup_reads\"] = []\n    results[\"NRF\"] = []\n    results[\"PBC1\"] = []\n    results[\"PBC2\"] = []\n    results[\"num_macs2_peaks\"] = []\n    results[\"num_overlap_peaks\"] = []\n    results[\"num_idr_peaks\"] = []\n\n    for mark in marks:\n        print mark\n        for day in days:\n            for rep in reps:\n            \n                # timepoint, rep\n                results[\"mark_or_tf\"].append(mark)\n                results[\"timepoint\"].append(day)\n                results[\"replicate\"].append(rep)\n\n                # nodup reads\n                nodup_log = glob.glob(\n                    \"{}/*{}*{}*/qc/rep{}/*nodup.flagstat.qc\".format(\n                        DATA_DIR, day, mark, rep))[0]\n                with open(nodup_log, \"r\") as fp:\n                    for line in fp:\n                        if \"in total\" in line:\n                            num_nodup_reads = line.split(\"+\")[0].strip()\n                            results[\"num_nodup_reads\"].append(num_nodup_reads)\n\n                # NRF/PBC1/PBC2\n                lib_log = glob.glob(\n                    \"{}/*{}*{}*/qc/rep{}/*nodup.pbc.qc\".format(\n                        DATA_DIR, day, mark, rep))[0]\n                with open(lib_log, \"r\") as fp:\n                    # cols 5,6,7 is NRF/PBC1/PBC2\n                    for line in fp:\n                        fields = line.strip().split()\n                    results[\"NRF\"].append(fields[4])\n                    results[\"PBC1\"].append(fields[5])\n                    results[\"PBC2\"].append(fields[6])\n\n                # peak files\n                macs2_peaks = glob.glob(\n                    \"{}/*{}*{}*/peak/macs2/rep{}/*narrowPeak.gz\".format(\n                        DATA_DIR, day, mark, rep))[0]\n                num_macs2 = get_num_lines_gz(macs2_peaks)\n                results[\"num_macs2_peaks\"].append(num_macs2)\n\n                if \"CTCF\" in mark:\n                    idr_peaks = glob.glob(\n                        \"{}/*{}*{}*/peak/idr/true_reps/rep1-rep2/*filt.narrowPeak.gz\".format(\n                            DATA_DIR, day, mark))[0]\n                    num_idr = g",
    "\nstudent_phoneNumber_name = {1: 'a', 3: 'c', 2: 'b'}\n\ndef Handler() :\n\twhile (1) :\n\t\tchoice = eval(input(\"Enter :\\t 1 - to search student name \\n \\t 2 - to insert new student record \\n \\t 0 - to quit\\n\"))\n\t\tprint(choice)\n\t\tif (choice == 1) :\n\t\t\tif (student_phoneNumber_name) :\n\t\t\t\tphone_number = input(\"Enter student's phone number : \")\n\t\t\t\tname = SearchRecord(phone_number)\n\t\t\t\tif (name) :\n\t\t\t\t\tprint(\"name : \" + name )\n\t\t\t\telse :\n\t\t\t\t\tprint(str(phone_number) + \"Does not exist in record\" + str(name))\n\t\t\telse :\n\t\t\t\tprint(\"Record is empty \")\n\t\telif (choice == 2) :\n\t\t\tphone_number = input(\"Enter student's phone number : \")\n\t\t\tname = input(\"Enter student's name : \") #best example to understand input() and raw_input()\n\t\t\tInsertRecord(phone_number, name)\n\t\telif (choice == 0) :\n\t\t\tbreak\n\t\telse:\n\t\t\tprint(\"Enter correct choice\")\n\t\t\n\ndef InsertRecord(x, y):\n\tstudent_phoneNumber_name[x] = y\n\treturn;\n\t\ndef SearchRecord(x):\n\tprint(x)\n\tif (x in student_phoneNumber_name) :\n\t\treturn student_phoneNumber_name[x]\n\t\n\treturn False\n\t\n\t\t\nHandler()\n\nprint(student_phoneNumber_name)",
    "\"\"\" Tests for Dynamo3 \"\"\"\n\nimport sys\nimport unittest\nfrom decimal import Decimal\nfrom pickle import dumps, loads\nfrom urllib.parse import urlparse\n\nfrom botocore.exceptions import ClientError\nfrom mock import ANY, MagicMock, patch\n\nfrom dynamo3 import (\n    Binary,\n    Dynamizer,\n    DynamoDBConnection,\n    DynamoDBError,\n    DynamoKey,\n    GlobalIndex,\n    Limit,\n    Table,\n    ThroughputException,\n)\nfrom dynamo3.constants import STRING\nfrom dynamo3.result import Capacity, ConsumedCapacity, Count, ResultSet, add_dicts\n\n\nclass BaseSystemTest(unittest.TestCase):\n\n    \"\"\"Base class for system tests\"\"\"\n\n    dynamo: DynamoDBConnection = None  # type: ignore\n\n    def setUp(self):\n        super(BaseSystemTest, self).setUp()\n        # Clear out any pre-existing tables\n        for tablename in self.dynamo.list_tables():\n            self.dynamo.delete_table(tablename)\n\n    def tearDown(self):\n        super(BaseSystemTest, self).tearDown()\n        for tablename in self.dynamo.list_tables():\n            self.dynamo.delete_table(tablename)\n        self.dynamo.clear_hooks()\n\n\nclass TestMisc(BaseSystemTest):\n\n    \"\"\"Tests that don't fit anywhere else\"\"\"\n\n    def tearDown(self):\n        super(TestMisc, self).tearDown()\n        self.dynamo.default_return_capacity = False\n\n    def test_connection_host(self):\n        \"\"\"Connection can access host of endpoint\"\"\"\n        urlparse(self.dynamo.host)\n\n    def test_connection_region(self):\n        \"\"\"Connection can access name of connected region\"\"\"\n        self.assertTrue(isinstance(self.dynamo.region, str))\n\n    def test_connect_to_region(self):\n        \"\"\"Can connect to a dynamo region\"\"\"\n        conn = DynamoDBConnection.connect(\"us-west-1\")\n        self.assertIsNotNone(conn.host)\n\n    def test_connect_to_region_creds(self):\n        \"\"\"Can connect to a dynamo region with credentials\"\"\"\n        conn = DynamoDBConnection.connect(\n            \"us-west-1\", access_key=\"abc\", secret_key=\"12345\"\n        )\n        self.assertIsNotNone(conn.host)\n\n    def test_connect_to_host_without_session(self):\n        \"\"\"Can connect to a dynamo host without passing in a session\"\"\"\n        conn = DynamoDBConnection.connect(\"us-west-1\", host=\"localhost\")\n        self.assertIsNotNone(conn.host)\n\n    @patch(\"dynamo3.connection.time\")\n    def test_retry_on_throughput_error(self, time):\n        \"\"\"Throughput exceptions trigger a retry of the request\"\"\"\n\n        def call(*_, **__):\n            \"\"\"Dummy service call\"\"\"\n            response = {\n                \"ResponseMetadata\": {\n                    \"HTTPStatusCode\": 400,\n                },\n                \"Error\": {\n                    \"Code\": \"ProvisionedThroughputExceededException\",\n                    \"Message\": \"Does not matter\",\n                },\n            }\n            raise ClientError(response, \"list_tables\")\n\n        with patch.object(self.dynamo, \"client\") as client:\n            client.list_tables.side_effect = call\n            with self.assertRaises(ThroughputException):\n      ",
    "Alchemy sentiment analysis: fb12d2c55fff36e1e268584e261b6b010b37279f\n\n\n\nAfrica Is Talking: 676dbd926bbb04fa69ce90ee81d3f5ffee2692aaf80eb5793bd70fe93e77dc2e\n",
    "#!/usr/bin/env python3\n\"\"\"\n    Categorize and analyze user sessions.\n    Read in ecfs_obfuscated_filtered.gz file, output some fancy results. \n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import Counter\nimport sys\nimport time\nimport os\nimport resource\nimport json\nimport fnmatch\nfrom pipes import Pipes\nimport operator\n\nfrom operation import Operation\n\nKB = 1024\nMB = KB * 1024\nGB = MB * 1024\nTB = GB * 1024\nPB = TB * 1024\n\nMONITOR_LINES = 100000\n\n\nclass UserSession():\n    def __init__(self, user_id):\n        self.user_id = user_id\n        self.from_ts = 0\n        self.till_ts = 0\n        self.get_requests = 0\n        self.reget_requests = 0\n        self.put_requests = 0\n        self.get_bytes = 0\n        self.put_bytes = 0\n        self.rename_requests = 0\n        self.del_requests = 0\n        self.get_dirs = 0\n        self.put_dirs = 0\n        self.put_files_per_dir = 0.0\n        self.get_files_per_dir = 0.0\n        self.window_seconds = 0\n\n        self.file_cnt_gets = Counter()\n        self.file_cnt_puts = Counter()\n        self.dir_cnt_gets = Counter()\n        self.dir_cnt_puts = Counter()\n\n        self.num_ops = 0\n        self.last_ts = 0\n\n    def add_op(self, op):\n        self.num_ops += 1\n\n        if op.ts < self.last_ts:\n            raise Exception(\"Timestamp too old\")\n        else:\n            self.last_ts = op.ts\n\n        if op.optype == 'g':\n            self.get_requests += 1\n            self.get_bytes += op.size\n            self.file_cnt_gets[op.obj_id] += 1\n            self.dir_cnt_gets[op.parent_dir_id] += 1\n        elif op.optype == 'p':\n            self.put_requests += 1\n            self.put_bytes += op.size\n            self.file_cnt_puts[op.obj_id] += 1\n            self.dir_cnt_puts[op.parent_dir_id] += 1\n        elif op.optype == 'd':\n            self.del_requests += 1\n        elif op.optype == 'r':\n            self.rename_requests += 1\n\n        #update last time stamp in the session\n        self.till_ts = op.ts + op.execution_time\n\n    def finish(self):\n        self.get_dirs = len(self.dir_cnt_gets)\n        if self.get_dirs > 0:\n            self.get_files_per_dir = float(self.get_requests) / self.get_dirs\n\n        self.put_dirs = len(self.dir_cnt_puts)\n        if self.put_dirs > 0:\n            self.put_files_per_dir = float(self.put_requests) / self.put_dirs\n\n        \"\"\"\n        set reget_counter\n        :param counter: contains [ 1, 1, 5] counts of objects. value > 1 is a re-retrieval.\n        :return:\n        \"\"\"\n        for c in self.file_cnt_gets.values():\n            if c > 1:\n                self.reget_requests += (c - 1)\n\n        # self.announce()\n\n        return \";\".join([str(x) for x in [\n        self.user_id,\n        self.from_ts,\n        self.till_ts,\n        self.till_ts - self.from_ts,\n        self.get_requests,\n        self.reget_requests,\n        self.put_requests,\n        self.get_bytes,\n        self.put_bytes,\n        self.rename_requests,\n        self.del_requests,\n        self.get_dirs,\n        self.p",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\n@author Stephan Reith\n@date \t31.08.2016\n\nThis is a simple example to demonstrate how the ROS Spinnaker Interface can be used.\n\nYou will also need a ROS Listener and a ROS Talker to send and receive data.\nMake sure they communicate over the same ROS topics and std_msgs.Int64 ROS Messages used in here.\n\"\"\"\n\nimport spynnaker.pyNN as pynn\n\nfrom ros_spinnaker_interface import ROS_Spinnaker_Interface\n# import transfer_functions as tf\nfrom ros_spinnaker_interface import SpikeSourcePoisson\nfrom ros_spinnaker_interface import SpikeSinkSmoothing\n\n\nts = 0.1\nn_neurons = 1\nsimulation_time = 10000  # ms\n\n\npynn.setup(timestep=ts, min_delay=ts, max_delay=2.0*ts)\n\n\npop = pynn.Population(size=n_neurons, cellclass=pynn.IF_curr_exp, cellparams={}, label='pop')\n\n\n# The ROS_Spinnaker_Interface just needs to be initialised. The following parameters are possible:\nros_interface = ROS_Spinnaker_Interface(\n        n_neurons_source=n_neurons,                 # number of neurons of the injector population\n        Spike_Source_Class=SpikeSourcePoisson,   # the transfer function ROS Input -> Spikes you want to use.\n        Spike_Sink_Class=SpikeSinkSmoothing,     # the transfer function Spikes -> ROS Output you want to use.\n                                                    # You can choose from the transfer_functions module\n                                                    # or write one yourself.\n        output_population=pop,                      # the pynn population you wish to receive the\n                                                    # live spikes from.\n        ros_topic_send='to_spinnaker',              # the ROS topic used for the incoming ROS values.\n        ros_topic_recv='from_spinnaker',            # the ROS topic used for the outgoing ROS values.\n        clk_rate=1000,                              # mainloop clock (update) rate in Hz.\n        ros_output_rate=10)                         # number of ROS messages send out per second.\n\n# Build your network, run the simulation and optionally record the spikes and voltages.\npynn.Projection(ros_interface, pop, pynn.OneToOneConnector(weights=5, delays=1))\n\n\npop.record()\npop.record_v()\n\npynn.run(simulation_time)\n\nspikes = pop.getSpikes()\n\npynn.end()\n\n# Plot\nimport pylab\n\nspike_times = [spike[1] for spike in spikes]\nspike_ids = [spike[0] for spike in spikes]\n\npylab.plot(spike_times, spike_ids, \".\")\npylab.xlabel('Time (ms)')\npylab.ylabel('Neuron ID')\npylab.title('Spike Plot')\npylab.xlim(xmin=0)\npylab.show()\n",
    "# -*- coding: utf-8 -*-\n\n\"\"\" Resource Import Tools\n\n    @copyright: 2011-12 (c) Sahana Software Foundation\n    @license: MIT\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n\n# @todo: remove all interactive error reporting out of the _private methods, and raise exceptions instead.\n__all__ = [\"S3Importer\", \"S3ImportJob\", \"S3ImportItem\"]\n\nimport os\nimport sys\nimport cPickle\nimport tempfile\nfrom datetime import datetime\nfrom copy import deepcopy\ntry:\n    from cStringIO import StringIO    # Faster, where available\nexcept:\n    from StringIO import StringIO\n\ntry:\n    from lxml import etree\nexcept ImportError:\n    print >> sys.stderr, \"ERROR: lxml module needed for XML handling\"\n    raise\n\ntry:\n    import json # try stdlib (Python 2.6)\nexcept ImportError:\n    try:\n        import simplejson as json # try external module\n    except:\n        import gluon.contrib.simplejson as json # fallback to pure-Python module\n\nfrom gluon import *\nfrom gluon.serializers import json as jsons\nfrom gluon.storage import Storage, Messages\nfrom gluon.tools import callback\n\nfrom s3utils import SQLTABLES3\nfrom s3crud import S3CRUD\nfrom s3xml import S3XML\nfrom s3utils import s3_mark_required, s3_has_foreign_key, s3_get_foreign_key\n\nDEBUG = False\nif DEBUG:\n    print >> sys.stderr, \"S3IMPORTER: DEBUG MODE\"\n    def _debug(m):\n        print >> sys.stderr, m\nelse:\n    _debug = lambda m: None\n\n# =============================================================================\nclass S3Importer(S3CRUD):\n    \"\"\"\n        Transformable formats (XML, JSON, CSV) import handler\n    \"\"\"\n\n    UPLOAD_TABLE_NAME = \"s3_import_upload\"\n\n    # -------------------------------------------------------------------------\n    def apply_method(self, r, **attr):\n        \"\"\"\n            Apply CRUD methods\n\n            @param r: the S3Request\n            @param attr: dictionary of parameters for the method handler\n\n            @returns: output object to send to the view\n\n            ",
    "from __future__ import absolute_import, division, print_function, unicode_literals\nimport string\nimport urllib\ntry:\n    from urllib.parse import urlparse, urlencode, urljoin, parse_qsl, urlunparse\n    from urllib.request import urlopen, Request\n    from urllib.error import HTTPError\nexcept ImportError:\n    from urlparse import urlparse, urljoin, urlunparse, parse_qsl\n    from urllib import urlencode\n    from urllib2 import urlopen, Request, HTTPError\n\nfrom random import SystemRandom\n\ntry:\n    UNICODE_ASCII_CHARACTERS = (string.ascii_letters +\n        string.digits)\nexcept AttributeError:\n    UNICODE_ASCII_CHARACTERS = (string.ascii_letters.decode('ascii') +\n        string.digits.decode('ascii'))\n\n\ndef random_ascii_string(length):\n    random = SystemRandom()\n    return ''.join([random.choice(UNICODE_ASCII_CHARACTERS) for x in range(length)])\n\n\ndef url_query_params(url):\n    \"\"\"Return query parameters as a dict from the specified URL.\n\n    :param url: URL.\n    :type url: str\n    :rtype: dict\n    \"\"\"\n    return dict(parse_qsl(urlparse(url).query, True))\n\n\ndef url_dequery(url):\n    \"\"\"Return a URL with the query component removed.\n\n    :param url: URL to dequery.\n    :type url: str\n    :rtype: str\n    \"\"\"\n    url = urlparse(url)\n    return urlunparse((url.scheme,\n                                url.netloc,\n                                url.path,\n                                url.params,\n                                '',\n                                url.fragment))\n\n\ndef build_url(base, additional_params=None):\n    \"\"\"Construct a URL based off of base containing all parameters in\n    the query portion of base plus any additional parameters.\n\n    :param base: Base URL\n    :type base: str\n    ::param additional_params: Additional query parameters to include.\n    :type additional_params: dict\n    :rtype: str\n    \"\"\"\n    url = urlparse(base)\n    query_params = {}\n    query_params.update(parse_qsl(url.query, True))\n    if additional_params is not None:\n        query_params.update(additional_params)\n        for k, v in additional_params.items():\n            if v is None:\n                query_params.pop(k)\n\n    return urlunparse((url.scheme,\n                                url.netloc,\n                                url.path,\n                                url.params,\n                                urlencode(query_params),\n                                url.fragment))\n",
    "from otp.ai.AIBaseGlobal import *\nimport DistributedCCharBaseAI\nfrom direct.directnotify import DirectNotifyGlobal\nfrom direct.fsm import ClassicFSM, State\nfrom direct.fsm import State\nfrom direct.task import Task\nimport random\nfrom toontown.toonbase import ToontownGlobals\nfrom toontown.toonbase import TTLocalizer\nimport CharStateDatasAI\n\nclass DistributedGoofySpeedwayAI(DistributedCCharBaseAI.DistributedCCharBaseAI):\n    notify = DirectNotifyGlobal.directNotify.newCategory('DistributedGoofySpeedwayAI')\n\n    def __init__(self, air):\n        DistributedCCharBaseAI.DistributedCCharBaseAI.__init__(self, air, TTLocalizer.Goofy)\n        self.fsm = ClassicFSM.ClassicFSM('DistributedGoofySpeedwayAI', [State.State('Off', self.enterOff, self.exitOff, ['Lonely', 'TransitionToCostume', 'Walk']),\n         State.State('Lonely', self.enterLonely, self.exitLonely, ['Chatty', 'Walk', 'TransitionToCostume']),\n         State.State('Chatty', self.enterChatty, self.exitChatty, ['Lonely', 'Walk', 'TransitionToCostume']),\n         State.State('Walk', self.enterWalk, self.exitWalk, ['Lonely', 'Chatty', 'TransitionToCostume']),\n         State.State('TransitionToCostume', self.enterTransitionToCostume, self.exitTransitionToCostume, ['Off'])], 'Off', 'Off')\n        self.fsm.enterInitialState()\n        self.handleHolidays()\n\n    def delete(self):\n        self.fsm.requestFinalState()\n        DistributedCCharBaseAI.DistributedCCharBaseAI.delete(self)\n        self.lonelyDoneEvent = None\n        self.lonely = None\n        self.chattyDoneEvent = None\n        self.chatty = None\n        self.walkDoneEvent = None\n        self.walk = None\n        return\n\n    def generate(self):\n        DistributedCCharBaseAI.DistributedCCharBaseAI.generate(self)\n        name = self.getName()\n        self.lonelyDoneEvent = self.taskName(name + '-lonely-done')\n        self.lonely = CharStateDatasAI.CharLonelyStateAI(self.lonelyDoneEvent, self)\n        self.chattyDoneEvent = self.taskName(name + '-chatty-done')\n        self.chatty = CharStateDatasAI.CharChattyStateAI(self.chattyDoneEvent, self)\n        self.walkDoneEvent = self.taskName(name + '-walk-done')\n        if self.diffPath == None:\n            self.walk = CharStateDatasAI.CharWalkStateAI(self.walkDoneEvent, self)\n        else:\n            self.walk = CharStateDatasAI.CharWalkStateAI(self.walkDoneEvent, self, self.diffPath)\n        return\n\n    def walkSpeed(self):\n        return ToontownGlobals.GoofySpeed\n\n    def start(self):\n        self.fsm.request('Lonely')\n\n    def __decideNextState(self, doneStatus):\n        if self.transitionToCostume == 1:\n            curWalkNode = self.walk.getDestNode()\n            if simbase.air.holidayManager:\n                if ToontownGlobals.HALLOWEEN_COSTUMES in simbase.air.holidayManager.currentHolidays and simbase.air.holidayManager.currentHolidays[ToontownGlobals.HALLOWEEN_COSTUMES]:\n                    simbase.air.holidayManager.currentHolidays[ToontownGlobals.HALLOWEEN_COSTUMES].triggerSwitch(curWalkNode, ",
    "#!/usr/bin/python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom scrapy.spider import Spider\r\nfrom scrapy.selector import Selector\r\n\r\nfrom my_settings import name_file, test_mode, difference_days\r\nfrom datetime import datetime, timedelta\r\n\r\nprint \"Run spider NewenglandFilm\"\r\n\r\nfile_output = open(name_file, 'a')\r\nemail_current_session = []\r\nemail_in_file = open(name_file, 'r').readlines()\r\n\r\nif test_mode:\r\n    current_date = (datetime.today() - timedelta(days=difference_days)).strftime('%m/%d/%Y')\r\nelse:\r\n    current_date = datetime.today().strftime('%m/%d/%Y')\r\n\r\nclass NewenglandFilm(Spider):\r\n    name = 'newenglandfilm'\r\n    allowed_domains = [\"newenglandfilm.com\"]\r\n    start_urls = [\"http://newenglandfilm.com/jobs.htm\"]\r\n\r\n    def parse(self, response):\r\n        sel = Selector(response)\r\n        for num_div in xrange(1, 31):\r\n            date = sel.xpath('//*[@id=\"mainContent\"]/div[{0}]/span/text()'.format(str(num_div))).re('(\\d{1,2}\\/\\d{1,2}\\/\\d{4})')[0]\r\n            email = sel.xpath('//*[@id=\"mainContent\"]/div[{0}]/div/text()'.format(str(num_div))).re('(\\w+@[a-zA-Z0-9_]+?\\.[a-zA-Z]{2,6})')\r\n            if current_date == date:\r\n                for address in email:\r\n                    if address + \"\\n\" not in email_in_file and address not in email_current_session:\r\n                        file_output.write(address + \"\\n\")\r\n                        email_current_session.append(address)\r\n                        print \"Spider: NewenglandFilm. Email {0} added to file\".format(address)\r\n                    else:\r\n                        print \"Spider: NewenglandFilm. Email {0} already in the file\".format(address)",
    "import base64\ntry:\n    from functools import wraps\nexcept ImportError:\n    from django.utils.functional import wraps  # Python 2.3, 2.4 fallback.\n\nfrom django import http, template\nfrom django.conf import settings\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth import authenticate, login\nfrom django.shortcuts import render_to_response\nfrom django.utils.translation import ugettext_lazy, ugettext as _\n\nERROR_MESSAGE = ugettext_lazy(\"Please enter a correct username and password. Note that both fields are case-sensitive.\")\nLOGIN_FORM_KEY = 'this_is_the_login_form'\n\ndef _display_login_form(request, error_message=''):\n    request.session.set_test_cookie()\n    return render_to_response('admin/login.html', {\n        'title': _('Log in'),\n        'app_path': request.get_full_path(),\n        'error_message': error_message\n    }, context_instance=template.RequestContext(request))\n\ndef staff_member_required(view_func):\n    \"\"\"\n    Decorator for views that checks that the user is logged in and is a staff\n    member, displaying the login page if necessary.\n    \"\"\"\n    def _checklogin(request, *args, **kwargs):\n        if request.user.is_authenticated() and request.user.is_staff:\n            # The user is valid. Continue to the admin page.\n            return view_func(request, *args, **kwargs)\n\n        assert hasattr(request, 'session'), \"The Django admin requires session middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.sessions.middleware.SessionMiddleware'.\"\n\n        # If this isn't already the login page, display it.\n        if LOGIN_FORM_KEY not in request.POST:\n            if request.POST:\n                message = _(\"Please log in again, because your session has expired.\")\n            else:\n                message = \"\"\n            return _display_login_form(request, message)\n\n        # Check that the user accepts cookies.\n        if not request.session.test_cookie_worked():\n            message = _(\"Looks like your browser isn't configured to accept cookies. Please enable cookies, reload this page, and try again.\")\n            return _display_login_form(request, message)\n        else:\n            request.session.delete_test_cookie()\n\n        # Check the password.\n        username = request.POST.get('username', None)\n        password = request.POST.get('password', None)\n        user = authenticate(username=username, password=password)\n        if user is None:\n            message = ERROR_MESSAGE\n            if '@' in username:\n                # Mistakenly entered e-mail address instead of username? Look it up.\n                users = list(User.all().filter('email =', username))\n                if len(users) == 1 and users[0].check_password(password):\n                    message = _(\"Your e-mail address is not your username. Try '%s' instead.\") % users[0].username\n                else:\n                    # Either we cannot find the user, or if more than 1\n                    # we cannot guess whi",
    "#guimporter.py\nimport sys\n\nfrom PySide import QtGui, QtCore, QtWebKit\nSignal = QtCore.Signal",
    "# -*- coding: utf-8 -*-\n# @Author: karthik\n# @Date:   2016-12-10 21:40:07\n# @Last Modified by:   chandan\n# @Last Modified time: 2016-12-11 12:55:27\n\nfrom models.portfolio import Portfolio\nfrom models.company import Company\nfrom models.position import Position\n\nimport tenjin\nfrom tenjin.helpers import *\nimport wikipedia\n\nimport matplotlib.pyplot as plt\n\nfrom data_helpers import *\nfrom stock_data import *\n\nimport BeautifulSoup as bs\nimport urllib2\nimport re\n\nfrom datetime import date as dt\n\nengine = tenjin.Engine(path=['templates'])\n\n# info fetch handler\ndef send_info_handler(bot, update, args):\n\targs = list(parse_args(args))\n\tif len(args) == 0 or \"portfolio\" in [arg.lower() for arg in args] :\n\t\tsend_portfolio_info(bot, update)\n\telse:\n\t\tinfo_companies = get_companies(args)\n\t\tsend_companies_info(bot, update, info_companies)\n\n\n# get portfolio function\ndef send_portfolio_info(bot, update):\n\tprint \"Userid: %d requested portfolio information\" %(update.message.chat_id)\n\tcontext = {\n\t'positions': Portfolio.instance.positions,\n    'wallet_value': Portfolio.instance.wallet_value,\n\t}\n\thtml_str = engine.render('portfolio_info.pyhtml', context)\n\tbot.sendMessage(parse_mode=\"HTML\", chat_id=update.message.chat_id, text=html_str)\n\n# get companies information\ndef send_companies_info(bot, update, companies):\n\tprint \"Userid: requested information for following companies %s\" %','.join([c.name for c in companies])\n\n\tfor company in companies:\n\t\tcontext = {\n\t\t'company': company,\n\t\t'current_price': get_current_price(company),\n\t\t'description': wikipedia.summary(company.name.split()[0], sentences=2)\n\t\t}\n\n\t\twiki_page = wikipedia.page(company.name.split()[0])\n\t\thtml_page = urllib2.urlopen(wiki_page.url)\n\t\tsoup = bs.BeautifulSoup(html_page)\n\t\timg_url = 'http:' + soup.find('td', { \"class\" : \"logo\" }).find('img')['src']\n\t\tbot.sendPhoto(chat_id=update.message.chat_id, photo=img_url)\n\n\t\thtml_str = engine.render('company_template.pyhtml', context)\n\t\tbot.sendMessage(parse_mode=\"HTML\", chat_id=update.message.chat_id, text=html_str)\n\n\tsymbols = [c.symbol for c in companies]\n\tif len(symbols) >= 2:\n\t\tsymbol_string = \", \".join(symbols[:-1]) + \" and \" + symbols[-1]\n\telse:\n\t\tsymbol_string = symbols[0]\n\n\tlast_n_days = 10\n\n\tif len(companies) < 4:\n\t\tcreate_graph(companies, last_n_days)\n\t\thistory_text = '''\n\t\t\tHere's the price history for {} for the last {} days\n\t\t'''.format(symbol_string, last_n_days)\n\n\t\tbot.sendMessage(chat_id=update.message.chat_id, text=history_text)\n\t\tbot.sendPhoto(chat_id=update.message.chat_id, photo=open(\"plots/temp.png\",'rb'))\n\ndef create_graph(companies, timedel):\n\n\tfig, ax = plt.subplots()\n\tfor company in companies:\n\t\tdates, lookback_prices = get_lookback_prices(company, timedel)\n\t\t# dates = [i.strftime('%d/%m') for i in dates]\n\t\th = ax.plot(dates, lookback_prices, label=company.symbol)\n\n\tax.legend()\n\tplt.xticks(rotation=45)\n\tplt.savefig('plots/temp.png')\n\n",
    "#!/usr/bin/python\nfrom typing import List, Optional\n\n\n\"\"\"\n16. 3Sum Closest\n\nhttps://leetcode.com/problems/3sum-closest/\n\"\"\"\n\n\ndef bsearch(nums, left, right, res, i, j, target):\n    while left <= right:\n        middle = (left + right) // 2\n        candidate = nums[i] + nums[j] + nums[middle]\n        if res is None or abs(candidate - target) < abs(res - target):\n            res = candidate\n        if candidate == target:\n            return res\n        elif candidate > target:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return res\n\n\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> Optional[int]:\n        res = None\n        nums = sorted(nums)\n\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                res = bsearch(nums, j + 1, len(nums) - 1, res, i, j, target)\n        return res\n\n\ndef main():\n    sol = Solution()\n    print(sol.threeSumClosest([-111, -111, 3, 6, 7, 16, 17, 18, 19], 13))\n    return 0\n\n\nif __name__ == '__main__':\n    raise SystemExit(main())\n",
    "from multiprocessing import Pool\n\nimport os, time, random\n\n\ndef long_time_task(name):\n    print 'Run task %s (%s)...' % (name, os.getpid())\n    start = time.time()\n    time.sleep(random.random() * 3)\n    end = time.time()\n    print 'Task %s runs %0.2f seconds.' % (name, (end - start))\n\n\nif __name__ == '__main__':\n    print 'Parent process %s.' % os.getpid()\n    p = Pool()\n\n    for i in range(5):\n        p.apply_async(long_time_task, args=(i,))\n    print 'Waiting for all subprocesses done...'\n    p.close()\n    p.join()\n    print 'All subprocesses done.'\n    \"\"\"\n    \u4ee3\u7801\u89e3\u8bfb\uff1a\n\n    \u5bf9Pool\u5bf9\u8c61\u8c03\u7528join()\u65b9\u6cd5\u4f1a\u7b49\u5f85\u6240\u6709\u5b50\u8fdb\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u8c03\u7528join()\u4e4b\u524d\u5fc5\u987b\u5148\u8c03\u7528close()\uff0c\u8c03\u7528close()\u4e4b\u540e\u5c31\u4e0d\u80fd\u7ee7\u7eed\u6dfb\u52a0\u65b0\u7684Process\u4e86\u3002\n\n    \u8bf7\u6ce8\u610f\u8f93\u51fa\u7684\u7ed3\u679c\uff0ctask 0\uff0c1\uff0c2\uff0c3\u662f\u7acb\u523b\u6267\u884c\u7684\uff0c\u800ctask 4\u8981\u7b49\u5f85\u524d\u9762\u67d0\u4e2atask\u5b8c\u6210\u540e\u624d\u6267\u884c\uff0c\u8fd9\u662f\u56e0\u4e3aPool\u7684\u9ed8\u8ba4\u5927\u5c0f\u5728\u6211\u7684\u7535\u8111\u4e0a\u662f4\uff0c\u56e0\u6b64\uff0c\u6700\u591a\u540c\u65f6\u6267\u884c4\u4e2a\u8fdb\u7a0b\u3002\u8fd9\u662fPool\u6709\u610f\u8bbe\u8ba1\u7684\u9650\u5236\uff0c\u5e76\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u9650\u5236\u3002\u5982\u679c\u6539\u6210\uff1a\n\n    p = Pool(5)\n    \"\"\"",
    "# coding: utf-8\n\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\n\nimport pytest\n\nfrom os import path, remove, sys, urandom\nimport platform\nimport uuid\nfrom azure.storage.blob import (\n    BlobServiceClient,\n    ContainerClient,\n    BlobClient,\n    ContentSettings\n)\n\nif sys.version_info >= (3,):\n    from io import BytesIO\nelse:\n    from cStringIO import StringIO as BytesIO\n\nfrom settings.testcase import BlobPreparer\nfrom devtools_testutils.storage import StorageTestCase\n\n# ------------------------------------------------------------------------------\nTEST_BLOB_PREFIX = 'largeblob'\nLARGE_BLOB_SIZE = 12 * 1024 * 1024\nLARGE_BLOCK_SIZE = 6 * 1024 * 1024\n\n# ------------------------------------------------------------------------------\nif platform.python_implementation() == 'PyPy':\n    pytest.skip(\"Skip tests for Pypy\", allow_module_level=True)\n\nclass StorageLargeBlockBlobTest(StorageTestCase):\n    def _setup(self, storage_account_name, key):\n        # test chunking functionality by reducing the threshold\n        # for chunking and the size of each chunk, otherwise\n        # the tests would take too long to execute\n        self.bsc = BlobServiceClient(\n            self.account_url(storage_account_name, \"blob\"),\n            credential=key,\n            max_single_put_size=32 * 1024,\n            max_block_size=2 * 1024 * 1024,\n            min_large_block_upload_threshold=1 * 1024 * 1024)\n        self.config = self.bsc._config\n        self.container_name = self.get_resource_name('utcontainer')\n\n        if self.is_live:\n            try:\n                self.bsc.create_container(self.container_name)\n            except:\n                pass\n\n    def _teardown(self, file_name):\n        if path.isfile(file_name):\n            try:\n                remove(file_name)\n            except:\n                pass\n\n    # --Helpers-----------------------------------------------------------------\n    def _get_blob_reference(self):\n        return self.get_resource_name(TEST_BLOB_PREFIX)\n\n    def _create_blob(self):\n        blob_name = self._get_blob_reference()\n        blob = self.bsc.get_blob_client(self.container_name, blob_name)\n        blob.upload_blob(b'')\n        return blob\n\n    def assertBlobEqual(self, container_name, blob_name, expected_data):\n        blob = self.bsc.get_blob_client(container_name, blob_name)\n        actual_data = blob.download_blob()\n        self.assertEqual(b\"\".join(list(actual_data.chunks())), expected_data)\n\n    # --Test cases for block blobs --------------------------------------------\n    @pytest.mark.live_test_only\n    @BlobPreparer()\n    def test_put_block_bytes_large(self, storage_account_name, storage_account_key):\n        self._setup(storage_account_name, storage_account_key)\n     ",
    "# This file is part of Indico.\n# Copyright (C) 2002 - 2021 CERN\n#\n# Indico is free software; you can redistribute it and/or\n# modify it under the terms of the MIT License; see the\n# LICENSE file for more details.\n\nimport os\nimport re\nimport subprocess\nimport sys\nfrom datetime import date\n\nimport click\nimport yaml\n\nfrom indico.util.console import cformat\n\n\n# Dictionary listing the files for which to change the header.\n# The key is the extension of the file (without the dot) and the value is another\n# dictionary containing two keys:\n#   - 'regex' : A regular expression matching comments in the given file type\n#   - 'format': A dictionary with the comment characters to add to the header.\n#               There must be a `comment_start` inserted before the header,\n#               `comment_middle` inserted at the beginning of each line except the\n#               first and last one, and `comment_end` inserted at the end of the\n#               header. (See the `HEADER` above)\nSUPPORTED_FILES = {\n    'py': {\n        'regex': re.compile(r'((^#|[\\r\\n]#).*)*'),\n        'format': {'comment_start': '#', 'comment_middle': '#', 'comment_end': ''}},\n    'wsgi': {\n        'regex': re.compile(r'((^#|[\\r\\n]#).*)*'),\n        'format': {'comment_start': '#', 'comment_middle': '#', 'comment_end': ''}},\n    'js': {\n        'regex': re.compile(r'/\\*(.|[\\r\\n])*?\\*/|((^//|[\\r\\n]//).*)*'),\n        'format': {'comment_start': '//', 'comment_middle': '//', 'comment_end': ''}},\n    'jsx': {\n        'regex': re.compile(r'/\\*(.|[\\r\\n])*?\\*/|((^//|[\\r\\n]//).*)*'),\n        'format': {'comment_start': '//', 'comment_middle': '//', 'comment_end': ''}},\n    'css': {\n        'regex': re.compile(r'/\\*(.|[\\r\\n])*?\\*/'),\n        'format': {'comment_start': '/*', 'comment_middle': ' *', 'comment_end': ' */'}},\n    'scss': {\n        'regex': re.compile(r'/\\*(.|[\\r\\n])*?\\*/|((^//|[\\r\\n]//).*)*'),\n        'format': {'comment_start': '//', 'comment_middle': '//', 'comment_end': ''}},\n}\n\n\n# The substring which must be part of a comment block in order for the comment to be updated by the header.\nSUBSTRING = 'This file is part of'\n\n\nUSAGE = '''\nUpdates all the headers in the supported files ({supported_files}).\nBy default, all the files tracked by git in the current repository are updated\nto the current year.\n\nYou can specify a year to update to as well as a file or directory.\nThis will update all the supported files in the scope including those not tracked\nby git. If the directory does not contain any supported files (or if the file\nspecified is not supported) nothing will be updated.\n'''.format(supported_files=', '.join(SUPPORTED_FILES)).strip()\n\n\ndef _walk_to_root(path):\n    \"\"\"Yield directories starting from the given directory up to the root.\"\"\"\n    # Based on code from python-dotenv (BSD-licensed):\n    # https://github.com/theskumar/python-dotenv/blob/e13d957b/src/dotenv/main.py#L245\n\n    if os.path.isfile(path):\n        path = os.path.dirname(path)\n\n    last_dir = None\n    current_dir = o",
    "from django.shortcuts import redirect\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.http import HttpResponse\nfrom paste.models import Paste, Language\n\n@csrf_exempt \ndef add(request):\n    print \"jojo\"\n    \n    if request.method == 'POST':\n        language = request.POST['language']\n        content = request.POST['content']\n\n        try:\n            lang = Language.objects.get(pk=language)\n        except:\n            print \"lang not avalible\", language\n            lang = Language.objects.get(pk='txt')\n   \n        paste = Paste(content=content, language=lang)\n        paste.save()\n        paste = Paste.objects.latest()\n        return HttpResponse(paste.pk, content_type='text/plain')\n    else:\n        return redirect('/api')\n",
    "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"wellspring.settings\")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n",
    "class Sprite(object):\n    \n    def __init__(self, xPos, yPos):\n        self.x = xPos\n        self.y = yPos\n        self.th = 32\n        self.tw = 32\n    \n    def checkCollision(self, otherSprite):\n        if (self.x < otherSprite.x + otherSprite.tw and otherSprite.x < self.x + self.tw\n            and self.y < otherSprite.y + otherSprite.th and otherSprite.y < self.y + self.th):\n            return True\n        else:\n            return False\n\nclass Actor(Sprite):\n    \n    def __init__(self, xPos, yPos):\n        super(Actor, self).__init__(xPos, yPos)\n        self.speed = 5\n        self.dy = 0\n        self.d = 3\n        self.dir = \"right\"\n        # self.newdir = \"right\"\n        self.state = \"standing\"\n        self.walkR = []\n        self.walkL = []\n    \n    def loadPics(self):\n        self.standing = loadImage(\"gripe_stand.png\")\n        self.falling = loadImage(\"grfalling.png\")\n        for i in range(8):\n            imageName = \"gr\" + str(i) + \".png\"\n            self.walkR.append(loadImage(imageName))\n        for i in range(8):\n            imageName = \"gl\" + str(i) + \".png\"\n            self.walkL.append(loadImage(imageName))\n            \n    def checkWall(self, wall):\n        if wall.state == \"hidden\":\n            if (self.x >= wall.x - self.d and\n                    (self.x + 32 <= wall.x + 32 + self.d)):\n                return False\n    \n    def move(self):\n        if self.dir == \"right\":\n            if self.state == \"walking\":\n                self.im = self.walkR[frameCount % 8]\n                self.dx = self.speed\n            elif self.state == \"standing\":\n                self.im = self.standing\n                self.dx = 0\n            elif self.state == \"falling\":\n                self.im = self.falling\n                self.dx = 0\n                self.dy = 5\n        elif self.dir == \"left\":\n            if self.state == \"walking\":\n                self.im = self.walkL[frameCount % 8]\n                self.dx = -self.speed\n            elif self.state == \"standing\":\n                self.im = self.standing\n                self.dx = 0\n            elif self.state == \"falling\":\n                self.im = self.falling\n                self.dx = 0\n                self.dy = 5\n        else:\n            self.dx = 0\n        self.x += self.dx\n        self.y += self.dy\n\n        if self.x <= 0:\n            self.x = 0\n        if self.x >= 640 - self.tw:\n            self.x = 640 -self.tw\n    \n    def display(self):\n        image(self.im, self.x, self.y)\n\n\nclass Block(Sprite):\n    \n    def __init__(self, xPos, yPos):\n        super(Block, self).__init__(xPos, yPos)\n        self.state = \"visible\"\n    \n    def loadPics(self):\n        self.im = loadImage(\"block.png\")\n    \n    def display(self):\n        if self.state == \"visible\":\n            image(self.im, self.x, self.y)\n        \n",
    "# -*- coding: utf-8 -*-\nimport unittest\nfrom hanspell import spell_checker\nfrom hanspell.constants import CheckResult\nfrom textwrap import dedent as trim\n\n\nclass SpellCheckerTests(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def test_basic_check(self):\n        result = spell_checker.check(u'\uc548\ub155 \ud558\uc138\uc694. \uc800\ub294 \ud55c\uad6d\uc778 \uc785\ub2c8\ub2e4. \uc774\ubb38\uc7a5\uc740 \ud55c\uae00\ub85c \uc791\uc131\ub42c\uc2b5\ub2c8\ub2e4.')\n\n        assert result.errors == 4\n        assert result.checked == u'\uc548\ub155\ud558\uc138\uc694. \uc800\ub294 \ud55c\uad6d\uc778\uc785\ub2c8\ub2e4. \uc774 \ubb38\uc7a5\uc740 \ud55c\uae00\ub85c \uc791\uc131\ub410\uc2b5\ub2c8\ub2e4.'\n\n    def test_words(self):\n        result = spell_checker.check(u'\ud55c\uc544\uc774\uac00 \uc7a5\ub09c\uae5c\uc744 \uac16\uace0\ub180\uace0\uc788\ub2e4. \uadf8\ub9cc\ud558\uac8c \ud560\uac00?')\n        assert result.errors == 4\n        \n        items = result.words\n        assert items[u'\ud55c'] == CheckResult.WRONG_SPACING\n        assert items[u'\uc544\uc774\uac00'] == CheckResult.WRONG_SPACING\n        assert items[u'\uc7a5\ub09c\uac10\uc744'] == CheckResult.STATISTICAL_CORRECTION\n        assert items[u'\uac16\uace0'] == CheckResult.WRONG_SPACING\n        assert items[u'\ub180\uace0'] == CheckResult.WRONG_SPACING\n        assert items[u'\uc788\ub2e4.'] == CheckResult.WRONG_SPACING\n        assert items[u'\uadf8\ub9cc\ud558\uac8c'] == CheckResult.PASSED\n        assert items[u'\ud560\uae4c?'] == CheckResult.WRONG_SPELLING\n\n    def test_list(self):\n        results = spell_checker.check([u'\uc548\ub155 \ud558\uc138\uc694.', u'\uc800\ub294 \ud55c\uad6d\uc778 \uc785\ub2c8\ub2e4.'])\n        assert results[0].checked == u'\uc548\ub155\ud558\uc138\uc694.'\n        assert results[1].checked == u'\uc800\ub294 \ud55c\uad6d\uc778\uc785\ub2c8\ub2e4.'\n\n    def test_long_paragraph(self):\n        paragraph = trim(\"\"\"\n        ubit.info(\uc720\ube57\uc778\ud3ec)\ub294 \ucf54\ub098\ubbf8 \ub9ac\ub4ec\uac8c\uc784, \uc720\ube44\ud2b8\uc758 \ud50c\ub808\uc774 \ub370\uc774\ud130 \uad00\ub9ac \ubc0f \uc5f4\ub78c \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. \ub4f1\ub85d \ud6c4\uc5d0 \uc790\uc2e0\uacfc \uce5c\uad6c\uc758 \uae30\ub85d\uc744 p.eagate.573.jp\uc5d0 \uc811\uc18d\ud560 \ud544\uc694 \uc5c6\uc774 \ubcf8 \uc6f9 \uc0ac\uc774\ud2b8\uc5d0\uc11c \ubc14\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n        \ub4f1\ub85d \ud6c4\uc5d0\ub294 \"https://ubit.info/\ubcc4\uce6d\"\uc73c\ub85c \uc790\uc2e0\uc758 \uac1c\uc778 \ud398\uc774\uc9c0\uac00 \uc0dd\uc131\ub418\uba70 \uc774 \uc8fc\uc18c(\ubcc4\uce6d)\ub97c \uc544\ub294 \uc0ac\ub78c\ub9cc \uc811\uc18d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \uce5c\uad6c\uc5d0\uac8c \uae30\ub85d\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc2f6\ub2e4\uba74 \ubcf8\uc778\uc758 \uc778\ud3ec \uc8fc\uc18c\ub97c \uc54c\ub824\uc8fc\uba74 \ub429\ub2c8\ub2e4.\n        \uc774 \uc0ac\uc774\ud2b8\ub294 \ucd5c\uc2e0 \ube0c\ub77c\uc6b0\uc800 \ud658\uacbd\ub9cc\uc744 \uc81c\ub300\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ub9cc\uc57d \ud06c\ub86c, \ud30c\uc774\uc5b4\ud3ed\uc2a4 \ub4f1\uc758 \ucd5c\uc2e0 \ube0c\ub77c\uc6b0\uc800 \uc548\uc815\ubc84\uc804(stable)\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\ub370\ub3c4 \ud398\uc774\uc9c0 \ub808\uc774\uc544\uc6c3\uc774 \uae68\uc9c0\ub294 \uacbd\uc6b0 \uc0ac\uc774\ud2b8 \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud574\uc8fc\uc138\uc694.\n        \ub4f1\ub85d \uacfc\uc815\uc740 \uac04\ub2e8\ud569\ub2c8\ub2e4. \uc0c1\ub2e8 \uba54\ub274\uc5d0\uc11c \ub4f1\ub85d\uc744 \ud074\ub9ad\ud55c \ud6c4 \uc591\uc2dd\uc5d0 \ub9de\uac8c \uc785\ub825\ud558\uc2dc\uba74 \uc790\ub3d9\uc73c\ub85c \uacf5\uac1c\uc124\uc815\uc774 \uc644\ub8cc\ub428\uacfc \ub3d9\uc2dc\uc5d0 \uc720\ube57\uc778\ud3ec \uacc4\uc815\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4.\n        \"\"\")\n\n        result = spell_checker.check(paragraph)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "__author__ = 'brianoneill'\n\nfrom log_calls import log_calls\n\nglobal_settings = dict(\n    log_call_numbers=True,\n    log_exit=False,\n    log_retval=True,\n)\nlog_calls.set_defaults(global_settings, args_sep=' $ ')\n",
    "\"\"\"\nGiven a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not\nunary) +, -, or * between the digits so they evaluate to the target value.\n\nExamples:\n\"123\", 6 -> [\"1+2+3\", \"1*2*3\"]\n\"232\", 8 -> [\"2*3+2\", \"2+3*2\"]\n\"105\", 5 -> [\"1*0+5\",\"10-5\"]\n\"00\", 0 -> [\"0+0\", \"0-0\", \"0*0\"]\n\"3456237490\", 9191 -> []\n\"\"\"\n__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        Adapted from https://leetcode.com/discuss/58614/java-standard-backtrace-ac-solutoin-short-and-clear\n\n        Algorithm:\n        1. DFS\n        2. Special handling for multiplication\n        3. Detect invalid number with leading 0's\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        ret = []\n        self.dfs(num, target, 0, \"\", 0, 0, ret)\n        return ret\n\n    def dfs(self, num, target, pos, cur_str, cur_val, mul, ret):\n        if pos >= len(num):\n            if cur_val == target:\n                ret.append(cur_str)\n        else:\n            for i in xrange(pos, len(num)):\n                if i != pos and num[pos] == \"0\":\n                    continue\n                nxt_val = int(num[pos:i+1])\n\n                if not cur_str:\n                    self.dfs(num, target, i+1, \"%d\"%nxt_val, nxt_val, nxt_val, ret)\n                else:\n                    self.dfs(num, target, i+1, cur_str+\"+%d\"%nxt_val, cur_val+nxt_val, nxt_val, ret)\n                    self.dfs(num, target, i+1, cur_str+\"-%d\"%nxt_val, cur_val-nxt_val, -nxt_val, ret)\n                    self.dfs(num, target, i+1, cur_str+\"*%d\"%nxt_val, cur_val-mul+mul*nxt_val, mul*nxt_val, ret)\n\n\nif __name__ == \"__main__\":\n    assert Solution().addOperators(\"232\", 8) == [\"2+3*2\", \"2*3+2\"]\n",
    "from django.contrib import admin\n\nfrom .models import Question\n\n\n# Register your models here.\nadmin.site.register(Question)\n\n\n",
    "from django.conf.urls import patterns, include, url\n\nimport views\n\nurlpatterns = patterns('',\n    url(r'^logout', views.logout, name='logout'),\n    url(r'^newUser', views.newUser, name='newUser'),\n    url(r'^appHandler', views.appHandler, name='appHandler'),\n    url(r'^passToLogin', views.loginByPassword, name='passToLogin'),\n    url(r'^signToLogin', views.loginBySignature, name='signToLogin'),\n    url(r'^authUserHandler', views.authUserHandler, name='authUserHandler'),\n)\n",
    "import sys\n\nimport pytest\n\nfrom opentracing.ext import tags\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom opentracing_instrumentation.client_hooks import mysqldb as mysqldb_hooks\nfrom opentracing_instrumentation.request_context import span_in_context\nfrom .sql_common import metadata, User\n\n\nSKIP_REASON_PYTHON_3 = 'MySQLdb is not compatible with Python 3'\nSKIP_REASON_CONNECTION = 'MySQL is not running or cannot connect'\nMYSQL_CONNECTION_STRING = 'mysql://root@127.0.0.1/test'\n\n\n@pytest.fixture\ndef session():\n    Session = sessionmaker()\n    engine = create_engine(MYSQL_CONNECTION_STRING)\n    Session.configure(bind=engine)\n    metadata.create_all(engine)\n    try:\n        yield Session()\n    except:\n        pass\n\n\n@pytest.fixture(autouse=True, scope='module')\ndef patch_sqlalchemy():\n    mysqldb_hooks.install_patches()\n    try:\n        yield\n    finally:\n        mysqldb_hooks.reset_patches()\n\n\ndef is_mysql_running():\n    try:\n        import MySQLdb\n        with MySQLdb.connect(host='127.0.0.1', user='root'):\n            pass\n        return True\n    except:\n        return False\n\n\ndef assert_span(span, operation, parent=None):\n    assert span.operation_name == 'MySQLdb:' + operation\n    assert span.tags.get(tags.SPAN_KIND) == tags.SPAN_KIND_RPC_CLIENT\n    if parent:\n        assert span.parent_id == parent.context.span_id\n        assert span.context.trace_id == parent.context.trace_id\n    else:\n        assert span.parent_id is None\n\n\n@pytest.mark.skipif(not is_mysql_running(), reason=SKIP_REASON_CONNECTION)\n@pytest.mark.skipif(sys.version_info.major == 3, reason=SKIP_REASON_PYTHON_3)\ndef test_db(tracer, session):\n    root_span = tracer.start_span('root-span')\n\n    # span recording works for regular operations within a context only\n    with span_in_context(root_span):\n        user = User(name='user', fullname='User', password='password')\n        session.add(user)\n        session.commit()\n\n    spans = tracer.recorder.get_spans()\n    assert len(spans) == 4\n\n    connect_span, insert_span, commit_span, rollback_span = spans\n    assert_span(connect_span, 'Connect')\n    assert_span(insert_span, 'INSERT', root_span)\n    assert_span(commit_span, 'commit', root_span)\n    assert_span(rollback_span, 'rollback', root_span)\n",
    "# -*- coding: utf-8 -*-\nimport datetime\nfrom south.db import db\nfrom south.v2 import SchemaMigration\nfrom django.db import models\n\n\nclass Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        # Deleting model 'Participant'\n        db.delete_table(u'pa_participant')\n\n        # Removing M2M table for field user on 'Participant'\n        db.delete_table('pa_participant_user')\n\n        # Adding M2M table for field user on 'ReportingPeriod'\n        db.create_table(u'pa_reportingperiod_user', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('reportingperiod', models.ForeignKey(orm[u'pa.reportingperiod'], null=False)),\n            ('user', models.ForeignKey(orm[u'pa.user'], null=False))\n        ))\n        db.create_unique(u'pa_reportingperiod_user', ['reportingperiod_id', 'user_id'])\n\n\n    def backwards(self, orm):\n        # Adding model 'Participant'\n        db.create_table(u'pa_participant', (\n            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n            ('reporting_period', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['pa.ReportingPeriod'])),\n        ))\n        db.send_create_signal(u'pa', ['Participant'])\n\n        # Adding M2M table for field user on 'Participant'\n        db.create_table(u'pa_participant_user', (\n            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n            ('participant', models.ForeignKey(orm[u'pa.participant'], null=False)),\n            ('user', models.ForeignKey(orm[u'pa.user'], null=False))\n        ))\n        db.create_unique(u'pa_participant_user', ['participant_id', 'user_id'])\n\n        # Removing M2M table for field user on 'ReportingPeriod'\n        db.delete_table('pa_reportingperiod_user')\n\n\n    models = {\n        u'auth.group': {\n            'Meta': {'object_name': 'Group'},\n            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u\"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n        },\n        u'auth.permission': {\n            'Meta': {'ordering': \"(u'content_type__app_label', u'content_type__model', u'codename')\", 'unique_together': \"((u'content_type', u'codename'),)\", 'object_name': 'Permission'},\n            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u\"orm['contenttypes.ContentType']\"}),\n            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n        },\n        u'contenttypes.contenttype': {\n            'Meta': {'ordering': \"('name',)\", 'unique_together': \"(('app_label', 'model'),)\"",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\nAdvent of Code 2015 from http://adventofcode.com/2015/day/5\nAuthor: James Walker\nCopyrighted 2017 under the MIT license:\n  http://www.opensource.org/licenses/mit-license.php\nExecution:\n  python advent_of_code_2015_day_05.py\n\n--- Day 5: Doesn't He Have Intern-Elves For This? ---\n\n  Santa needs help figuring out which strings in his text file are naughty or\n  nice.\n  \n  A nice string is one with all of the following properties:\n    It contains at least three vowels (aeiou only), like aei, xazegov, or \n      aeiouaeiouaeiou.\n    It contains at least one letter that appears twice in a row, like xx,\n      abcdde (dd), or aabbccdd (aa, bb, cc, or dd).\n    It does not contain the strings ab, cd, pq, or xy, even if they are part of\n      one of the other requirements.\n\n  For example:\n    ugknbfddgicrmopn is nice because it has at least three vowels\n      (u...i...o...), a double letter (...dd...), and none of the disallowed\n      substrings.\n    aaa is nice because it has at least three vowels and a double letter, even\n      though the letters used by different rules overlap.\n    jchzalrnumimnmhp is naughty because it has no double letter.\n    haegwjzuvuyypxyu is naughty because it contains the string xy.\n    dvszwmarrgswjxmb is naughty because it contains only one vowel.\n\n  How many strings are nice?\n    Answer: 258\n\n--- Day 5: Part Two ---\n\n  Realizing the error of his ways, Santa has switched to a better model of\n  determining whether a string is naughty or nice. None of the old rules apply,\n  as they are all clearly ridiculous. Now, a nice string is one with all of the\n  following properties:\n\n    It contains a pair of any two letters that appears at least twice in the\n      string without overlapping, like xyxy (xy) or aabcdefgaa (aa), but not\n      like aaa (aa, but it overlaps).\n    It contains at least one letter which repeats with exactly one letter\n      between them, like xyx, abcdefeghi (efe), or even aaa.\n\n  For example:\n    qjhvhtzxzqqjkmpb is nice because is has a pair that appears twice (qj) and\n      a letter that repeats with exactly one letter between them (zxz).\n    xxyxx is nice because it has a pair that appears twice and a letter that\n      repeats with one between, even though the letters used by each rule\n      overlap.\n    uurcxstgmygtbstg is naughty because it has a pair (tg) but no repeat with a\n      single letter between them.\n    ieodomkazucvgmuy is naughty because it has a repeating letter with one\n      between (odo), but no pair that appears twice.\n\n  How many strings are nice under these new rules?\n    Answer: 53\n\"\"\"\n\n\nimport collections\nimport os\nimport re\nimport sys\n\n\nTestCase = collections.namedtuple('TestCase', 'input expected1 expected2')\n\n\nclass Advent_Of_Code_2015_Solver_Day05(object):\n    \"\"\"Advent of Code 2015 Day 5: Doesn't He Have Intern-Elves For This?\"\"\"\n\n    def __init__(self, file_name=None):\n        self._file_name = file_name\n        self._puzzle_input ",
    "#!/bin/env/python\n# coding: utf-8\n\nimport logging\nimport os\nimport time\nimport uuid\nfrom logging import Formatter\nfrom logging.handlers import RotatingFileHandler\nfrom multiprocessing import Queue\nfrom time import strftime\n\nimport dill\n\nfrom .commands import *\nfrom .processing import MultiprocessingLogger\n\n\nclass TaskProgress(object):\n    \"\"\"\n    Holds both data and graphics-related information for a task's progress bar.\n    The logger will iterate over TaskProgress objects to draw progress bars on screen.\n    \"\"\"\n\n    def __init__(self,\n                 total,\n                 prefix='',\n                 suffix='',\n                 decimals=0,\n                 bar_length=60,\n                 keep_alive=False,\n                 display_time=False):\n        \"\"\"\n        Creates a new progress bar using the given information.\n        :param total:                       The total number of iteration for this progress bar.\n        :param prefix:                      [Optional] The text that should be displayed at the left side of the\n                                            progress bar. Note that progress bars will always stay left-aligned at the\n                                            shortest possible.\n        :param suffix:                      [Optional] The text that should be displayed at the very right side of the\n                                            progress bar.\n        :param decimals:                    [Optional] The number of decimals to display for the percentage.\n        :param bar_length:                  [Optional] The graphical bar size displayed on screen. Unit is character.\n        :param keep_alive:                  [Optional] Specify whether the progress bar should stay displayed forever\n                                            once completed or if it should vanish.\n        :param display_time:                [Optional] Specify whether the duration since the progress has begun should\n                                            be displayed. Running time will be displayed between parenthesis, whereas it\n                                            will be displayed between brackets when the progress has completed.\n        \"\"\"\n        super(TaskProgress, self).__init__()\n\n        self.progress = 0\n\n        # Minimum number of seconds at maximum completion before a progress bar is removed from display\n        # The progress bar may vanish at a further time as the redraw rate depends upon chrono AND method calls\n        self.timeout_chrono = None\n        self.begin_time = None\n        self.end_time = None\n        self.elapsed_time_at_end = None\n\n        # Graphics related information\n        self.keep_alive = keep_alive\n        self.display_time = display_time\n\n        self.total = total\n        self.prefix = prefix\n        self.suffix = suffix\n        self.decimals = decimals\n        self.bar_length = bar_length\n\n    def set_progress(self, progress):\n        \"\"\"\n        Defines the current progress for this progress ",
    "from simtk.openmm import app\nimport simtk.openmm as mm\nfrom simtk import unit\n\ndef findForce(system, forcetype, add=True):\n  \"\"\" Finds a specific force in the system force list - added if not found.\"\"\"\n  for force in system.getForces():\n    if isinstance(force, forcetype):\n      return force\n  if add==True:\n    system.addForce(forcetype())\n    return findForce(system, forcetype)\n  return None\n\ndef setGlobalForceParameter(force, key, value):\n  for i in range(force.getNumGlobalParameters()):\n    if force.getGlobalParameterName(i)==key:\n      print('setting force parameter', key, '=', value)\n      force.setGlobalParameterDefaultValue(i, value);\n\ndef atomIndexInResidue(residue):\n  \"\"\" list of atom index in residue \"\"\"\n  index=[]\n  for a in list(residue.atoms()):\n    index.append(a.index)\n  return index\n\ndef getResiduePositions(residue, positions):\n  \"\"\" Returns array w. atomic positions of residue \"\"\"\n  ndx = atomIndexInResidue(residue)\n  return np.array(positions)[ndx]\n\ndef uniquePairs(index):\n  \"\"\" list of unique, internal pairs \"\"\"\n  return list(combinations( range(index[0],index[-1]+1),2 ) )\n\ndef addHarmonicConstraint(harmonicforce, pairlist, positions, threshold, k):\n  \"\"\" add harmonic bonds between pairs if distance is smaller than threshold \"\"\"\n  print('Constraint force constant =', k)\n  for i,j in pairlist:\n    distance = unit.norm( positions[i]-positions[j] )\n    if distance<threshold:\n      harmonicforce.addBond( i,j,\n          distance.value_in_unit(unit.nanometer),\n          k.value_in_unit( unit.kilojoule/unit.nanometer**2/unit.mole ))\n      print(\"added harmonic bond between\", i, j, 'with distance',distance)\n\ndef addExclusions(nonbondedforce, pairlist):\n  \"\"\" add nonbonded exclusions between pairs \"\"\"\n  for i,j in pairlist:\n    nonbondedforce.addExclusion(i,j)\n\ndef rigidifyResidue(residue, harmonicforce, positions, nonbondedforce=None,\n    threshold=6.0*unit.angstrom, k=2500*unit.kilojoule/unit.nanometer**2/unit.mole):\n  \"\"\" make residue rigid by adding constraints and nonbonded exclusions \"\"\"\n  index    = atomIndexInResidue(residue)\n  pairlist = uniquePairs(index)\n  addHarmonicConstraint(harmonic, pairlist, pdb.positions, threshold, k)\n  if nonbondedforce is not None:\n    for i,j in pairlist:\n      print('added nonbonded exclusion between', i, j)\n      nonbonded.addExclusion(i,j)\n\n",
    "from array import array\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score, roc_curve\n\nfrom sklearn import tree\nimport cPickle\n\ndata = np.load('/Users/musthero/Documents/Yura/Applications/tmva_local/output_electrons_fullsim_v5_VeryTightLH_20per.npz')\n\n# Train on the first 2000, test on the rest\nX_train, y_train = data['data_training'], data['isprompt_training'].ravel()\nX_test, y_test = data['data_testing'][0:1000], data['isprompt_testing'][0:1000].ravel()\n\n# sklearn\ndt = DecisionTreeClassifier(max_depth=3,\n                            min_samples_leaf=100)\n                            #min_samples_leaf=0.05*len(X_train))\n\ndoFit = False\n\nif doFit:\n    print \"Performing DecisionTree fit...\"\n    dt.fit(X_train, y_train)\n\n    import cPickle\n    with open('electrons_toTMVA.pkl', 'wb') as fid:\n        cPickle.dump(dt, fid)\nelse:\n    print \"Loading DecisionTree...\"\n    # load it again\n    with open('electrons_toTMVA.pkl', 'rb') as fid:\n        dt = cPickle.load(fid)\n\n#sk_y_predicted = dt.predict(X_test)\n#sk_y_predicted = dt.predict_proba(X_test)[:, 1]\nsk_y_predicted = dt.predict_proba(X_test)[:, 1]\npredictions = dt.predict(X_test)\nprint predictions\nprint y_test\n\n\n# Draw ROC curve\nfpr, tpr, _ = roc_curve(y_test, sk_y_predicted)\n\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve of class')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Some extension of Receiver operating characteristic to multi-class')\nplt.legend(loc=\"lower right\")\n\nplt.savefig(\"output_fullsim_v5_electrons_roc_20per_DecisionTree.png\", dpi=144)\n\ntree.export_graphviz(dt, out_file='dt_viz.dot')\n\n# Save to file fpr, tpr\n#np.savez('output_fullsim_v3_electrons_fpr_tpr_10per.npz', \n#    fpr=fpr, tpr=tpr)",
    "# coding=utf-8\nfrom setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    name=\"cyfib\",\n    ext_modules=cythonize('cyfib.pyx', compiler_directives={'embedsignature': True}),\n)\n",
    "import random, math\nimport gimp_be\n#from gimp_be.utils.quick import qL\nfrom gimp_be.image.layer import editLayerMask\nfrom effects import mirror\nimport numpy as np\nimport UndrawnTurtle as turtle\n\ndef brushSize(size=-1):\n    \"\"\"\"\n    Set brush size\n    \"\"\"\n    image = gimp_be.gimp.image_list()[0]\n    drawable = gimp_be.pdb.gimp_image_active_drawable(image)\n    if size < 1:\n        size = random.randrange(2, ((image.height + image.width) / 8))\n    gimp_be.pdb.gimp_context_set_brush_size(size)\n\n# Set brush opacity\ndef brushOpacity(op=-1):\n    if op == -1:\n        op = random.randrange(15, 100)\n    gimp_be.pdb.gimp_brushes_set_opacity(op)\n    return op\n\n# Set random brush color no parameters set random\ndef brushColor(r1=-1, g1=-1, b1=-1, r2=-1, g2=-1, b2=-1):\n    if not r1 == -1:\n        gimp_be.pdb.gimp_context_set_foreground((r1, g1, b1))\n    if not r2 == -1:\n        gimp_be.pdb.gimp_context_set_background((r2, g2, b2))\n    elif r1 == -1:\n        r1 = random.randrange(0, 255)\n        g1 = random.randrange(0, 255)\n        b1 = random.randrange(0, 255)\n        r2 = random.randrange(0, 255)\n        g2 = random.randrange(0, 255)\n        b2 = random.randrange(0, 255)\n        gimp_be.pdb.gimp_context_set_foreground((r1, g1, b1))\n        gimp_be.pdb.gimp_context_set_background((r2, g2, b2))\n    return (r1, g1, b1, r2, g2, b2)\n\n#set gray scale color\ndef grayColor(gray_color):\n    gimp_be.pdb.gimp_context_set_foreground((gray_color, gray_color, gray_color))\n\n# Set random brush\ndef randomBrush():\n    num_brushes, brush_list = gimp_be.pdb.gimp_brushes_get_list('')\n    brush_pick = brush_list[random.randrange(0, len(brush_list))]\n    gimp_be.pdb.gimp_brushes_set_brush(brush_pick)\n    return brush_pick\n\n# Set random brush dynamics\ndef randomDynamics():\n    dynamics_pick = random.choice(gimp_be.pdb.gimp_dynamics_get_list('')[1])\n    gimp_be.pdb.gimp_context_set_dynamics(dynamics_pick)\n    return dynamics_pick\n\ndef qL():\n    # quick new layer\n    gimp_be.addNewLayer()\n    image = gimp_be.gimp.image_list()[0]\n    drawable = gimp_be.pdb.gimp_image_active_drawable(image)\n    gimp_be.pdb.gimp_edit_fill(drawable, 1)\n\ndef drawLine(points):\n    image = gimp_be.gimp.image_list()[0]\n    drawable = gimp_be.pdb.gimp_image_active_drawable(image)\n    gimp_be.pdb.gimp_paintbrush_default(drawable, len(points), points)\n\ndef drawSpiral(n=140, angle=61, step=10, center=[]):\n    coord=[]\n    nt=turtle.Turtle()\n    if center == []:\n        image = gimp_be.gimp.image_list()[0]\n        center=[image.width/2,image.height/2]\n    for step in range(n):\n        coord.append(int(nt.position()[0]*10)+center[0])\n        coord.append(int(nt.position()[1]*10)+center[1])\n        nt.forward(step)\n        nt.left(angle)\n        coord.append(int(nt.position()[0]*10)+center[0])\n        coord.append(int(nt.position()[1]*10)+center[1])\n    drawLine(coord)\n\ndef drawRays(rays=32, rayLength=100, centerX=0, centerY=0):\n    \"\"\"\"\n    draw N rays from center in active drawable with current brush\n    \"\"\"\n    i",
    "#!/usr/bin/env python\n# coding:utf-8\n\n\"\"\"\nDatabase operation module. This module is independent with web module.\n\"\"\"\n\nimport time, logging\n\nimport db\n\nclass Field(object):\n\n    _count = 0\n\n    def __init__(self, **kw):\n        self.name = kw.get('name', None)\n        self.ddl = kw.get('ddl', '')\n        self._default = kw.get('default', None)\n\n        self.comment = kw.get('comment', '')\n        self.nullable = kw.get('nullable', False)\n        self.updatable = kw.get('updatable', True)\n        self.insertable = kw.get('insertable', True)\n\n        self.unique_key = kw.get('unique_key', False)\n        self.non_unique_key = kw.get('key', False)\n        self.primary_key = kw.get('primary_key', False)\n\n        self._order = Field._count\n        Field._count += 1\n\n    @property\n    def default(self):\n        d = self._default\n        return d() if callable(d) else d\n\n    def __str__(self):\n        s = ['<%s:%s,%s,default(%s),' % (self.__class__.__name__, self.name, self.ddl, self._default)]\n        self.nullable and s.append('N')\n        self.updatable and s.append('U')\n        self.insertable and s.append('I')\n        s.append('>')\n        return ''.join(s)\n\nclass StringField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = ''\n        if not 'ddl' in kw:\n            kw['ddl'] = 'varchar(255)'\n        super(StringField, self).__init__(**kw)\n\nclass IntegerField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = 0\n        if not 'ddl' in kw:\n            kw['ddl'] = 'bigint'\n        super(IntegerField, self).__init__(**kw)\n\nclass FloatField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = 0.0\n        if not 'ddl' in kw:\n            kw['ddl'] = 'real'\n        super(FloatField, self).__init__(**kw)\n\nclass BooleanField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = False\n        if not 'ddl' in kw:\n            kw['ddl'] = 'bool'\n        super(BooleanField, self).__init__(**kw)\n\nclass TextField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = ''\n        if not 'ddl' in kw:\n            kw['ddl'] = 'text'\n        super(TextField, self).__init__(**kw)\n\nclass BlobField(Field):\n\n    def __init__(self, **kw):\n        if not 'default' in kw:\n            kw['default'] = ''\n        if not 'ddl' in kw:\n            kw['ddl'] = 'blob'\n        super(BlobField, self).__init__(**kw)\n\nclass VersionField(Field):\n\n    def __init__(self, name=None):\n        super(VersionField, self).__init__(name=name, default=0, ddl='bigint')\n\n\nclass DateTimeField(Field):\n\n    def __init__(self, **kw):\n        if 'ddl' not in kw:\n            kw['ddl'] = 'datetime'\n        super(DateTimeField, self).__init__(**kw)\n\n\nclass DateField(Field):\n\n    def __init__(self, **kw):\n        if 'ddl' not in kw:\n            kw['ddl'] = 'date'\n        super(DateFi",
    "import pytest\n\nfrom tests.base import Author, Post, Comment, Keyword, fake\n\n\ndef make_author():\n    return Author(\n        id=fake.random_int(),\n        first_name=fake.first_name(),\n        last_name=fake.last_name(),\n        twitter=fake.domain_word(),\n    )\n\n\ndef make_post(with_comments=True, with_author=True, with_keywords=True):\n    comments = [make_comment() for _ in range(2)] if with_comments else []\n    keywords = [make_keyword() for _ in range(3)] if with_keywords else []\n    author = make_author() if with_author else None\n    return Post(\n        id=fake.random_int(),\n        title=fake.catch_phrase(),\n        author=author,\n        author_id=author.id if with_author else None,\n        comments=comments,\n        keywords=keywords,\n    )\n\n\ndef make_comment(with_author=True):\n    author = make_author() if with_author else None\n    return Comment(id=fake.random_int(), body=fake.bs(), author=author)\n\n\ndef make_keyword():\n    return Keyword(keyword=fake.domain_word())\n\n\n@pytest.fixture()\ndef author():\n    return make_author()\n\n\n@pytest.fixture()\ndef authors():\n    return [make_author() for _ in range(3)]\n\n\n@pytest.fixture()\ndef comments():\n    return [make_comment() for _ in range(3)]\n\n\n@pytest.fixture()\ndef post():\n    return make_post()\n\n\n@pytest.fixture()\ndef post_with_null_comment():\n    return make_post(with_comments=False)\n\n\n@pytest.fixture()\ndef post_with_null_author():\n    return make_post(with_author=False)\n\n\n@pytest.fixture()\ndef posts():\n    return [make_post() for _ in range(3)]\n",
    "# Declaring a Function\ndef recurPowerNew(base, exp):\n\n    # Base case is when exp = 0\n    if exp <= 0:\n        return 1\n        \n    # Recursive Call\n    elif exp % 2 == 0:\n        return recurPowerNew(base*base, exp/2)\n\n    return base * recurPowerNew(base, exp - 1)\n",
    "'''\r\nTesting class for database API's course related functions.\r\n\r\nAuthors: Ari Kairala, Petteri Ponsimaa\r\nOriginally adopted from Ivan's exercise 1 test class.\r\n'''\r\n\r\nimport unittest, hashlib\r\nimport re, base64, copy, json, server\r\nfrom database_api_test_common import BaseTestCase, db\r\nfrom flask import json, jsonify\r\nfrom exam_archive import ExamDatabaseErrorNotFound, ExamDatabaseErrorExists\r\nfrom unittest import TestCase\r\nfrom resources_common import COLLECTIONJSON, PROBLEMJSON, COURSE_PROFILE, API_VERSION\r\n\r\nclass RestCourseTestCase(BaseTestCase):\r\n    '''\r\n    RestCourseTestCase contains course related unit tests of the database API.\r\n    '''\r\n\r\n    # List of user credentials in exam_archive_data_dump.sql for testing purposes\r\n    super_user = \"bigboss\"\r\n    super_pw = hashlib.sha256(\"ultimatepw\").hexdigest()\r\n    admin_user = \"antti.admin\"\r\n    admin_pw = hashlib.sha256(\"qwerty1234\").hexdigest()\r\n    basic_user = \"testuser\"\r\n    basic_pw = hashlib.sha256(\"testuser\").hexdigest()\r\n    wrong_pw = \"wrong-pw\"\r\n\r\n    test_course_template_1 = {\"template\": {\r\n        \"data\": [\r\n                 {\"name\": \"archiveId\", \"value\": 1},\r\n                 {\"name\": \"courseCode\", \"value\": \"810136P\"},\r\n                 {\"name\": \"name\", \"value\": \"Johdatus tietojenk\\u00e4sittelytieteisiin\"},\r\n                 {\"name\": \"description\", \"value\": \"Lorem ipsum\"},\r\n                 {\"name\": \"inLanguage\", \"value\": \"fi\"},\r\n                 {\"name\": \"creditPoints\", \"value\": 4},\r\n                 {\"name\": \"teacherId\", \"value\": 1}]\r\n    }\r\n    }\r\n    test_course_template_2 = {\"template\": {\r\n        \"data\": [\r\n                 {\"name\": \"archiveId\", \"value\": 1},\r\n                 {\"name\": \"courseCode\", \"value\": \"810137P\"},\r\n                 {\"name\": \"name\", \"value\": \"Introduction to Information Processing Sciences\"},\r\n                 {\"name\": \"description\", \"value\": \"Aaa Bbbb\"},\r\n                 {\"name\": \"inLanguage\", \"value\": \"en\"},\r\n                 {\"name\": \"creditPoints\", \"value\": 5},\r\n                 {\"name\": \"teacherId\", \"value\": 2}]\r\n    }\r\n    }\r\n\r\n    course_resource_url =               '/exam_archive/api/archives/1/courses/1/'\r\n    course_resource_not_allowed_url =   '/exam_archive/api/archives/2/courses/1/'\r\n    courselist_resource_url =           '/exam_archive/api/archives/1/courses/'\r\n\r\n    # Set a ready header for authorized admin user\r\n    header_auth = {'Authorization': 'Basic ' + base64.b64encode(super_user + \":\" + super_pw)}\r\n\r\n    # Define a list of the sample contents of the database, so we can later compare it to the test results\r\n\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        print \"Testing \", cls.__name__\r\n\r\n    def test_user_not_authorized(self):\r\n        '''\r\n        Check that user in not able to get course list without authenticating.\r\n        '''\r\n        print '(' + self.test_user_not_authorized.__name__ + ')', \\\r\n            self.test_user_not_authorized.__doc__\r\n\r\n        # Test CourseList/GET\r\n        rv = self.app.get(self.courseli",
    "#!/usr/bin/env python2.7\nimport sys\nfor line in open(sys.argv[1]):\n\tcut=line.split('\\t')\n\tif len(cut)<11: continue\n\tprint \">\"+cut[0]\n\tprint cut[9]\n\tprint \"+\"\n\tprint cut[10]\n",
    "# -*- coding: utf-8 -*-\n# Keyak v2 implementation by Jos Wetzels and Wouter Bokslag\n# hereby denoted as \"the implementer\".\n\n# Based on Keccak Python and Keyak v2 C++ implementations\n# by the Keccak, Keyak and Ketje Teams, namely, Guido Bertoni,\n# Joan Daemen, Micha\u00ebl Peeters, Gilles Van Assche and Ronny Van Keer\n#\n# For more information, feedback or questions, please refer to:\n# http://keyak.noekeon.org/\n# http://keccak.noekeon.org/\n# http://ketje.noekeon.org/\n\nfrom StringIO import StringIO\n\nclass stringStream(StringIO):\n\t# Peek (extract byte without advancing position, return None if no more stream is available)\n\tdef peek(self):\n\t\toldPos = self.tell()\n\t\tb = self.read(1)\n\t\tnewPos = self.tell()\n\t\tif((newPos == (oldPos+1)) and (b != '')):\n\t\t\tr = ord(b)\n\t\telse:\n\t\t\tr = None\n\n\t\tself.seek(oldPos, 0)\n\t\treturn r\n\n\t# Pop a single byte (as integer representation)\n\tdef get(self):\n\t\treturn ord(self.read(1))\n\n\t# Push a single byte (as integer representation)\n\tdef put(self, b):\n\t\tself.write(chr(b))\n\t\treturn\n\n\t# Erase buffered contents\n\tdef erase(self):\n\t\tself.truncate(0)\n\t\tself.seek(0, 0)\n\t\treturn\n\n\t# Set buffered contents\n\tdef setvalue(self, s):\n\t\tself.erase()\n\t\tself.write(s)\n\t\treturn\n\ndef hasMore(I):\n\treturn (I.peek() != None)\n\ndef enc8(x):\n\tif (x > 255):\n\t\traise Exception(\"The integer %d cannot be encoded on 8 bits.\" % x)\n\telse:\n\t\treturn x\n\n# Constant-time comparison from the Django source: https://github.com/django/django/blob/master/django/utils/crypto.py\n# Is constant-time only if both strings are of equal length but given the use-case that is always the case.\ndef constant_time_compare(val1, val2):\n    if len(val1) != len(val2):\n        return False\n    result = 0\n    for x, y in zip(val1, val2):\n        result |= ord(x) ^ ord(y)\n    return result == 0",
    "import _plotly_utils.basevalidators\n\n\nclass BordercolorValidator(_plotly_utils.basevalidators.ColorValidator):\n    def __init__(\n        self, plotly_name=\"bordercolor\", parent_name=\"sankey.hoverlabel\", **kwargs\n    ):\n        super(BordercolorValidator, self).__init__(\n            plotly_name=plotly_name,\n            parent_name=parent_name,\n            array_ok=kwargs.pop(\"array_ok\", True),\n            edit_type=kwargs.pop(\"edit_type\", \"calc\"),\n            **kwargs\n        )\n",
    "import numpy as np\nimport warnings\nfrom .._explainer import Explainer\nfrom packaging import version\ntorch = None\n\n\nclass PyTorchDeep(Explainer):\n\n    def __init__(self, model, data):\n        # try and import pytorch\n        global torch\n        if torch is None:\n            import torch\n            if version.parse(torch.__version__) < version.parse(\"0.4\"):\n                warnings.warn(\"Your PyTorch version is older than 0.4 and not supported.\")\n\n        # check if we have multiple inputs\n        self.multi_input = False\n        if type(data) == list:\n            self.multi_input = True\n        if type(data) != list:\n            data = [data]\n        self.data = data\n        self.layer = None\n        self.input_handle = None\n        self.interim = False\n        self.interim_inputs_shape = None\n        self.expected_value = None  # to keep the DeepExplainer base happy\n        if type(model) == tuple:\n            self.interim = True\n            model, layer = model\n            model = model.eval()\n            self.layer = layer\n            self.add_target_handle(self.layer)\n\n            # if we are taking an interim layer, the 'data' is going to be the input\n            # of the interim layer; we will capture this using a forward hook\n            with torch.no_grad():\n                _ = model(*data)\n                interim_inputs = self.layer.target_input\n                if type(interim_inputs) is tuple:\n                    # this should always be true, but just to be safe\n                    self.interim_inputs_shape = [i.shape for i in interim_inputs]\n                else:\n                    self.interim_inputs_shape = [interim_inputs.shape]\n            self.target_handle.remove()\n            del self.layer.target_input\n        self.model = model.eval()\n\n        self.multi_output = False\n        self.num_outputs = 1\n        with torch.no_grad():\n            outputs = model(*data)\n\n            # also get the device everything is running on\n            self.device = outputs.device\n            if outputs.shape[1] > 1:\n                self.multi_output = True\n                self.num_outputs = outputs.shape[1]\n            self.expected_value = outputs.mean(0).cpu().numpy()\n\n    def add_target_handle(self, layer):\n        input_handle = layer.register_forward_hook(get_target_input)\n        self.target_handle = input_handle\n\n    def add_handles(self, model, forward_handle, backward_handle):\n        \"\"\"\n        Add handles to all non-container layers in the model.\n        Recursively for non-container layers\n        \"\"\"\n        handles_list = []\n        model_children = list(model.children())\n        if model_children:\n            for child in model_children:\n                handles_list.extend(self.add_handles(child, forward_handle, backward_handle))\n        else:  # leaves\n            handles_list.append(model.register_forward_hook(forward_handle))\n            handles_list.append(model.register_backward_hook(backward_handle))\n        return handles",
    "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport time\nimport curses\n\nfrom . import docs\nfrom .content import SubmissionContent, SubredditContent\nfrom .page import Page, PageController, logged_in\nfrom .objects import Navigator, Color, Command\nfrom .exceptions import TemporaryFileError\n\n\nclass SubmissionController(PageController):\n    character_map = {}\n\n\nclass SubmissionPage(Page):\n\n    FOOTER = docs.FOOTER_SUBMISSION\n\n    def __init__(self, reddit, term, config, oauth, url=None, submission=None):\n        super(SubmissionPage, self).__init__(reddit, term, config, oauth)\n\n        self.controller = SubmissionController(self, keymap=config.keymap)\n\n        if url:\n            self.content = SubmissionContent.from_url(\n                reddit, url, term.loader,\n                max_comment_cols=config['max_comment_cols'])\n        else:\n            self.content = SubmissionContent(\n                submission, term.loader,\n                max_comment_cols=config['max_comment_cols'])\n        # Start at the submission post, which is indexed as -1\n        self.nav = Navigator(self.content.get, page_index=-1)\n        self.selected_subreddit = None\n\n    @SubmissionController.register(Command('SUBMISSION_TOGGLE_COMMENT'))\n    def toggle_comment(self):\n        \"Toggle the selected comment tree between visible and hidden\"\n\n        current_index = self.nav.absolute_index\n        self.content.toggle(current_index)\n\n        # This logic handles a display edge case after a comment toggle. We\n        # want to make sure that when we re-draw the page, the cursor stays at\n        # its current absolute position on the screen. In order to do this,\n        # apply a fixed offset if, while inverted, we either try to hide the\n        # bottom comment or toggle any of the middle comments.\n        if self.nav.inverted:\n            data = self.content.get(current_index)\n            if data['hidden'] or self.nav.cursor_index != 0:\n                window = self._subwindows[-1][0]\n                n_rows, _ = window.getmaxyx()\n                self.nav.flip(len(self._subwindows) - 1)\n                self.nav.top_item_height = n_rows\n\n    @SubmissionController.register(Command('SUBMISSION_EXIT'))\n    def exit_submission(self):\n        \"Close the submission and return to the subreddit page\"\n\n        self.active = False\n\n    @SubmissionController.register(Command('REFRESH'))\n    def refresh_content(self, order=None, name=None):\n        \"Re-download comments and reset the page index\"\n\n        order = order or self.content.order\n        url = name or self.content.name\n\n        with self.term.loader('Refreshing page'):\n            self.content = SubmissionContent.from_url(\n                self.reddit, url, self.term.loader, order=order,\n                max_comment_cols=self.config['max_comment_cols'])\n        if not self.term.loader.exception:\n            self.nav = Navigator(self.content.get, page_index=-1)\n\n    @SubmissionController.register(Command('PROMPT'))\n  ",
    "#!/usr/bin/env python\r\nimport os\r\nimport vtk\r\nfrom vtk.test import Testing\r\nfrom vtk.util.misc import vtkGetDataRoot\r\nVTK_DATA_ROOT = vtkGetDataRoot()\r\n\r\n# Test label reading from an MNI tag file\r\n#\r\n\r\n# The current directory must be writeable.\r\n#\r\ntry:\r\n    fname = \"mni-tagtest.tag\"\r\n    channel = open(fname, \"wb\")\r\n    channel.close()\r\n\r\n    # create some random points in a sphere\r\n    #\r\n    sphere1 = vtk.vtkPointSource()\r\n    sphere1.SetNumberOfPoints(13)\r\n\r\n    xform = vtk.vtkTransform()\r\n    xform.RotateWXYZ(20, 1, 0, 0)\r\n\r\n    xformFilter = vtk.vtkTransformFilter()\r\n    xformFilter.SetTransform(xform)\r\n    xformFilter.SetInputConnection(sphere1.GetOutputPort())\r\n\r\n    labels = vtk.vtkStringArray()\r\n    labels.InsertNextValue(\"0\")\r\n    labels.InsertNextValue(\"1\")\r\n    labels.InsertNextValue(\"2\")\r\n    labels.InsertNextValue(\"3\")\r\n    labels.InsertNextValue(\"Halifax\")\r\n    labels.InsertNextValue(\"Toronto\")\r\n    labels.InsertNextValue(\"Vancouver\")\r\n    labels.InsertNextValue(\"Larry\")\r\n    labels.InsertNextValue(\"Bob\")\r\n    labels.InsertNextValue(\"Jackie\")\r\n    labels.InsertNextValue(\"10\")\r\n    labels.InsertNextValue(\"11\")\r\n    labels.InsertNextValue(\"12\")\r\n\r\n    weights = vtk.vtkDoubleArray()\r\n    weights.InsertNextValue(1.0)\r\n    weights.InsertNextValue(1.1)\r\n    weights.InsertNextValue(1.2)\r\n    weights.InsertNextValue(1.3)\r\n    weights.InsertNextValue(1.4)\r\n    weights.InsertNextValue(1.5)\r\n    weights.InsertNextValue(1.6)\r\n    weights.InsertNextValue(1.7)\r\n    weights.InsertNextValue(1.8)\r\n    weights.InsertNextValue(1.9)\r\n    weights.InsertNextValue(0.9)\r\n    weights.InsertNextValue(0.8)\r\n    weights.InsertNextValue(0.7)\r\n\r\n    writer = vtk.vtkMNITagPointWriter()\r\n    writer.SetFileName(fname)\r\n    writer.SetInputConnection(sphere1.GetOutputPort())\r\n    writer.SetInputConnection(1, xformFilter.GetOutputPort())\r\n    writer.SetLabelText(labels)\r\n    writer.SetWeights(weights)\r\n    writer.SetComments(\"Volume 1: sphere points\\nVolume 2: transformed points\")\r\n    writer.Write()\r\n\r\n    reader = vtk.vtkMNITagPointReader()\r\n    reader.CanReadFile(fname)\r\n    reader.SetFileName(fname)\r\n\r\n    textProp = vtk.vtkTextProperty()\r\n    textProp.SetFontSize(12)\r\n    textProp.SetColor(1.0, 1.0, 0.5)\r\n\r\n    labelHier = vtk.vtkPointSetToLabelHierarchy()\r\n    labelHier.SetInputConnection(reader.GetOutputPort())\r\n    labelHier.SetTextProperty(textProp)\r\n    labelHier.SetLabelArrayName(\"LabelText\")\r\n    labelHier.SetMaximumDepth(15)\r\n    labelHier.SetTargetLabelCount(12)\r\n\r\n    labelMapper = vtk.vtkLabelPlacementMapper()\r\n    labelMapper.SetInputConnection(labelHier.GetOutputPort())\r\n    labelMapper.UseDepthBufferOff()\r\n    labelMapper.SetShapeToRect()\r\n    labelMapper.SetStyleToOutline()\r\n\r\n    labelActor = vtk.vtkActor2D()\r\n    labelActor.SetMapper(labelMapper)\r\n\r\n    glyphSource = vtk.vtkSphereSource()\r\n    glyphSource.SetRadius(0.01)\r\n\r\n    glyph = vtk.vtkGlyph3D()\r\n    glyph.SetSourceConnection(glyphSource.GetOutputPort())\r\n    glyph.SetInputConnection(rea",
    "import uuid\n\nfrom uqbar.objects import new\n\nfrom supriya.patterns.Pattern import Pattern\n\n\nclass EventPattern(Pattern):\n\n    ### CLASS VARIABLES ###\n\n    __slots__ = ()\n\n    ### SPECIAL METHODS ###\n\n    def _coerce_iterator_output(self, expr, state=None):\n        import supriya.patterns\n\n        if not isinstance(expr, supriya.patterns.Event):\n            expr = supriya.patterns.NoteEvent(**expr)\n        if expr.get(\"uuid\") is None:\n            expr = new(expr, uuid=uuid.uuid4())\n        return expr\n\n    ### PUBLIC METHODS ###\n\n    def play(self, clock=None, server=None):\n        import supriya.patterns\n        import supriya.realtime\n\n        event_player = supriya.patterns.RealtimeEventPlayer(\n            self, clock=clock, server=server or supriya.realtime.Server.default()\n        )\n        event_player.start()\n        return event_player\n\n    def with_bus(self, calculation_rate=\"audio\", channel_count=None, release_time=0.25):\n        import supriya.patterns\n\n        return supriya.patterns.Pbus(\n            self,\n            calculation_rate=calculation_rate,\n            channel_count=channel_count,\n            release_time=release_time,\n        )\n\n    def with_effect(self, synthdef, release_time=0.25, **settings):\n        import supriya.patterns\n\n        return supriya.patterns.Pfx(\n            self, synthdef=synthdef, release_time=release_time, **settings\n        )\n\n    def with_group(self, release_time=0.25):\n        import supriya.patterns\n\n        return supriya.patterns.Pgroup(self, release_time=release_time)\n",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: (c) 2017, F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nDOCUMENTATION = r'''\n---\nmodule: bigiq_regkey_license_assignment\nshort_description: Manage regkey license assignment on BIG-IPs from a BIG-IQ\ndescription:\n  - Manages the assignment of regkey licenses on a BIG-IQ. Assignment means\n    the license is assigned to a BIG-IP, or it needs to be assigned to a BIG-IP.\n    Additionally, this module supports revoking the assignments from BIG-IP devices.\nversion_added: \"1.0.0\"\noptions:\n  pool:\n    description:\n      - The registration key pool to use.\n    type: str\n    required: True\n  key:\n    description:\n      - The registration key you want to assign from the pool.\n    type: str\n    required: True\n  device:\n    description:\n      - When C(managed) is C(no), specifies the address, or hostname, where the BIG-IQ\n        can reach the remote device to register.\n      - When C(managed) is C(yes), specifies the managed device, or device UUID, that\n        you want to register.\n      - If C(managed) is C(yes), it is very important you do not have more than\n        one device with the same name. BIG-IQ internally recognizes devices by their ID,\n        and therefore, this module cannot guarantee the correct device will be\n        registered. The device returned is the device that is used.\n    type: str\n    required: True\n  managed:\n    description:\n      - Whether the specified device is a managed or un-managed device.\n      - When C(state) is C(present), this parameter is required.\n    type: bool\n  device_port:\n    description:\n      - Specifies the port of the remote device to connect to.\n      - If this parameter is not specified, the default is C(443).\n    type: int\n    default: 443\n  device_username:\n    description:\n      - The username used to connect to the remote device.\n      - This username should be one that has sufficient privileges on the remote device\n        to do licensing. Usually this is the C(Administrator) role.\n      - When C(managed) is C(no), this parameter is required.\n    type: str\n  device_password:\n    description:\n      - The password of the C(device_username).\n      - When C(managed) is C(no), this parameter is required.\n    type: str\n  state:\n    description:\n      - When C(present), ensures the device is assigned the specified license.\n      - When C(absent), ensures the license is revoked from the remote device and freed\n        on the BIG-IQ.\n    type: str\n    choices:\n      - present\n      - absent\n    default: present\nextends_documentation_fragment: f5networks.f5_modules.f5\nauthor:\n  - Tim Rupp (@caphrim007)\n'''\n\nEXAMPLES = r'''\n- name: Register an unmanaged device\n  bigiq_regkey_license_assignment:\n    pool: my-regkey-pool\n    key: XXXX-XXXX-XXXX-XXXX-XXXX\n    device: 1.1.1.1\n    managed: no\n    device_username: adm",
    "'''\n\nsalt.utils\n~~~~~~~~~~\n\n\n'''\n\n\n\nclass lazy_property(object):\n    '''\n    meant to be used for lazy evaluation of an object attribute.\n    property should represent non-mutable data, as it replaces itself.\n\n    http://stackoverflow.com/a/6849299/564003\n    '''\n\n    def __init__(self, fget):\n        self.fget = fget\n        self.func_name = fget.__name__\n\n    def __get__(self, obj, cls):\n        if obj is None:\n            return None\n        value = self.fget(obj)\n        setattr(obj, self.func_name, value)\n        return value\n",
    "import re\nfrom setuptools import setup\n\n\ndef find_version(filename):\n    _version_re = re.compile(r\"__version__ = '(.*)'\")\n    for line in open(filename):\n        version_match = _version_re.match(line)\n        if version_match:\n            return version_match.group(1)\n\n\n__version__ = find_version('librdflib/__init__.py')\n\nwith open('README.md', 'rt') as f:\n    long_description = f.read()\n\ntests_require = ['pytest']\nsetup(\n    name='librdflib',\n    version=__version__,\n    description='librdf parser for rdflib',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/tgbugs/pyontutils/tree/master/librdflib',\n    author='Tom Gillespie',\n    author_email='tgbugs@gmail.com',\n    license='MIT',\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n    ],\n    keywords='rdflib librdf rdf parser parsing ttl rdfxml',\n    packages=['librdflib'],\n    python_requires='>=3',\n    tests_require=tests_require,\n    install_requires=[\n        'rdflib',  # really 5.0.0 if my changes go in but dev < 5\n    ],\n    extras_require={'dev': ['pytest-cov', 'wheel'],\n                    'test': tests_require,\n    },\n    entry_points={\n        'rdf.plugins.parser': [\n            'librdfxml = librdflib:libRdfxmlParser',\n            'libttl = librdflib:libTurtleParser',\n        ],\n    },\n)\n",
    "\"\"\"This module contains examples of the op() function\nwhere:\nop(f,x) returns a stream where x is a stream, and f\nis an operator on lists, i.e., f is a function from\na list to a list. These lists are of lists of arbitrary\nobjects other than streams and agents.\n\nFunction f must be stateless, i.e., for any lists u, v:\nf(u.extend(v)) = f(u).extend(f(v))\n(Stateful functions are given in OpStateful.py with\nexamples in ExamplesOpWithState.py.)\n\nLet f be a stateless operator on lists and let x be a stream.\nIf at some point, the value of stream x is a list u then at\nthat point, the value of stream op(f,x) is the list f(u).\nIf at a later point, the value of stream x is the list:\nu.extend(v) then, at that point the value of stream op(f,x)\nis f(u).extend(f(v)).\n \nAs a specific example, consider the following f():\ndef f(lst): return [w * w for w in lst]\nIf at some point in time, the value of x is [3, 7],\nthen at that point the value of op(f,x) is f([3, 7])\nor [9, 49]. If at a later point, the value of x is\n[3, 7, 0, 11, 5] then the value of op(f,x) at that point\nis f([3, 7, 0, 11, 5]) or [9, 49, 0, 121, 25].\n\n\"\"\"\nif __name__ == '__main__':\n    if __package__ is None:\n        import sys\n        from os import path\n        sys.path.append( path.dirname( path.dirname( path.abspath(__file__) ) ) )\n\nfrom Agent import *\nfrom ListOperators import *\nfrom PrintFunctions import print_streams_recent\n\ndef example_1():\n    print \"example_1\"\n    print \"op(f, x): f is a function from a list to a list\"\n    print \"x is a stream \\n\"\n\n    # FUNCTIONS FROM LIST TO LIST\n\n    # This example uses the following list operators:\n    # functions from a list to a list.\n    # f, g, h, r\n\n\n    # Example A: function using list comprehension\n    def f(lst): return [w*w for w in lst]\n\n    # Example B: function using filter\n    threshold = 6\n    def predicate(w):\n        return w > threshold\n    def g(lst):\n        return filter(predicate, lst)\n\n    # Example C: function using map\n    # Raise each element of the list to the n-th power.   \n    n = 3\n    def power(w):\n        return w**n\n    def h(lst):\n        return map(power, lst)\n\n    # Example D: function using another list comprehension\n    # Discard any element of x that is not a\n    # multiple of a parameter n, and divide the\n    # elements that are multiples of n by n.\n    n = 3\n    def r(lst):\n        result = []\n        for w in lst:\n            if w%n == 0: result.append(w/n)\n        return result\n\n    \n    \n\n\n    # EXAMPLES OF OPERATIONS ON STREAMS\n    \n    # The input stream for these examples\n    x = Stream('x')\n\n    print 'x is the input stream.'\n    print 'a is a stream consisting of the squares of the input'\n    print 'b is the stream consisting of values that exceed 6'\n    print 'c is the stream consisting of the third powers of the input'\n    print 'd is the stream consisting of values that are multiples of 3 divided by 3'\n    print 'newa is the same as a. It is defined in a more succinct fashion.'\n    print 'newb has square",
    "## Close\n### What is the value of the first triangle number to have over five hundred divisors?\nprint max([len(m) for m in map(lambda k: [n for n in range(1,(k+1)) if k%n == 0], [sum(range(n)) for n in range(1,1000)])])",
    "from errors import *\nfrom manager import SchemaManager\n",
    "import random\nfrom datetime import datetime\nfrom multiprocessing import Pool\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\n\ndef worker_func(args):\n    self = args[0]\n    m = args[1]\n    k = args[2]\n    r = args[3]\n\n    return (self.eval_func(m, k, r) -\n            self.eval_func(m, k, self.rt) -\n            self.temporal_diff_sum(m, k)) ** 2\n\n\ndef optimized_func_i_der(args):\n    \"\"\"\n    The derivative of the optimized function with respect to the\n    ith component of the vector r\n    \"\"\"\n    self = args[0]\n    r = args[1]\n    i = args[2]\n\n    result = 0\n    M = len(self.data)\n\n    for m in range(M):\n        Nm = self.data[m].shape[0] - 1\n\n        for k in range(Nm + 1):\n            result += ((self.eval_func(m, k, r) -\n                        self.eval_func(m, k, self.rt) -\n                        self.temporal_diff_sum(m, k)) * 2 *\n                       self.eval_func_der(m, k, r, i))\n\n    return result\n\n\ndef worker_func_der(args):\n    self = args[0]\n    m = args[1]\n    k = args[2]\n    r = args[3]\n    i = args[4]\n\n    return ((self.eval_func(m, k, r) -\n             self.eval_func(m, k, self.rt) -\n             self.temporal_diff_sum(m, k)) * 2 *\n            self.eval_func_der(m, k, r, i))\n\n\nclass Agent:\n    num_features = 22\n\n    def __init__(self):\n        self.lf = 0.2  # Learning factor lambda\n        self.data = []  # The features' values for all the games\n        self.rewards = []  # Reward values for moving from 1 state to the next\n        self.rt = np.array([])\n        self.max_iter = 50\n\n    def set_learning_factor(self, learning_factor):\n        assert(learning_factor >= 0 and learning_factor <= 1)\n        self.lf = learning_factor\n\n    def set_rt(self, rt):\n        assert(len(rt) == self.num_features)\n        self.rt = rt\n\n    def set_iter(self, max_iter):\n        self.max_iter = max_iter\n\n    def set_data(self, data):\n        self.data = []\n        self.rewards = []\n\n        for game in data:\n            game = np.vstack((game, np.zeros(self.num_features + 1)))\n            self.data.append(game[:, :-1])\n            self.rewards.append(game[:, -1:])\n\n    def eval_func(self, m, k, r):\n        \"\"\"\n        The evaluation function value for the set of weights (vector) r\n        at the mth game and kth board state \"\"\"\n        return np.dot(r, self.data[m][k])\n\n    def eval_func_der(self, m, k, r, i):\n        \"\"\"\n        Find the derivative of the evaluation function with respect\n        to the ith component of the vector r\n        \"\"\"\n        return self.data[m][k][i]\n\n    def get_reward(self, m, s):\n        \"\"\"\n        Get reward for moving from state s to state (s + 1)\n        \"\"\"\n        return self.rewards[m][s + 1][0]\n\n    def temporal_diff(self, m, s):\n        \"\"\"\n        The temporal diffence value for state s to state (s+1) in the mth game\n        \"\"\"\n        return (self.get_reward(m, s) + self.eval_func(m, s + 1, self.rt) -\n                self.eval_func(m, s, self.rt))\n\n    def temporal_diff_sum(self, m, k):\n        Nm",
    "# -*- coding: utf-8 -*-\n\n\"\"\"\"\nProjectName: pydemi\nRepo: https://github.com/chrisenytc/pydemi\nCopyright (c) 2014 Christopher EnyTC\nLicensed under the MIT license.\n\"\"\"\n\n# Dependencies\nimport uuid\nfrom api import app\nfrom hashlib import sha1\nfrom flask import request\nfrom flask import jsonify as JSON\nfrom api.models.user import User\nfrom cors import cors\n\n\n@app.route('/signup', methods=['POST'])\n@cors(origin='*', methods=['POST'])\ndef signup():\n    # Create new user\n    new_user = User()\n    new_user.name = request.form['name']\n    new_user.email = request.form['email']\n    new_user.password = sha1(request.form['password']).hexdigest()\n    new_user.token = str(uuid.uuid4())\n    new_user.save()\n    return JSON(message='User created successfully')\n\n\n@app.route('/signin', methods=['POST'])\n@cors(origin='*', methods=['POST'])\ndef signin():\n    # Retorna a user data\n    user_info = User.objects(email=request.form['email'], password=sha1(\n        request.form['password']).hexdigest())\n    if user_info.count():\n        return JSON(token=user_info.get().token, roles=user_info.get().roles)\n    else:\n        return JSON(message='User not found')\n",
    "team_mapping = {\n    \"SY\": \"Sydney\",\n    \"WB\": \"Western Bulldogs\",\n    \"WC\": \"West Coast\",\n    \"HW\": \"Hawthorn\",\n    \"GE\": \"Geelong\",\n    \"FR\": \"Fremantle\",\n    \"RI\": \"Richmond\",\n    \"CW\": \"Collingwood\",\n    \"CA\": \"Carlton\",\n    \"GW\": \"Greater Western Sydney\",\n    \"AD\": \"Adelaide\",\n    \"GC\": \"Gold Coast\",\n    \"ES\": \"Essendon\",\n    \"ME\": \"Melbourne\",\n    \"NM\": \"North Melbourne\",\n    \"PA\": \"Port Adelaide\",\n    \"BL\": \"Brisbane Lions\",\n    \"SK\": \"St Kilda\"\n}\n\ndef get_team_name(code):\n    return team_mapping[code]\n\ndef get_team_code(full_name):\n    for code, name in team_mapping.items():\n        if name == full_name:\n            return code\n    return full_name\n\ndef get_match_description(response):\n    match_container = response.xpath(\"//td[@colspan = '5' and @align = 'center']\")[0]\n    match_details = match_container.xpath(\".//text()\").extract()\n    return {\n        \"round\": match_details[1],\n        \"venue\": match_details[3],\n        \"date\": match_details[6],\n        \"attendance\": match_details[8],\n        \"homeTeam\": response.xpath(\"(//a[contains(@href, 'teams/')])[1]/text()\").extract_first(),\n        \"awayTeam\": response.xpath(\"(//a[contains(@href, 'teams/')])[2]/text()\").extract_first(),\n        \"homeScore\": int(response.xpath(\"//table[1]/tr[2]/td[5]/b/text()\").extract_first()),\n        \"awayScore\": int(response.xpath(\"//table[1]/tr[3]/td[5]/b/text()\").extract_first())\n    }\n\ndef get_match_urls(response):\n    for match in response.xpath(\"//a[contains(@href, 'stats/games/')]/@href\").extract():\n                yield response.urljoin(match)",
    "from keras.applications import imagenet_utils\nfrom keras.applications import mobilenet\n\n\ndef dummyPreprocessInput(image):\n    image -= 127.5\n    return image\n\n\ndef getPreprocessFunction(preprocessType):\n\n    if preprocessType == \"dummy\":\n        return dummyPreprocessInput\n    elif preprocessType == \"mobilenet\":\n        return mobilenet.preprocess_input\n    elif preprocessType == \"imagenet\":\n        return imagenet_utils.preprocess_input\n    else:\n        raise Exception(preprocessType + \" not supported\")\n",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n__author__ = 'ar'\n\nfrom layers_basic import LW_Layer, default_data_format\nfrom layers_convolutional import conv_output_length\n\n###############################################\nclass _LW_Pooling1D(LW_Layer):\n    input_dim = 3\n    def __init__(self, pool_size=2, strides=None, padding='valid'):\n        if strides is None:\n            strides = pool_size\n        assert padding in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n        self.pool_length = pool_size\n        self.stride = strides\n        self.border_mode = padding\n    def get_output_shape_for(self, input_shape):\n        length = conv_output_length(input_shape[1], self.pool_length, self.border_mode, self.stride)\n        return (input_shape[0], length, input_shape[2])\n\nclass LW_MaxPooling1D(_LW_Pooling1D):\n    def __init__(self, pool_size=2, strides=None, padding='valid'):\n        super(LW_MaxPooling1D, self).__init__(pool_size, strides, padding)\n\nclass LW_AveragePooling1D(_LW_Pooling1D):\n    def __init__(self, pool_size=2, strides=None, padding='valid'):\n        super(LW_AveragePooling1D, self).__init__(pool_size, strides, padding)\n\n###############################################\nclass _LW_Pooling2D(LW_Layer):\n    def __init__(self, pool_size=(2, 2), strides=None, padding='valid', data_format='default'):\n        if data_format == 'default':\n            data_format = default_data_format\n        assert data_format in {'channels_last', 'channels_first'}, 'data_format must be in {channels_last, channels_first}'\n        self.pool_size = tuple(pool_size)\n        if strides is None:\n            strides = self.pool_size\n        self.strides = tuple(strides)\n        assert padding in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n        self.border_mode = padding\n        self.dim_ordering = data_format\n    def get_output_shape_for(self, input_shape):\n        if self.dim_ordering == 'channels_first':\n            rows = input_shape[2]\n            cols = input_shape[3]\n        elif self.dim_ordering == 'channels_last':\n            rows = input_shape[1]\n            cols = input_shape[2]\n        else:\n            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n        rows = conv_output_length(rows, self.pool_size[0], self.border_mode, self.strides[0])\n        cols = conv_output_length(cols, self.pool_size[1], self.border_mode, self.strides[1])\n        if self.dim_ordering == 'channels_first':\n            return (input_shape[0], input_shape[1], rows, cols)\n        elif self.dim_ordering == 'channels_last':\n            return (input_shape[0], rows, cols, input_shape[3])\n        else:\n            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n\nclass LW_MaxPooling2D(_LW_Pooling2D):\n    def __init__(self, pool_size=(2, 2), strides=None, padding='valid', data_format='default'):\n        super(LW_MaxPooling2D, self).__init__(pool_size, strides, padding, data_format)\n\nclass LW_AveragePooling2D(_LW_Pooling2D):\n    def __",
    "import sys\n\ntagging_filepath = sys.argv[1]\nfollowing_filepath = sys.argv[2]\n\ndelim = '\\t'\nif len(sys.argv) > 3:\n    delim = sys.argv[3]\n\ngraph = {}\nfor line in open(tagging_filepath):\n    entry = line.rstrip().split('\\t')\n    src = entry[0]\n    dst = entry[1]\n    if not src in graph: graph[src] = {}\n    graph[src][dst] = 0\n\nfor line in open(following_filepath):\n    entry = line.rstrip().split('\\t')\n    src = entry[0]\n    dst = entry[1]\n    if src in graph and dst in graph[src]:\n        graph[src][dst] += 1\n    if dst in graph and src in graph[dst]:\n        graph[dst][src] += 2\n\nw_dir = 0\nwo_dir = 0\ncount = 0.0\nfor src in graph:\n    for dst in graph[src]:\n        val = graph[src][dst]\n        count += 1\n        if val in [1,3]:\n            w_dir += 1\n        if val in [1,2,3]:\n            wo_dir += 1\n\nprint \"%s\\t%s\" % (w_dir/count, wo_dir/count)\n",
    "#!/usr/bin/env python\r\n#\r\n# Copyright 2010 Facebook\r\n#\r\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\r\n# not use this file except in compliance with the License. You may obtain\r\n# a copy of the License at\r\n#\r\n# http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n# Unless required by applicable law or agreed to in writing, software\r\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n# License for the specific language governing permissions and limitations\r\n# under the License.\r\n\r\n\"\"\"Python client library for the Facebook Platform.\r\n\r\nThis client library is designed to support the Graph API and the\r\nofficial Facebook JavaScript SDK, which is the canonical way to\r\nimplement Facebook authentication. Read more about the Graph API at\r\nhttp://developers.facebook.com/docs/api. You can download the Facebook\r\nJavaScript SDK at http://github.com/facebook/connect-js/.\r\n\r\nIf your application is using Google AppEngine's webapp framework, your\r\nusage of this module might look like this:\r\n\r\nuser = facebook.get_user_from_cookie(self.request.cookies, key, secret)\r\nif user:\r\ngraph = facebook.GraphAPI(user[\"access_token\"])\r\nprofile = graph.get_object(\"me\")\r\nfriends = graph.get_connections(\"me\", \"friends\")\r\n\r\n\"\"\"\r\n\r\nimport cgi\r\nimport time\r\nimport urllib\r\nimport urllib2\r\nimport httplib\r\nimport hashlib\r\nimport hmac\r\nimport base64\r\nimport logging\r\nimport socket\r\n\r\n# Find a JSON parser\r\ntry:\r\n    import simplejson as json\r\nexcept ImportError:\r\n    try:\r\n        from django.utils import simplejson as json\r\n    except ImportError:\r\n        import json\r\n_parse_json = json.loads\r\n\r\n# Find a query string parser\r\ntry:\r\n    from urlparse import parse_qs\r\nexcept ImportError:\r\n    from cgi import parse_qs\r\n\r\n\r\nclass GraphAPI(object):\r\n    \"\"\"A client for the Facebook Graph API.\r\n\r\nSee http://developers.facebook.com/docs/api for complete\r\ndocumentation for the API.\r\n\r\nThe Graph API is made up of the objects in Facebook (e.g., people,\r\npages, events, photos) and the connections between them (e.g.,\r\nfriends, photo tags, and event RSVPs). This client provides access\r\nto those primitive types in a generic way. For example, given an\r\nOAuth access token, this will fetch the profile of the active user\r\nand the list of the user's friends:\r\n\r\ngraph = facebook.GraphAPI(access_token)\r\nuser = graph.get_object(\"me\")\r\nfriends = graph.get_connections(user[\"id\"], \"friends\")\r\n\r\nYou can see a list of all of the objects and connections supported\r\nby the API at http://developers.facebook.com/docs/reference/api/.\r\n\r\nYou can obtain an access token via OAuth or by using the Facebook\r\nJavaScript SDK. See\r\nhttp://developers.facebook.com/docs/authentication/ for details.\r\n\r\nIf you are using the JavaScript SDK, you can use the\r\nget_user_from_cookie() method below to get the OAuth access token\r\nfor the active user from the cookie saved by the SDK.\r\n\r\n\"\"\"\r\n    def __init__(self, access",
    "# coding=utf-8\n# Distributed under the MIT software license, see the accompanying\n# file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nimport threading\nfrom typing import Optional, Tuple\n\nfrom pyqrllib.pyqrllib import bin2hstr\nfrom pyqryptonight.pyqryptonight import StringToUInt256, UInt256ToString\n\nfrom qrl.core import config, BlockHeader\nfrom qrl.core.AddressState import AddressState\nfrom qrl.core.Block import Block\nfrom qrl.core.BlockMetadata import BlockMetadata\nfrom qrl.core.DifficultyTracker import DifficultyTracker\nfrom qrl.core.GenesisBlock import GenesisBlock\nfrom qrl.core.PoWValidator import PoWValidator\nfrom qrl.core.txs.Transaction import Transaction\nfrom qrl.core.txs.CoinBase import CoinBase\nfrom qrl.core.TransactionPool import TransactionPool\nfrom qrl.core.misc import logger\nfrom qrl.crypto.Qryptonight import Qryptonight\nfrom qrl.generated import qrl_pb2, qrlstateinfo_pb2\n\n\nclass ChainManager:\n    def __init__(self, state):\n        self._state = state\n        self.tx_pool = TransactionPool(None)\n        self._last_block = Block.deserialize(GenesisBlock().serialize())\n        self.current_difficulty = StringToUInt256(str(config.user.genesis_difficulty))\n\n        self.trigger_miner = False\n        self.lock = threading.RLock()\n\n    @property\n    def height(self):\n        with self.lock:\n            if not self._last_block:\n                return -1\n            return self._last_block.block_number\n\n    @property\n    def last_block(self) -> Block:\n        with self.lock:\n            return self._last_block\n\n    @property\n    def total_coin_supply(self):\n        with self.lock:\n            return self._state.total_coin_supply\n\n    def get_block_datapoint(self, headerhash):\n        with self.lock:\n            return self._state.get_block_datapoint(headerhash)\n\n    def get_cumulative_difficulty(self):\n        with self.lock:\n            last_block_metadata = self._state.get_block_metadata(self._last_block.headerhash)\n            return last_block_metadata.cumulative_difficulty\n\n    def get_block_by_number(self, block_number) -> Optional[Block]:\n        with self.lock:\n            return self._state.get_block_by_number(block_number)\n\n    def get_block_header_hash_by_number(self, block_number) -> Optional[bytes]:\n        with self.lock:\n            return self._state.get_block_header_hash_by_number(block_number)\n\n    def get_block(self, header_hash: bytes) -> Optional[Block]:\n        with self.lock:\n            return self._state.get_block(header_hash)\n\n    def get_address_balance(self, address: bytes) -> int:\n        with self.lock:\n            return self._state.get_address_balance(address)\n\n    def get_address_is_used(self, address: bytes) -> bool:\n        with self.lock:\n            return self._state.get_address_is_used(address)\n\n    def get_address_state(self, address: bytes) -> AddressState:\n        with self.lock:\n            return self._state.get_address_state(address)\n\n    def get_all_address_state(self):\n        ",
    "#!/usr/bin/env python3\n# Copyright (c) 2015-2020 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n\nimport struct\nimport time\nimport unittest\n\nfrom .address import (\n    key_to_p2sh_p2wpkh,\n    key_to_p2wpkh,\n    script_to_p2sh_p2wsh,\n    script_to_p2wsh,\n)\nfrom .messages import (\n    CBlock,\n    COIN,\n    COutPoint,\n    CTransaction,\n    CTxIn,\n    CTxInWitness,\n    CTxOut,\n    hash256,\n    ser_uint256,\n    tx_from_hex,\n    uint256_from_str,\n)\nfrom .script import (\n    CScript,\n    CScriptNum,\n    CScriptOp,\n    OP_1,\n    OP_CHECKMULTISIG,\n    OP_CHECKSIG,\n    OP_RETURN,\n    OP_TRUE,\n)\nfrom .script_util import (\n    key_to_p2wpkh_script,\n    script_to_p2wsh_script,\n)\nfrom .util import assert_equal\n\nWITNESS_SCALE_FACTOR = 4\nMAX_BLOCK_SIGOPS = 20000\nMAX_BLOCK_SIGOPS_WEIGHT = MAX_BLOCK_SIGOPS * WITNESS_SCALE_FACTOR\n\n# Genesis block time (regtest)\nTIME_GENESIS_BLOCK = 1296688602\n\n# Coinbase transaction outputs can only be spent after this number of new blocks (network rule)\nCOINBASE_MATURITY = 100\n\n# Soft-fork activation heights\nDERSIG_HEIGHT = 102  # BIP 66\nCLTV_HEIGHT = 111  # BIP 65\nCSV_ACTIVATION_HEIGHT = 432\n\n# From BIP141\nWITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n\nNORMAL_GBT_REQUEST_PARAMS = {\"rules\": [\"segwit\"]}\nVERSIONBITS_LAST_OLD_BLOCK_VERSION = 4\n\n\ndef create_block(hashprev=None, coinbase=None, ntime=None, *, version=None, tmpl=None, txlist=None):\n    \"\"\"Create a block (with regtest difficulty).\"\"\"\n    block = CBlock()\n    if tmpl is None:\n        tmpl = {}\n    block.nVersion = version or tmpl.get('version') or VERSIONBITS_LAST_OLD_BLOCK_VERSION\n    block.nTime = ntime or tmpl.get('curtime') or int(time.time() + 600)\n    block.hashPrevBlock = hashprev or int(tmpl['previousblockhash'], 0x10)\n    if tmpl and not tmpl.get('bits') is None:\n        block.nBits = struct.unpack('>I', bytes.fromhex(tmpl['bits']))[0]\n    else:\n        block.nBits = 0x207fffff  # difficulty retargeting is disabled in REGTEST chainparams\n    if coinbase is None:\n        coinbase = create_coinbase(height=tmpl['height'])\n    block.vtx.append(coinbase)\n    if txlist:\n        for tx in txlist:\n            if not hasattr(tx, 'calc_sha256'):\n                tx = tx_from_hex(tx)\n            block.vtx.append(tx)\n    block.hashMerkleRoot = block.calc_merkle_root()\n    block.calc_sha256()\n    return block\n\ndef get_witness_script(witness_root, witness_nonce):\n    witness_commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n    output_data = WITNESS_COMMITMENT_HEADER + ser_uint256(witness_commitment)\n    return CScript([OP_RETURN, output_data])\n\ndef add_witness_commitment(block, nonce=0):\n    \"\"\"Add a witness commitment to the block's coinbase transaction.\n\n    According to BIP141, blocks with witness rules active must commit to the\n    hash of all in-block tra",
    "# This program is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by the\n# Free Software Foundation; only version 2 of the License is applicable.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along\n# with this program; if not, write to the Free Software Foundation, Inc.,\n# 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n# This plugin is to monitor queue lengths in Redis. Based on redis_info.py by\n# Garret Heaton <powdahound at gmail.com>, hence the GPL at the top.\n\nimport collectd\nfrom contextlib import closing, contextmanager\nimport socket\n\n\n# Host to connect to. Override in config by specifying 'Host'.\nREDIS_HOST = 'localhost'\n\n# Port to connect on. Override in config by specifying 'Port'.\nREDIS_PORT = 6379\n\n# Verbose logging on/off. Override in config by specifying 'Verbose'.\nVERBOSE_LOGGING = False\n\n# Queue names to monitor. Override in config by specifying 'Queues'.\nQUEUE_NAMES = []\n\n\ndef fetch_queue_lengths(queue_names):\n    \"\"\"Connect to Redis server and request queue lengths.\n    \n    Return a dictionary from queue names to integers.\n    \n    \"\"\"\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((REDIS_HOST, REDIS_PORT))\n        log_verbose('Connected to Redis at %s:%s' % (REDIS_HOST, REDIS_PORT))\n    except socket.error, e:\n        collectd.error('redis_queues plugin: Error connecting to %s:%d - %r'\n                       % (REDIS_HOST, REDIS_PORT, e))\n        return None\n\n    queue_lengths = {}\n\n    with closing(s) as redis_socket:\n        for queue_name in queue_names:\n            log_verbose('Requesting length of queue %s' % queue_name)\n            redis_socket.sendall('llen %s\\r\\n' % queue_name)\n            with closing(redis_socket.makefile('r')) as response_file:\n                response = response_file.readline()\n            if response.startswith(':'):\n                try:\n                    queue_lengths[queue_name] = int(response[1:-1])\n                except ValueError:\n                    log_verbose('Invalid response: %r' % response)\n            else:\n                log_verbose('Invalid response: %r' % response)\n\n    return queue_lengths\n\n\ndef configure_callback(conf):\n    \"\"\"Receive configuration block\"\"\"\n    global REDIS_HOST, REDIS_PORT, VERBOSE_LOGGING, QUEUE_NAMES\n    for node in conf.children:\n        if node.key == 'Host':\n            REDIS_HOST = node.values[0]\n        elif node.key == 'Port':\n            REDIS_PORT = int(node.values[0])\n        elif node.key == 'Verbose':\n            VERBOSE_LOGGING = bool(node.values[0])\n        elif node.key == 'Queues':\n            QUEUE_NAMES = list(node.values)\n        else:\n            collect",
    "from .DiscreteFactor import State, DiscreteFactor\nfrom .CPD import TabularCPD\nfrom .JointProbabilityDistribution import JointProbabilityDistribution\n\n__all__ = ['TabularCPD',\n           'DiscreteFactor',\n           'State'\n           ]\n",
    "from crispy_forms.helper import FormHelper\nfrom crispy_forms.layout import Fieldset, Layout\nfrom django import forms\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom django.db import transaction\nfrom django.forms import ModelForm\nfrom django.utils.translation import ugettext_lazy as _\nfrom django_filters import FilterSet\nfrom easy_select2 import Select2\n\nfrom crispy_layout_mixin import form_actions, to_row\nfrom utils import (TIPO_TELEFONE, YES_NO_CHOICES, get_medicos,\n                   get_or_create_grupo)\n\nfrom .models import Especialidade, EspecialidadeMedico, Usuario\n\n\nclass EspecialidadeMedicoFilterSet(FilterSet):\n\n    class Meta:\n        model = EspecialidadeMedico\n        fields = ['especialidade']\n\n    def __init__(self, *args, **kwargs):\n        super(EspecialidadeMedicoFilterSet, self).__init__(*args, **kwargs)\n\n        row1 = to_row([('especialidade', 12)])\n\n        self.form.helper = FormHelper()\n        self.form.helper.form_method = 'GET'\n        self.form.helper.layout = Layout(\n            Fieldset(_('Pesquisar M\u00e9dico'),\n                     row1, form_actions(save_label='Filtrar'))\n        )\n\n\nclass MudarSenhaForm(forms.Form):\n    nova_senha = forms.CharField(\n        label=\"Nova Senha\", max_length=30,\n        widget=forms.PasswordInput(\n          attrs={'class': 'form-control form-control-lg',\n                 'name': 'senha',\n                 'placeholder': 'Nova Senha'}))\n\n    confirmar_senha = forms.CharField(\n        label=\"Confirmar Senha\", max_length=30,\n        widget=forms.PasswordInput(\n          attrs={'class': 'form-control form-control-lg',\n                 'name': 'confirmar_senha',\n                 'placeholder': 'Confirmar Senha'}))\n\n\nclass LoginForm(AuthenticationForm):\n    username = forms.CharField(\n        label=\"Username\", max_length=30,\n        widget=forms.TextInput(\n            attrs={'class': 'form-control form-control-lg',\n                   'name': 'username',\n                   'placeholder': 'Usu\u00e1rio'}))\n\n    password = forms.CharField(\n        label=\"Password\", max_length=30,\n        widget=forms.PasswordInput(\n            attrs={'class': 'form-control',\n                   'name': 'password',\n                   'placeholder': 'Senha'}))\n\n\nclass UsuarioForm(ModelForm):\n\n    # Usu\u00e1rio\n    password = forms.CharField(\n        max_length=20,\n        label=_('Senha'),\n        widget=forms.PasswordInput())\n\n    password_confirm = forms.CharField(\n        max_length=20,\n        label=_('Confirmar Senha'),\n        widget=forms.PasswordInput())\n\n    class Meta:\n        model = Usuario\n        fields = ['username', 'email', 'nome', 'password', 'password_confirm',\n                  'data_nascimento', 'sexo', 'plano', 'tipo', 'cep', 'end',\n                  'numero', 'complemento', 'bairro', 'referencia',\n                  'primeiro_telef",
    "#! python3\n\n\"\"\"\n    GUI for Ultrasonic Temperature Controller\n    Copyright (c) 2015 by Stefan Lehmann\n\n\"\"\"\n\nimport os\nimport datetime\nimport logging\nimport json\n\nimport serial\nfrom qtpy.QtWidgets import QAction, QDialog, QMainWindow, QMessageBox, \\\n    QDockWidget, QLabel, QFileDialog, QApplication\nfrom qtpy.QtGui import QIcon\nfrom qtpy.QtCore import QSettings, QCoreApplication, Qt, QThread, \\\n    Signal\n\nfrom serial.serialutil import SerialException\nfrom jsonwatch.jsonitem import JsonItem\nfrom jsonwatch.jsonnode import JsonNode\nfrom jsonwatchqt.logger import LoggingWidget\nfrom pyqtconfig.config import QSettingsManager\nfrom jsonwatchqt.plotsettings import PlotSettingsWidget\nfrom jsonwatchqt.objectexplorer import ObjectExplorer\nfrom jsonwatchqt.plotwidget import PlotWidget\nfrom jsonwatchqt.serialdialog import SerialDialog, PORT_SETTING, \\\n    BAUDRATE_SETTING\nfrom jsonwatchqt.utilities import critical, pixmap\nfrom jsonwatchqt.recorder import RecordWidget\nfrom jsonwatchqt.csvsettings import CSVSettingsDialog, DECIMAL_SETTING, \\\n    SEPARATOR_SETTING\n\n\nlogger = logging.getLogger(\"jsonwatchqt.mainwindow\")\nWINDOWSTATE_SETTING = \"mainwindow/windowstate\"\nGEOMETRY_SETTING = \"mainwindow/geometry\"\nFILENAME_SETTING = \"mainwindow/filename\"\n\n\ndef strip(s):\n    return s.strip()\n\n\ndef utf8_to_bytearray(x):\n    return bytearray(x, 'utf-8')\n\n\ndef bytearray_to_utf8(x):\n    return x.decode('utf-8')\n\n\ndef set_default_settings(settings: QSettingsManager):\n    settings.set_defaults({\n        DECIMAL_SETTING: ',',\n        SEPARATOR_SETTING: ';'\n    })\n\n\nclass SerialWorker(QThread):\n    data_received = Signal(datetime.datetime, str)\n\n    def __init__(self, ser: serial.Serial, parent=None):\n        super().__init__(parent)\n        self.serial = ser\n        self._quit = False\n\n    def run(self):\n        while not self._quit:\n            try:\n                if self.serial.isOpen() and self.serial.inWaiting():\n                    self.data_received.emit(\n                        datetime.datetime.now(),\n                        strip(bytearray_to_utf8(self.serial.readline()))\n                    )\n            except SerialException:\n                pass\n\n    def quit(self):\n        self._quit = True\n\n\nclass MainWindow(QMainWindow):\n\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.recording_enabled = False\n        self.serial = serial.Serial()\n        self.rootnode = JsonNode('')\n        self._connected = False\n        self._dirty = False\n        self._filename = None\n\n        # settings\n        self.settings = QSettingsManager()\n        set_default_settings(self.settings)\n\n        # Controller Settings\n        self.settingsDialog = None\n\n        # object explorer\n        self.objectexplorer = ObjectExplorer(self.rootnode, self)\n        self.objectexplorer.nodevalue_changed.connect(self.send_serialdata)\n        self.objectexplorer.nodeproperty_changed.connect(self.set_dirty)\n        self.objectexplorerDockWidget = QDockWidget(self.tr(\"objec",
    "# -*- coding: utf-8 -*-\n\"\"\"\n\n\n\"\"\"\nfrom datetime import datetime, timedelta\nimport os\n\nfrom flask import request\nfrom flask import Flask\nimport pytz\n\nimport db\nfrom utils import get_remote_addr, get_location_data\n\n\napp = Flask(__name__)\n\n\n@app.route('/yo-water/', methods=['POST', 'GET'])\ndef yowater():\n\n    payload = request.args if request.args else request.get_json(force=True)\n    username = payload.get('username')\n\n    reminder = db.reminders.find_one({'username': username})\n\n    reply_object = payload.get('reply')\n\n    if reply_object is None:\n\n        if db.reminders.find_one({'username': username}) is None:\n\n            address = get_remote_addr(request)\n            data = get_location_data(address)\n            if not data:\n                return 'Timezone needed'\n\n            user_data = {'created': datetime.now(pytz.utc),\n                         'username': username}\n\n            if data.get('time_zone'):\n                user_data.update({'timezone': data.get('time_zone')})\n\n            db.reminders.insert(user_data)\n\n            return 'OK'\n\n    else:\n        reply_text = reply_object.get('text')\n\n        if reply_text == u'Can\\'t right now \ud83d\ude16':\n            reminder['trigger_date'] = datetime.now(pytz.utc) + timedelta(minutes=15)\n        else:\n\n            reminder['step'] += 1\n            reminder['trigger_date'] = datetime.now(pytz.utc) + timedelta(minutes=60)\n\n        reminder['last_reply_date'] = datetime.now(pytz.utc)\n\n        db.reminders.update({'username': username},\n                            reminder)\n\n        db.replies.insert({'username': username,\n                           'created': datetime.now(pytz.utc),\n                           'reply': reply_text})\n\n        return 'OK'\n\n\nif __name__ == \"__main__\":\n    app.debug = True\n    app.run(host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", \"5000\")))\n",
    "from django.conf.urls import patterns, include, url\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\n\nadmin.autodiscover()\n\nimport views\n\nurlpatterns = patterns('',\n    url(r'^pis', views.pis),\n    url(r'^words', views.words, { 'titles': False }),\n    url(r'^projects', views.projects),\n    url(r'^posters', views.posters),\n    url(r'^posterpresenters', views.posterpresenters),\n    url(r'^pigraph', views.pigraph),\n    url(r'^institutions', views.institutions),                    \n    url(r'^institution/(?P<institutionid>\\d+)', views.institution),                    \n    url(r'^profile/$', views.profile),\n    url(r'^schedule/(?P<email>\\S+)', views.schedule),\n    url(r'^ratemeeting/(?P<rmid>\\d+)/(?P<email>\\S+)', views.ratemeeting),\n    url(r'^submitrating/(?P<rmid>\\d+)/(?P<email>\\S+)', views.submitrating),\n    url(r'^feedback/(?P<email>\\S+)', views.after),\n    url(r'^breakouts', views.breakouts),\n    url(r'^breakout/(?P<bid>\\d+)', views.breakout),\n    url(r'^about', views.about),\n    url(r'^buginfo', views.buginfo),\n    url(r'^allrms', views.allrms),\n    url(r'^allratings', views.allratings),\n    url(r'^login', views.login),\n    url(r'^logout', views.logout),\n    url(r'^edit_home_page', views.edit_home_page),                       \n    url(r'^pi/(?P<userid>\\d+)', views.pi), # , name = 'pi'),\n    url(r'^pi/(?P<email>\\S+)', views.piEmail), # , name = 'pi'),\n    url(r'^project/(?P<abstractid>\\S+)', views.project, name = 'project'),\n    url(r'^scope=(?P<scope>\\w+)/(?P<url>.+)$', views.set_scope),\n    url(r'^active=(?P<active>\\d)/(?P<url>.+)$', views.set_active),\n    url(r'^admin/', include(admin.site.urls)),\n    (r'', include('django_browserid.urls')),\n    url(r'^$', views.index, name = 'index'),\n    ) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport base64\nimport json\n\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\n\nfrom behave import *\n\n@step('I share first element in the history list')\ndef step_impl(context):\n    context.execute_steps(u'''\n        given I open History dialog\n    ''')\n    history = context.browser.find_element_by_id(\"HistoryPopup\")\n    entries = history.find_elements_by_xpath('.//li[not(@data-clone-template)]')\n    assert len(entries) > 0, \"There are no entries in the history\"\n    item = entries[0]\n    item.find_elements_by_xpath('.//*[@data-share-item]')[0].click()\n\n@then('the json to share is shown with url \"{url}\" and contains the following headers')\ndef step_impl(context, url):\n    # Wait for modal to appear\n    WebDriverWait(context.browser, 10).until(\n        expected_conditions.visibility_of_element_located(\n            (By.ID, 'ShareRequestForm')))\n    output = context.browser.execute_script(\"return restman.ui.editors.get('#ShareRequestEditor').getValue();\")\n\n    snippet = json.loads(output)\n\n    assert url == snippet[\"url\"], \"URL: \\\"{}\\\" not in output.\\nOutput: {}\".format(value, output)\n    for row in context.table:\n        assert row['key'] in snippet['headers'], \"Header {} is not in output\".format(row['key'])\n        assert row['value'] == snippet['headers'][row['key']], \"Header value is not correct. Expected: {}; Actual: {}\".format(value, snippet['headers'][name])\n\n@step('I click on import request')\ndef step_impl(context):\n    context.execute_steps(u'''\n        given I open History dialog\n    ''')\n    # Click on import\n    context.browser.find_element_by_id('ImportHistory').click()\n    WebDriverWait(context.browser, 10).until(\n        expected_conditions.visibility_of_element_located(\n            (By.ID, 'ImportRequestForm')))\n\n@step('I write a shared request for \"{url}\"')\ndef step_impl(context, url):\n    req = json.dumps({\n        \"method\": \"POST\",\n        \"url\": url,\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n            \"X-Test-Header\": \"shared_request\"\n        },\n        \"body\": {\n            \"type\": \"form\",\n            \"content\": {\n                \"SomeKey\": \"SomeValue11233\",\n                \"SomeOtherKey\": \"SomeOtherValue019\",\n            }\n        }\n    })\n    context.browser.execute_script(\"return restman.ui.editors.setValue('#ImportRequestEditor', atob('{}'));\".format(base64.b64encode(req)))\n\n@step('I click on load import request')\ndef step_impl(context):\n    # Import request\n    context.browser.find_element_by_xpath(\"//*[@id='ImportRequestForm']//input[@value='Import']\").click()\n",
    "#!/usr/bin/env python\n\"\"\"\nThis script is used to run tests, create a coverage report and output the\nstatistics at the end of the tox run.\nTo run this script just execute ``tox``\n\"\"\"\nimport re\n\nfrom fabric.api import local, warn\nfrom fabric.colors import green, red\n\n\nif __name__ == '__main__':\n    # Kept some files for backwards compatibility. If support is dropped,\n    # remove it here\n    deprecated_files = '*utils_email*,*utils_log*'\n\n    local('flake8 --ignore=E126 --ignore=W391 --statistics'\n          ' --exclude=submodules,migrations,build .')\n    local('coverage run --source=\"django_libs\" manage.py test -v 2'\n          ' --traceback --failfast --settings=django_libs.tests.settings'\n          ' --pattern=\"*_tests.py\"')\n    local('coverage html -d coverage'\n          ' --omit=\"*__init__*,*/settings/*,*/migrations/*,*/tests/*,'\n          '*admin*,{}\"'.format(deprecated_files))\n    total_line = local('grep -n pc_cov coverage/index.html', capture=True)\n    percentage = float(re.findall(r'(\\d+)%', total_line)[-1])\n    if percentage < 100:\n        warn(red('Coverage is {0}%'.format(percentage)))\n    else:\n        print(green('Coverage is {0}%'.format(percentage)))\n",
    "from baroque.entities.event import Event\n\n\nclass EventCounter:\n    \"\"\"A counter of events.\"\"\"\n\n    def __init__(self):\n        self.events_count = 0\n        self.events_count_by_type = dict()\n\n    def increment_counting(self, event):\n        \"\"\"Counts an event\n\n        Args:\n            event (:obj:`baroque.entities.event.Event`): the event to be counted\n\n        \"\"\"\n        assert isinstance(event, Event)\n        self.events_count += 1\n        t = type(event.type)\n        if t in self.events_count_by_type:\n            self.events_count_by_type[t] += 1\n        else:\n            self.events_count_by_type[t] = 1\n\n    def count_all(self):\n        \"\"\"Tells how many events have been counted globally\n\n        Returns:\n            int\n\n        \"\"\"\n        return self.events_count\n\n    def count(self, eventtype):\n        \"\"\"Tells how many events have been counted of the specified type\n\n        Args:\n            eventtype (:obj:`baroque.entities.eventtype.EventType`): the type of events to be counted\n\n        Returns:\n            int\n\n        \"\"\"\n        return self.events_count_by_type.get(type(eventtype), 0)\n\n",
    "import numpy as np\n\n\nclass Surface(object):\n    def __init__(self, image, edge_points3d, edge_points2d):\n        \"\"\"\n        Constructor for a surface defined by a texture image and\n        4 boundary points. Choose the first point as the origin\n        of the surface's coordinate system.\n\n        :param image: image array\n        :param edge_points3d: array of 3d coordinates of 4 corner points in clockwise direction\n        :param edge_points2d: array of 2d coordinates of 4 corner points in clockwise direction\n        \"\"\"\n        assert len(edge_points3d) == 4 and len(edge_points2d) == 4\n\n        self.image = image\n        self.edge_points3d = edge_points3d\n        self.edge_points2d = np.float32(edge_points2d)  # This is required for using cv2's getPerspectiveTransform\n        self.normal = self._get_normal_vector()\n\n    def top_left_corner3d(self):\n        return self.edge_points3d[0]\n\n    def top_right_corner3d(self):\n        return self.edge_points3d[1]\n\n    def bottom_right_corner3d(self):\n        return self.edge_points3d[2]\n\n    def bottom_left_corner3d(self):\n        return self.edge_points3d[3]\n\n    def distance_to_point(self, point):\n        point_to_surface = point - self.top_left_corner3d()\n        distance_to_surface = self.normal.dot(point_to_surface)\n        return distance_to_surface\n\n    def _get_normal_vector(self):\n        \"\"\"\n        :return: the normal vector of the surface. It determined the front side\n        of the surface and it's not necessarily a unit vector\n        \"\"\"\n        p0 = self.edge_points3d[0]\n        p1 = self.edge_points3d[1]\n        p3 = self.edge_points3d[3]\n        v1 = p3 - p0\n        v2 = p1 - p0\n        normal = np.cross(v1, v2)\n        norm = np.linalg.norm(normal)\n        return normal / norm\n\n\nclass Polyhedron(object):\n    def __init__(self, surfaces):\n        self.surfaces = surfaces\n\n\nclass Space(object):\n    def __init__(self, models=None):\n        self.models = models or []\n\n    def add_model(self, model):\n        assert isinstance(model, Polyhedron)\n        self.models.append(model)\n\n\nclass Line2D(object):\n    def __init__(self, point1, point2):\n        \"\"\"\n        Using the line equation a*x + b*y + c = 0 with b >= 0\n        :param point1: starting point\n        :param point2: ending point\n        :return: a Line object\n        \"\"\"\n        assert len(point1) == 2 and len(point2) == 2\n\n        self.a = point2[1] - point1[1]\n        self.b = point1[0] - point2[0]\n        self.c = point1[1] * point2[0] - point1[0] * point2[1]\n\n        if self.b < 0:\n            self.a = -self.a\n            self.b = -self.b\n            self.c = -self.c\n\n    def is_point_on_left(self, point):\n        return self.a * point[0] + self.b * point[1] + self.c > 0\n\n    def is_point_on_right(self, point):\n        return self.a * point[0] + self.b * point[1] + self.c < 0\n\n    def is_point_on_line(self, point):\n        return self.a * point[0] + self.b * point[1] + self.c == 0\n\n    def get_y_from_x(self, x):\n        if sel",
    "# coding: utf-8\n\n\"\"\"\n    ORCID Member\n\n    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n\n    OpenAPI spec version: Latest\n    \n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\"\"\"\n\n\nfrom pprint import pformat\nfrom six import iteritems\nimport re\n\n\nclass ContributorOrcid(object):\n    \"\"\"\n    NOTE: This class is auto generated by the swagger code generator program.\n    Do not edit the class manually.\n    \"\"\"\n    def __init__(self, uri=None, path=None, host=None):\n        \"\"\"\n        ContributorOrcid - a model defined in Swagger\n\n        :param dict swaggerTypes: The key is attribute name\n                                  and the value is attribute type.\n        :param dict attributeMap: The key is attribute name\n                                  and the value is json key in definition.\n        \"\"\"\n        self.swagger_types = {\n            'uri': 'str',\n            'path': 'str',\n            'host': 'str'\n        }\n\n        self.attribute_map = {\n            'uri': 'uri',\n            'path': 'path',\n            'host': 'host'\n        }\n\n        self._uri = uri\n        self._path = path\n        self._host = host\n\n    @property\n    def uri(self):\n        \"\"\"\n        Gets the uri of this ContributorOrcid.\n\n        :return: The uri of this ContributorOrcid.\n        :rtype: str\n        \"\"\"\n        return self._uri\n\n    @uri.setter\n    def uri(self, uri):\n        \"\"\"\n        Sets the uri of this ContributorOrcid.\n\n        :param uri: The uri of this ContributorOrcid.\n        :type: str\n        \"\"\"\n\n        self._uri = uri\n\n    @property\n    def path(self):\n        \"\"\"\n        Gets the path of this ContributorOrcid.\n\n        :return: The path of this ContributorOrcid.\n        :rtype: str\n        \"\"\"\n        return self._path\n\n    @path.setter\n    def path(self, path):\n        \"\"\"\n        Sets the path of this ContributorOrcid.\n\n        :param path: The path of this ContributorOrcid.\n        :type: str\n        \"\"\"\n\n        self._path = path\n\n    @property\n    def host(self):\n        \"\"\"\n        Gets the host of this ContributorOrcid.\n\n        :return: The host of this ContributorOrcid.\n        :rtype: str\n        \"\"\"\n        return self._host\n\n    @host.setter\n    def host(self, host):\n        \"\"\"\n        Sets the host of this ContributorOrcid.\n\n        :param host: The host of this ContributorOrcid.\n        :type: str\n        \"\"\"\n\n        self._host = host\n\n    def to_dict(self):\n        \"\"\"\n        Returns the model properties as a dict\n        \"\"\"\n        result = {}\n\n        for attr, _ in iteritems(self.swagger_types):\n            value = getattr(self, attr)\n            if isinstance(value, list):\n                result[attr] = list(map(\n                    lambda x: x.to_dict() if hasattr(x, \"to_dict\") else x,\n                    value\n                ))\n            elif hasattr(value, \"to_dict\"):\n                result[attr] = value.to_dict()\n            elif isinstance(valu",
    "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import models, migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Page',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('title', models.CharField(unique=True, max_length=150)),\n                ('slug', models.SlugField(unique=True, max_length=150)),\n                ('posted', models.DateTimeField(auto_now_add=True, db_index=True)),\n            ],\n            options={\n            },\n            bases=(models.Model,),\n        ),\n    ]\n",
    "from behave import given, when, then\nfrom genosdb.models import User\nfrom genosdb.exceptions import UserNotFound\n\n# 'mongodb://localhost:27017/')\n\n\n@given('a valid user with values {username}, {password}, {email}, {first_name}, {last_name}')\ndef step_impl(context, username, password, email, first_name, last_name):\n    context.base_user = User(username=username, email=email, password=password, first_name=first_name,\n                        last_name=last_name)\n\n\n@when('I add the user to the collection')\ndef step_impl(context):\n    context.user_service.save(context.base_user)\n\n\n@then('I check {user_name} exists')\ndef step_impl(context, user_name):\n    user_exists = context.user_service.exists(user_name)\n    assert context.base_user.username == user_exists['username']\n    assert context.base_user.password == user_exists['password']\n    assert context.base_user.email == user_exists['email']\n    assert context.base_user.first_name == user_exists['first_name']\n    assert context.base_user.last_name == user_exists['last_name']\n    assert user_exists['_id'] is not None\n\n@given('I update {username} {field} with {value}')\ndef step_impl(context, username, field, value):\n    user = context.user_service.exists(username)\n\n    if user is not None:\n        user[field] = value\n        context.user_service.update(user.to_json())\n    else:\n        raise UserNotFound(username, \"User was not found\")\n\n\n\n\n\n@then('I check {username} {field} is {value}')\ndef step_impl(context, username, field, value):\n    user = context.user_service.exists(username)\n\n    if user is not None:\n        assert user[field] == value\n    else:\n        raise UserNotFound(username, \"User was not found\")\n\n\n\n",
    "import unittest\nfrom src.data_structures.mockdata import MockData\n\n\nclass TestMockData (unittest.TestCase):\n\n    def setUp(self):\n\n        self.data = MockData()\n\n    def test_random_data(self):\n        data = MockData()\n        a_set = data.get_random_elements(10)\n        self.assertTrue(len(a_set) == 10, \"the data should have 10 elements!\")\n\n    if __name__ == '__main__':\n        unittest.main()",
    "from rest_framework.filters import (\n    FilterSet\n)\nfrom trialscompendium.trials.models import Treatment\n\n\nclass TreatmentListFilter(FilterSet):\n    \"\"\"\n    Filter query list from treatment database table\n    \"\"\"\n    class Meta:\n        model = Treatment\n        fields = {'id': ['exact', 'in'],\n                  'no_replicate': ['exact', 'in', 'gte', 'lte'],\n                  'nitrogen_treatment': ['iexact', 'in', 'icontains'],\n                  'phosphate_treatment': ['iexact', 'in', 'icontains'],\n                  'tillage_practice': ['iexact', 'in', 'icontains'],\n                  'cropping_system': ['iexact', 'in', 'icontains'],\n                  'crops_grown': ['iexact', 'in', 'icontains'],\n                  'farm_yard_manure': ['iexact', 'in', 'icontains'],\n                  'farm_residue': ['iexact', 'in', 'icontains'],\n                  }\n        order_by = ['tillage_practice', 'cropping_system', 'crops_grown']\n",
    "\"\"\"\nWSGI config for Carkinos project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.9/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"Carkinos.settings\")\n\napplication = get_wsgi_application()\n",
    "from io import BytesIO\n\nfrom django import forms\nfrom django.http import HttpResponse\nfrom django.template import Context, Template\n\nfrom braces.views import LoginRequiredMixin\nfrom django.views.generic import DetailView, ListView\nfrom django.views.decorators.http import require_http_methods\n\nfrom django.contrib import messages\nfrom django.shortcuts import render, redirect\nfrom django.conf import settings\n\nfrom reportlab.pdfgen.canvas import Canvas\n\nfrom reportlab.lib.units import inch\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.lib.pagesizes import letter, landscape\n\nfrom reportlab.platypus import Spacer\nfrom reportlab.platypus import Frame\nfrom reportlab.platypus import Paragraph\nfrom reportlab.platypus import PageTemplate\nfrom reportlab.platypus import BaseDocTemplate\n\nfrom environ import Env\n\nfrom members.models import Member\n\n\n@require_http_methods(['GET', 'POST'])\ndef member_list(request):\n    env = Env()\n    MEMBERS_PASSWORD = env('MEMBERS_PASSWORD')\n\n    # handle form submission\n    if request.POST:\n        pw_form = PasswordForm(request.POST)\n\n        if pw_form.is_valid() and pw_form.cleaned_data['password'] == MEMBERS_PASSWORD:\n            request.session['password'] = pw_form.cleaned_data['password']\n            return redirect('members:member_list')\n\n        messages.error(request, \"The password you entered was incorrect, please try again.\")\n\n    # form not being submitted, check password\n    if (request.session.get('password') and request.session['password'] == MEMBERS_PASSWORD):\n        member_list = Member.objects.all()\n        return render(request, 'members/member_list.html', {\n            'member_list': member_list,\n        })\n\n    # password is wrong, render form\n    pw_form = PasswordForm()\n    return render(request, 'members/members_password_form.html', {\n        'pw_form': pw_form,\n    })\n\n\nclass PasswordForm(forms.Form):\n    password = forms.CharField(max_length=20,\n        widget=forms.PasswordInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Enter Password',\n    }))\n\n\ndef build_frames(pwidth, pheight, ncols):\n    frames = []\n    for i in range(ncols):\n        f = Frame(x1=(i*((pwidth-30) / ncols)+15),\n                  y1=0,\n                  width=((pwidth-30) / ncols),\n                  height=pheight+2,\n                  leftPadding=15,\n                  rightPadding=15,\n                  topPadding=15,\n                  bottomPadding=15,\n                  showBoundary=True)\n        frames.append(f)\n    frames[0].showBoundary=False\n    frames[3].showBoundary=False\n    return frames\n\ndef member_list_pdf(request):\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = 'attachment; filename=\"memberlist.pdf\"'\n\n    buffer = BytesIO()\n\n    NCOLUMNS = 4\n    PAGE_WIDTH, PAGE_HEIGHT = landscape(letter)\n\n    styles = getSampleStyleSheet()\n\n    ptemplate = PageTemplate(frames=build_frames(PAGE_WIDTH, PAGE_HEIGHT, NCOLUMNS))\n    doc = ",
    "\nimport time\nimport multiprocessing\nfrom flask import Flask\n\napp = Flask(__name__)\nbackProc = None\n\ndef testFun():\n    print('Starting')\n    while True:\n        time.sleep(3)\n        print('looping')\n        time.sleep(3)\n        print('3 Seconds Later')\n\n@app.route('/')\ndef root():\n\n    return 'Started a background process with PID ' + str(backProc.pid) + \" is running: \" + str(backProc.is_alive())\n\n@app.route('/kill')\ndef kill():\n    backProc.terminate()\n    return 'killed: ' + str(backProc.pid)\n\n@app.route('/kill_all')\ndef kill_all():\n    proc = multiprocessing.active_children()\n    for p in proc:\n        p.terminate()\n    return 'killed all'\n\n@app.route('/active')\ndef active():\n    proc = multiprocessing.active_children()\n    arr = []\n    for p in proc:\n        print(p.pid)\n        arr.append(p.pid)\n\n    return str(arr)\n\n@app.route('/start')\ndef start():\n    global backProc\n    backProc = multiprocessing.Process(target=testFun, args=(), daemon=True)\n    backProc.start()\n    return 'started: ' + str(backProc.pid)\n\nif __name__ == '__main__':\n    app.run()\n",
    "'''\r\nCreated by auto_sdk on 2014-12-17 17:22:51\r\n'''\r\nfrom top.api.base import RestApi\r\nclass SubusersGetRequest(RestApi):\r\n\tdef __init__(self,domain='gw.api.taobao.com',port=80):\r\n\t\tRestApi.__init__(self,domain, port)\r\n\t\tself.user_nick = None\r\n\r\n\tdef getapiname(self):\r\n\t\treturn 'taobao.subusers.get'\r\n",
    "# coding: utf-8\n\nimport unittest\n\nfrom config_reader import ConfigReader\n\nclass TestConfigReader(unittest.TestCase):\n\n    def setUp(self):\n        self.config = ConfigReader(\"\"\"\n            <root>\n                <person>\n                    <name>\u5c71\u7530</name>\n                    <age>15</age>\n                </person>\n                <person>\n                    <name>\u4f50\u85e4</name>\n                    <age>43</age>\n                </person>\n            </root>\n            \"\"\")\n\n\n    def test_get_names(self):\n        self.assertEqual(self.config.get_names(), ['\u5c71\u7530', '\u4f50\u85e4'])\n\n    def test_get_ages(self):\n        self.assertEqual(self.config.get_ages(), ['15', '43'])\n",
    "# project/server/tests/test_user.py\n\n\nimport datetime\nimport unittest\n\nfrom flask_login import current_user\n\nfrom base import BaseTestCase\nfrom project.server import bcrypt\nfrom project.server.models import User\nfrom project.server.user.forms import LoginForm\n\n\nclass TestUserBlueprint(BaseTestCase):\n    def test_correct_login(self):\n        # Ensure login behaves correctly with correct credentials.\n        with self.client:\n            response = self.client.post(\n                \"/login\",\n                data=dict(email=\"ad@min.com\", password=\"admin_user\"),\n                follow_redirects=True,\n            )\n            self.assertIn(b\"Welcome\", response.data)\n            self.assertIn(b\"Logout\", response.data)\n            self.assertIn(b\"Members\", response.data)\n            self.assertTrue(current_user.email == \"ad@min.com\")\n            self.assertTrue(current_user.is_active())\n            self.assertEqual(response.status_code, 200)\n\n    def test_logout_behaves_correctly(self):\n        # Ensure logout behaves correctly - regarding the session.\n        with self.client:\n            self.client.post(\n                \"/login\",\n                data=dict(email=\"ad@min.com\", password=\"admin_user\"),\n                follow_redirects=True,\n            )\n            response = self.client.get(\"/logout\", follow_redirects=True)\n            self.assertIn(b\"You were logged out. Bye!\", response.data)\n            self.assertFalse(current_user.is_active)\n\n    def test_logout_route_requires_login(self):\n        # Ensure logout route requres logged in user.\n        response = self.client.get(\"/logout\", follow_redirects=True)\n        self.assertIn(b\"Please log in to access this page\", response.data)\n\n    def test_member_route_requires_login(self):\n        # Ensure member route requres logged in user.\n        response = self.client.get(\"/members\", follow_redirects=True)\n        self.assertIn(b\"Please log in to access this page\", response.data)\n\n    def test_validate_success_login_form(self):\n        # Ensure correct data validates.\n        form = LoginForm(email=\"ad@min.com\", password=\"admin_user\")\n        self.assertTrue(form.validate())\n\n    def test_validate_invalid_email_format(self):\n        # Ensure invalid email format throws error.\n        form = LoginForm(email=\"unknown\", password=\"example\")\n        self.assertFalse(form.validate())\n\n    def test_get_by_id(self):\n        # Ensure id is correct for the current/logged in user.\n        with self.client:\n            self.client.post(\n                \"/login\",\n                data=dict(email=\"ad@min.com\", password=\"admin_user\"),\n                follow_redirects=True,\n            )\n            self.assertTrue(current_user.id == 1)\n\n    def test_registered_on_defaults_to_datetime(self):\n        # Ensure that registered_on is a datetime.\n        with self.client:\n            self.client.post(\n                \"/login\",\n                data=dict(email=\"ad@min.com\", password=\"admin_user\"),\n                follow_red",
    "inside = lambda x, y: 4*x*x+y*y <= 100\n\ndef coll(sx, sy, dx, dy):\n    m = 0\n    for p in range(32):\n        m2 = m + 2**(-p)\n        if inside(sx + dx * m2, sy + dy * m2): m = m2\n    return (sx + dx*m, sy + dy*m)\n\ndef norm(x, y):\n    l = (x*x + y*y)**0.5\n    return (x/l, y/l)\n\nsx, sy = 0, 10.1\ndx, dy = 1.4, -19.7\n\nfor I in range(999):\n    sx, sy = coll(sx, sy, dx, dy)\n    if sy > 0 and abs(sx) <= 0.01:\n        print(I)\n        break\n    mx, my = norm(1, -4*sx/sy)\n    d = mx*dx + my*dy\n    dx, dy = -dx + 2 * mx * d, -dy + 2 * my * d\n",
    "import sys\n\nMAX_NUM_STORED_LINES = 200\nMAX_NUM_LINES = 10\nLINEWIDTH = 80\n\nclass CmdText(object):\n    \"\"\"\n    Represents a command line text device. Text is split into lines\n    corresponding to the linewidth of the device.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Construct empty object.\n        \"\"\"\n        self.num_lines = 0\n        self.remaining_lines = MAX_NUM_LINES\n        self.lines = []\n\n    def insert(self, string):\n        \"\"\"\n        Insert string at the end. This always begins a new line.\n        \"\"\"\n        if (self.num_lines >= MAX_NUM_LINES):\n            pass\n        \n        input_num_lines = num_lines(string)\n\n        #if (input_num_lines > self.remaining_lines):\n        #    num = self.remaining_lines\n        #else:\n        #    num = input_num_lines\n        num = input_num_lines\n        \n        new_lines = get_lines(string)\n\n        self.lines += new_lines[-num:]\n        self.update_num_lines()\n    \n    def merge_after(self, obj):\n        \"\"\"\n        Merge with another CmdText object by appending the input objects content.\n        \"\"\"\n        self.lines \n    \n    def strip_lines(self):\n        \"\"\"\n        Remove excessive number of lines. This deletes the oldest half.\n        \"\"\"\n        if (self.num_lines > MAX_NUM_STORED_LINES):\n            for i in range(MAX_NUM_STORED_LINES // 2):\n                self.lines.pop(i)\n    \n    def update_num_lines(self):\n        \"\"\"\n        Update the number of lines member.\n        \"\"\"\n        self.num_lines = len(self.lines)\n\n    def get_line(self, n):\n        \"\"\"\n        Return the line with index n.\n        \"\"\"\n        if n < self.num_lines:\n            return self.lines[n]\n        else:\n            raise IndexError(\"Line index out of range.\")\n        \n    def print_screen(self):\n        \"\"\"\n        Return MAX_NUM_LINES lines.\n        \"\"\"\n        return self.lines[-MAX_NUM_LINES:]\n    \n    def __iter__(self):\n        \"\"\"\n        Iterator for CmdText object.\n        \"\"\"\n        for l in self.lines:\n            yield l\n    \n    def __getitem__(self, ind):\n        return self.lines[ind]\n\ndef num_lines(string):\n    \"\"\"\n    Return number of lines.\n    \"\"\"\n    line_list = string.split(\"\\n\")\n    num = len(line_list)\n    for l in line_list:\n        num += (len(string) // LINEWIDTH + 1)\n    \n    return num\n\n\ndef get_lines(string):\n    \"\"\"\n    Return list of lines extracted from string.\n    \"\"\"\n    line_list = string.split('\\n')\n\n    new_list = []\n    for l in line_list:\n        new_list += [l[i*LINEWIDTH:(i+1)*LINEWIDTH] for i in range(len(l) // LINEWIDTH + 1)]\n    \n    return new_list\n\nclass Command(CmdText):\n    def __init__(self, string, rind=None):\n        CmdText.__init__(self)\n        self.insert(string)\n\n        if (rind is not None):\n            self.response = rind\n    \n\nclass Response(CmdText):\n    def __init__(self, string, cind=None):\n        CmdText.__init__(self)\n        self.insert(string)\n\n        if (cind is not None):\n            self.command = cind\n\n\nclass TestCase(objec",
    "\"\"\"\nTests for a door card.\n\"\"\"\n\nimport pytest\n\nfrom onirim import card\nfrom onirim import component\nfrom onirim import core\nfrom onirim import agent\n\n\nclass DoorActor(agent.Actor):\n    \"\"\"\n    \"\"\"\n    def __init__(self, do_open):\n        self._do_open = do_open\n\n    def open_door(self, content, door_card):\n        return self._do_open\n\n\nDRAWN_CAN_NOT_OPEN = (\n    card.Color.red,\n    False,\n    component.Content(\n        undrawn_cards=[],\n        hand=[card.key(card.Color.blue)]),\n    component.Content(\n        undrawn_cards=[],\n        hand=[card.key(card.Color.blue)],\n        limbo=[card.door(card.Color.red)]),\n    )\n\nDRAWN_DO_NOT_OPEN = (\n    card.Color.red,\n    False,\n    component.Content(\n        undrawn_cards=[],\n        hand=[card.key(card.Color.red)]),\n    component.Content(\n        undrawn_cards=[],\n        hand=[card.key(card.Color.red)],\n        limbo=[card.door(card.Color.red)]),\n    )\n\nDRAWN_DO_OPEN = (\n    card.Color.red,\n    True,\n    component.Content(\n        undrawn_cards=[],\n        hand=[\n            card.key(card.Color.red),\n            card.key(card.Color.red),\n            card.key(card.Color.red),\n        ]),\n    component.Content(\n        undrawn_cards=[],\n        discarded=[card.key(card.Color.red)],\n        hand=[card.key(card.Color.red), card.key(card.Color.red)],\n        opened=[card.door(card.Color.red)]),\n    )\n\nDRAWN_DO_OPEN_2 = (\n    card.Color.red,\n    True,\n    component.Content(\n        undrawn_cards=[],\n        hand=[\n            card.key(card.Color.blue),\n            card.key(card.Color.red),\n        ]),\n    component.Content(\n        undrawn_cards=[],\n        discarded=[card.key(card.Color.red)],\n        hand=[card.key(card.Color.blue)],\n        opened=[card.door(card.Color.red)]),\n    )\n\nDRAWN_CASES = [\n    DRAWN_CAN_NOT_OPEN,\n    DRAWN_DO_NOT_OPEN,\n    DRAWN_DO_OPEN,\n    DRAWN_DO_OPEN_2,\n    ]\n\n\n@pytest.mark.parametrize(\n    \"color, do_open, content, content_after\",\n    DRAWN_CASES)\ndef test_drawn(color, do_open, content, content_after):\n    door_card = card.door(color)\n    door_card.drawn(core.Core(DoorActor(do_open), agent.Observer(), content))\n    assert content == content_after\n",
    "### This script fetches level-1 PACS imaging data, using a list generated by the\n### archive (in the CSV format), attaches sky coordinates and masks to them\n### (by calling the convertL1ToScanam task) and save them to disk in the correct\n### format for later use by Scanamorphos.\n### See important instructions below.\n\n\n#######################################################\n\n### This script is part of the Scanamorphos package.\n\n###  HCSS is free software: you can redistribute it and/or modify\n###  it under the terms of the GNU Lesser General Public License as\n###  published by the Free Software Foundation, either version 3 of\n###  the License, or (at your option) any later version.\n\n#######################################################\n\n## Import classes and definitions:\nimport os\nfrom herschel.pacs.spg.phot import ConvertL1ToScanamTask\n\n#######################################################\n\n\n## local settings:\n\ndir_root = \"/pcdisk/stark/aribas/Desktop/modeling_TDs/remaps_Cha/PACS/scanamorphos/\"\npath = dir_root +\"L1/\"\n\n### number of observations:\nn_obs = 2\n\n\n#######################################################\n\n## Do a multiple target search in the archive and use the \"save all results as CSV\" option.\n## --> ascii table 'results.csv' where lines can be edited\n## (suppress unwanted observations and correct target names)\n\n## Create the directories contained in the dir_out variables (l. 57)\n## before running this script.\n\n#######################################################\n\n\n## observations:\ntable_obs = asciiTableReader(file=dir_root+'results_fast.csv', tableType='CSV', skipRows=1)\nlist_obsids = table_obs[0].data\nlist_names = table_obs[1].data\n\n\nfor i_obs in range(n_obs):\n    ##\n    num_obsid = list_obsids[i_obs]\n    source = list_names[i_obs]\n    source = str.lower(str(source))\n    dir_out = path+source+\"_processed_obsids\"\n    # create directory if it does not exist\n    if not(os.path.exists(dir_out)):\n        os.system('mkdir '+dir_out)\n\t##\n    print \"\"\n    print \"Downloading obsid \" + `num_obsid`\n    obs = getObservation(num_obsid, useHsa=True, instrument=\"PACS\", verbose=True)\n    ###\n    frames = obs.level1.refs[\"HPPAVGR\"].product.refs[0].product\n    convertL1ToScanam(frames, cancelGlitch=1, assignRaDec=1, outDir=dir_out)\n    ###\n    frames = obs.level1.refs[\"HPPAVGB\"].product.refs[0].product\n    convertL1ToScanam(frames, cancelGlitch=1, assignRaDec=1, outDir=dir_out)\n\n\n### END OF SCRIPT\n\n#######################################################\n",
    "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nfrom conans.model import Generator\nfrom conans.client.generators import VisualStudioGenerator\nfrom xml.dom import minidom\nfrom conans.util.files import load\n\n\nclass VisualStudioMultiGenerator(Generator):\n    template = \"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <ImportGroup Label=\"PropertySheets\" >\n    </ImportGroup>\n    <PropertyGroup Label=\"UserMacros\" />\n    <PropertyGroup />\n    <ItemDefinitionGroup />\n    <ItemGroup />\n</Project>\n\"\"\"\n\n    @property\n    def filename(self):\n        pass\n\n    @property\n    def content(self):\n        configuration = str(self.conanfile.settings.build_type)\n        platform = {'x86': 'Win32', 'x86_64': 'x64'}.get(str(self.conanfile.settings.arch))\n        vsversion = str(self.settings.compiler.version)\n\n        # there is also ClCompile.RuntimeLibrary, but it's handling is a bit complicated, so skipping for now\n        condition = \" '$(Configuration)' == '%s' And '$(Platform)' == '%s' And '$(VisualStudioVersion)' == '%s' \"\\\n                    % (configuration, platform, vsversion + '.0')\n\n        name_multi = 'conanbuildinfo_multi.props'\n        name_current = ('conanbuildinfo_%s_%s_%s.props' % (configuration, platform, vsversion)).lower()\n\n        multi_path = os.path.join(self.output_path, name_multi)\n        if os.path.isfile(multi_path):\n            content_multi = load(multi_path)\n        else:\n            content_multi = self.template\n\n        dom = minidom.parseString(content_multi)\n        import_node = dom.createElement('Import')\n        import_node.setAttribute('Condition', condition)\n        import_node.setAttribute('Project', name_current)\n        import_group = dom.getElementsByTagName('ImportGroup')[0]\n        children = import_group.getElementsByTagName(\"Import\")\n        for node in children:\n            if name_current == node.getAttribute(\"Project\") and condition == node.getAttribute(\"Condition\"):\n                break\n        else:\n            import_group.appendChild(import_node)\n        content_multi = dom.toprettyxml()\n        content_multi = \"\\n\".join(line for line in content_multi.splitlines() if line.strip())\n\n        vs_generator = VisualStudioGenerator(self.conanfile)\n        content_current = vs_generator.content\n\n        return {name_multi: content_multi, name_current: content_current}\n",
    "# Scrapy settings for helloscrapy project\n#\n# For simplicity, this file contains only the most important settings by\n# default. All the other settings are documented here:\n#\n#     http://doc.scrapy.org/en/latest/topics/settings.html\n#\n\nBOT_NAME = 'helloscrapy'\n\nSPIDER_MODULES = ['helloscrapy.spiders']\nNEWSPIDER_MODULE = 'helloscrapy.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n#USER_AGENT = 'helloscrapy (+http://www.yourdomain.com)'\n\nDOWNLOAD_DELAY = 3\nROBOTSTXT_OBEY = True\n",
    "\"\"\"\nDjango settings for djangoApp project.\n\nGenerated by 'django-admin startproject' using Django 1.10.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.10/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.10/ref/settings/\n\"\"\"\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'r&j)3lay4i$rm44n%h)bsv_q(9ysqhl@7@aibjm2b=1)0fag9n'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'djangoApp.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'djangoApp.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.10/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, J",
    "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ['HERTZ_SECRET_KEY']\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ['HERTZ_DEBUG'] != 'False'\n\nALLOWED_HOSTS = ['*' if DEBUG else os.environ['HERTZ_HOST']]\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'widget_tweaks',\n    'attendance',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'hertz.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'hertz.wsgi.application'\n\n\n# Database\n\nif 'DATABASE_HOST' in os.environ:\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.postgresql',\n            'NAME': 'postgres',\n            'USER': os.environ['POSTGRES_USER'],\n            'PASSWORD': os.environ['POSTGRES_PASSWORD'],\n            'HOST': os.environ['DATABASE_HOST'],\n            'PORT': 5432,\n        }\n    }\nelse:\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n        }\n    }\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'America/Sao_Paulo'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ =",
    "import re\nimport warnings\n\nimport ctds\n\nfrom .base import TestExternalDatabase\nfrom .compat import PY3, PY36, unicode_\n\n\nclass TestTdsParameter(TestExternalDatabase):\n\n    def test___doc__(self):\n        self.assertEqual(\n            ctds.Parameter.__doc__,\n            '''\\\nParameter(value, output=False)\n\nExplicitly define a parameter for :py:meth:`.callproc`,\n:py:meth:`.execute`, or :py:meth:`.executemany`. This is necessary\nto indicate whether a parameter is *SQL* `OUTPUT` or `INPUT/OUTPUT`\nparameter.\n\n:param object value: The parameter's value.\n:param bool output: Is the parameter an output parameter.\n'''\n        )\n\n    def test_parameter(self):\n        param1 = ctds.Parameter(b'123', output=True)\n        self.assertEqual(param1.value, b'123')\n        self.assertTrue(isinstance(param1, ctds.Parameter))\n\n        param2 = ctds.Parameter(b'123')\n        self.assertEqual(param1.value, b'123')\n        self.assertEqual(type(param1), type(param2))\n        self.assertTrue(isinstance(param2, ctds.Parameter))\n\n    def test___repr__(self):\n        for parameter, expected in (\n                (\n                    ctds.Parameter(b'123', output=True),\n                    \"ctds.Parameter(b'123', output=True)\" if PY3 else \"ctds.Parameter('123', output=True)\"\n                ),\n                (\n                    ctds.Parameter(unicode_('123'), output=False),\n                    \"ctds.Parameter('123')\" if PY3 else \"ctds.Parameter(u'123')\"\n                ),\n                (\n                    ctds.Parameter(None),\n                    \"ctds.Parameter(None)\"\n                ),\n                (\n                    ctds.Parameter(ctds.SqlVarBinary(b'4321', size=10)),\n                    \"ctds.Parameter(ctds.SqlVarBinary(b'4321', size=10))\"\n                    if PY3 else\n                    \"ctds.Parameter(ctds.SqlVarBinary('4321', size=10))\"\n                )\n        ):\n            self.assertEqual(repr(parameter), expected)\n\n    def _test__cmp__(self, __cmp__, expected, oper):\n        cases = (\n            (ctds.Parameter(b'1234'), ctds.Parameter(b'123')),\n            (ctds.Parameter(b'123'), ctds.Parameter(b'123')),\n            (ctds.Parameter(b'123'), ctds.Parameter(b'123', output=True)),\n            (ctds.Parameter(b'123'), ctds.Parameter(b'1234')),\n            (ctds.Parameter(b'123'), b'123'),\n            (ctds.Parameter(b'123'), ctds.Parameter(123)),\n            (ctds.Parameter(b'123'), unicode_('123')),\n            (ctds.Parameter(b'123'), ctds.SqlBinary(None)),\n            (ctds.Parameter(b'123'), 123),\n            (ctds.Parameter(b'123'), None),\n        )\n\n        for index, args in enumerate(cases):\n            operation = '[{0}]: {1} {2} {3}'.format(index, repr(args[0]), oper, repr(args[1]))\n            if expected[index] == TypeError:\n                try:\n                    __cmp__(*args)\n                except TypeError as ex:\n                    regex = (\n                        r\"'{0}' not supported between instances of '[^']+' and '[^']+'\".",
    "import copy\n\nimport pytest\n\nfrom peek.line import InvalidIpAddressException, Line, InvalidStatusException\n\n# 127.0.0.1 - - [01/Jan/1970:00:00:01 +0000] \"GET / HTTP/1.1\" 200 193 \"-\" \"Python\"\ntest_line_contents = {\n    'ip_address': '127.0.0.1',\n    'timestamp':  '[01/Jan/1970:00:00:01 +0000]',\n    'verb':       'GET',\n    'path':       '/',\n    'status':     '200',\n    'size':       '193',\n    'referrer':   '-',\n    'user_agent': 'Python'\n}\n\n\ndef get_updated_line_contents(updates=None):\n    test_contents = copy.deepcopy(test_line_contents)\n    if updates is not None:\n        test_contents.update(updates)\n    return test_contents\n\n\ntest_line = Line(line_contents=test_line_contents)\n\n\nclass TestLineInstantiation:\n    @pytest.mark.parametrize('expected,actual', [\n        ('127.0.0.1', test_line.ip_address),\n        (1, test_line.timestamp),\n        ('GET', test_line.verb),\n        ('/', test_line.path),\n        (200, test_line.status),\n        (193, test_line.byte_count),\n        ('-', test_line.referrer),\n        ('Python', test_line.user_agent)\n    ])\n    def test_retrieval(self, expected, actual):\n        assert expected == actual\n\n\nclass TestLineExceptions:\n    def test_passing_invalid_ip_address_throws_exception(self):\n        with pytest.raises(InvalidIpAddressException):\n            line = Line(line_contents=get_updated_line_contents({'ip_address': 'foobar'}))\n\n    def test_passing_non_parseable_status_throws_exception(self):\n        with pytest.raises(InvalidStatusException):\n            Line(line_contents=get_updated_line_contents({'status': 'foobar'}))\n",
    "import logging\nimport requests\nfrom django.conf import settings\nfrom django.contrib.sites.models import Site\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.template.loader import get_template\nfrom django.utils import timezone\n\nfrom invitations.models import Invitation\n\nlogger = logging.getLogger('email')\nsentry = logging.getLogger('sentry')\n\ndef send_invite(message):\n    try:\n        invite = Invitation.objects.get(\n            id=message.get('id'),\n            status__in=[Invitation.PENDING, Invitation.ERROR],\n        )\n    except Invitation.DoesNotExist:\n        sentry.error(\"Invitation to send not found\", exc_info=True, extra={'message': message})\n        return\n    invite.status = Invitation.PROCESSING\n    invite.save()\n    context = {\n        'invite': invite,\n        'domain': Site.objects.get_current().domain,\n    }\n    subject = \"[ContactOtter] Invitation to join ContactOtter from %s\" % (invite.sender)\n    if invite.book:\n        subject = \"[ContactOtter] Invitation to share %s's contact book\" % (invite.sender)\n    txt = get_template('email/invitation.txt').render(context)\n    html = get_template('email/invitation.html').render(context)\n    try:\n        message = EmailMultiAlternatives(\n            subject=subject,\n            body=txt,\n            from_email=\"ContactOtter <invites@contactotter.com>\",\n            to=[invite.email,],\n        )\n        message.attach_alternative(html, \"text/html\")\n        message.send()\n        invite.status = Invitation.SENT\n        invite.sent = timezone.now()\n        invite.save()\n    except:\n        sentry.exception('Problem sending invite', exc_info=True, extra={'invite_id': invite.id})\n        invite.status = Invitation.ERROR\n        invite.save()\n",
    "\ndef burrows_wheeler(text):\n    \"\"\"Calculates the burrows wheeler transform of <text>.\n\n    returns the burrows wheeler string and the suffix array indices\n    The text is assumed to not contain the character $\"\"\"\n\n    text += \"$\"\n    all_permutations = []\n    for i in range(len(text)):\n        all_permutations.append((text[i:] + text[:i],i))\n\n    all_permutations.sort()\n    bw_l = [] # burrows wheeler as list\n    sa_i = [] # suffix array indices\n\n    for w,j in all_permutations:\n        bw_l.append(w[-1])\n        sa_i.append(j)\n\n    return \"\".join(bw_l), sa_i\n",
    "#!/usr/bin/env python\n# coding: utf-8\n\nimport os,sys\nimport ctypes\nimport numpy as np\nfrom .hmatrix import _C_HMatrix, HMatrix\n\n\nclass _C_MultiHMatrix(ctypes.Structure):\n    \"\"\"Holder for the raw data from the C++ code.\"\"\"\n    pass\n\n\nclass AbstractMultiHMatrix:\n    \"\"\"Common code for the two actual MultiHMatrix classes below.\"\"\"\n\n    ndim = 2  # To mimic a numpy 2D array\n\n    def __init__(self, c_data: _C_MultiHMatrix, **params):\n        # Users should use one of the two constructors below.\n\n        self.c_data = c_data\n        self.shape = (self.lib.multi_nbrows(c_data), self.lib.multi_nbcols(c_data))\n        self.size = self.lib.nbhmats(c_data)\n\n\n        self.lib.getHMatrix.restype=ctypes.POINTER(_C_HMatrix)\n        self.lib.getHMatrix.argtypes=[ctypes.POINTER(_C_MultiHMatrix), ctypes.c_int]\n\n        self.hmatrices = []\n        for l in range(0,self.size):\n            c_data_hmatrix = self.lib.getHMatrix(self.c_data,l)\n            self.hmatrices.append(HMatrix(c_data_hmatrix,**params))\n\n\n        self.params = params.copy()\n\n    @classmethod\n    def from_coefs(cls, getcoefs, nm, points_target, points_source=None, **params):\n        \"\"\"Construct an instance of the class from a evaluation function.\n\n        Parameters\n        ----------\n        getcoefs: Callable\n            A function evaluating an array of matrices at given coordinates.\n        points_target: np.ndarray of shape (N, 3)\n            The coordinates of the target points. If points_source=None, also the coordinates of the target points\n        points_source: np.ndarray of shape (N, 3)\n            If not None; the coordinates of the source points.\n        epsilon: float, keyword-only, optional\n            Tolerance of the Adaptive Cross Approximation\n        eta: float, keyword-only, optional\n            Criterion to choose the blocks to compress\n        minclustersize: int, keyword-only, optional\n            Minimum shape of a block\n        maxblocksize: int, keyword-only, optional\n            Maximum number of coefficients in a block\n\n        Returns\n        -------\n        MultiHMatrix or ComplexMultiHMatrix\n        \"\"\"\n        # Set params.\n        cls._set_building_params(**params)\n        \n        # Boilerplate code for Python/C++ interface.\n        _getcoefs_func_type = ctypes.CFUNCTYPE(None, ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_double))\n        if points_source is None:\n            cls.lib.MultiHMatrixCreateSym.restype = ctypes.POINTER(_C_MultiHMatrix)\n            cls.lib.MultiHMatrixCreateSym.argtypes = [\n                np.ctypeslib.ndpointer(dtype=np.float64, ndim=2, flags='C_CONTIGUOUS'),\n                ctypes.c_int,\n                _getcoefs_func_type,\n                ctypes.c_int\n            ]\n\n            # Call the C++ backend.\n            c_data = cls.lib.MultiHMatrixCreateSym(points_target, points_target.shape[0], _getcoefs_func_type(getcoefs),nm)\n\n        else:\n            cls.lib.MultiHMatrixCreate.restype = ctypes.POINTER(_C_MultiHMatrix)\n        ",
    "import primes as py\n\ndef lcm(a, b):\n        return a * b / gcd(a, b)\n \ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\n# Returns two integers x, y such that gcd(a, b) = ax + by\ndef egcd(a, b):\n    if a == 0:\n        return (0, 1)\n    else:\n        y, x = egcd(b % a, a)\n        return (x - (b // a) * y, y)\n\n# Returns an integer x such that ax = 1(mod m)\ndef modInverse(a, m):\n    x, y = egcd(a, m)\n    if gcd(a, m) == 1:\n        return x % m\n\n# Reduces linear congruence to form x = b(mod m)\ndef reduceCongr(a, b, m):\n        gcdAB = gcd(a, b)\n        a /= gcdAB\n        b /= gcdAB\n        m /= gcd(gcdAB, m)\n        modinv = modInverse(a, m)\n        b *= modinv\n        return (1, b, m)\n        \n# Returns the incongruent solutions to the linear congruence ax = b(mod m)\ndef linCongr(a, b, m):\n        solutions = set()\n        if (b % gcd(a, m) == 0):\n                numSols = gcd(a, m)\n                sol = (b * egcd(a, m)[0] / numSols) % m\n                for i in xrange(0, numSols):\n                        solutions.add((sol + m * i / numSols) % m)\n        return solutions\n\n# Uses the Chinese Remainder Theorem to solve a system of linear congruences\ndef crt(congruences):\n        x = 0\n        M = 1\n        for i in xrange(len(congruences)):\n                M *= congruences[i][2]\n                congruences[i] = reduceCongr(congruences[i][0], congruences[i][1], congruences[i][2])\n\n        for j in xrange(len(congruences)):\n                m = congruences[j][2]\n                if gcd(m, M/m) != 1:\n                        return None\n                x += congruences[j][1] * modInverse(M/m, m) * M / m\n\n        return x % M\n\n# Returns the incongruent solution to any system of linear congruences\ndef linCongrSystem(congruences):\n        newCongruences = []\n        for i in xrange(len(congruences)):\n                congruences[i] = reduceCongr(congruences[i][0], congruences[i][1], congruences[i][2])\n                \n                # Tests to see whether the system is solvable\n                for j in xrange(len(congruences)):\n                        if congruences[i] != congruences[j]:\n                                if (congruences[i][1] - congruences[j][1]) % gcd(congruences[i][2], congruences[j][2]) != 0:\n                                        return None\n                \n                # Splits moduli into prime powers\n                pFactor = py.primeFactorization(congruences[i][2])\n                for term in pFactor:\n                        newCongruences.append((1, congruences[i][1], term[0] ** term[1]))\n\n        # Discards redundant congruences\n        newCongruences = sorted(newCongruences, key=lambda x: x[2], reverse = True)\n        finalCongruences = []\n        for k in xrange(len(newCongruences)):\n                isRedundant = False\n                for l in xrange(0, k):\n                        if newCongruences[l][2] % newCongruences[k][2] == 0:\n                                isRedundant = True\n                if n",
    "a = a # e 4\na = 1       # 0 int\nl = [a]     # 0 [int]\nd = {a:l}   # 0 {int:[int]}\n\ns = \"abc\"\nc = ord(s[2].lower()[0]) # 0 int # 4 (str) -> int\nl2 = [range(i) for i in d] # 0 [[int]]\n\ny = [(a,b) for a,b in {1:'2'}.iteritems()] # 0 [(int,str)]\n\nb = 1 # 0 int\nif 0:\n    b = '' # 4 str\nelse:\n    b = str(b) # 4 str # 12 int\n\nr = 0 # 0 int\nif r: # 3 int\n    r = str(r) # 4 str # 12 int\nr # 0 <int|str>\n\nl = range(5) # 0 [int]\nl2 = l[2:3] # 0 [int]\nx = l2[1] # 0 int\n\nk = 1() # 0 <unknown> # e 4\n\ndel k\nk # e 0\n\nl = [] # 0 [int]\nx = 1 # 0 int\nwhile x: # 6 int\n    l = [] # 4 [int]\nl.append(1) # 0 [int] # 2 (int) -> None\n\nl = [1, 2] # 0 [int]\nl2 = [x for x in l] # 0 [<int|str>]\nl2.append('') # 0 [<int|str>]\n\ns = str() # 0 str\ns2 = str(s) # 0 str\ns3 = repr() # e 5 # 0 str\ns4 = repr(s) # 0 str\n\nx = 1 if [] else '' # 0 <int|str>\n\nl = [1] # 0 [<int|str>]\nl2 = [''] # 0 [str]\nl[:] = l2 # 0 [<int|str>]\n\nb = 1 < 2 < 3 # 0 bool\n\nl = sorted(range(5), key=lambda x:-x) # 0 [int]\n\nd = {} # 0 {<bool|int>:<int|str>}\nd1 = {1:''} # 0 {int:str}\nd.update(d1)\nd[True] = 1\nd # 0 {<bool|int>:<int|str>}\n\nl = [] # 0 [int]\nl1 = [] # 0 [<unknown>]\nl.extend(l1)\nl.append(2)\n\nl = [] # 0 [<[str]|int>]\nl1 = [[]] # 0 [[str]]\nl.extend(l1)\nl[0].append('') # e 0\nl.append(1)\n\nl = [] # 0 [[<int|str>]]\nl2 = [1] # 0 [int]\nl3 = [''] # 0 [str]\nl.append(l2)\nl.append(l3)\n\nfor i, s in enumerate(\"aoeu\"): # 4 int # 7 str\n    pass\n\nx = 1 # 0 int\ny = x + 1.0 # 0 float\ny << 1 # e 0\nl = [1, 1.0] # 0 [float]\n1.0 in [1] # e 0\n\nx = `1` # 0 str\ndef f():\n    x = `1` # 4 str\n\nd = dict(a=1) # 0 {str:int}\nl = list() # 0 [<unknown>]\n\ni = int(1) # 0 int\ni = int(1.2) # 0 int\ni = abs(1) # 0 int\ni = abs(1.0) # 0 float\n\nd = dict() # 0 {int:int}\nd[1] = 2\nd2 = dict(d) # 0 {<int|str>:<int|str>}\nd2[''] = ''\nd3 = dict([(1,2)]) # 0 {int:int}\nd4 = dict(a=1) # 0 {str:int}\n",
    "# Copyright (c) 2016 nVentiveUX\n#\n# Permission is hereby granted, free of charge, to any person obtaining\n# a copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish,\n# distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so, subject to\n# the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\"\"\"Application configuration\"\"\"\n\nfrom django.apps import AppConfig\n\n\nclass ShowcaseConfig(AppConfig):\n    name = 'mystartupmanager.showcase'\n",
    "import asyncio\nimport email.utils\nimport json\nimport sys\n\nfrom cgi import parse_header\nfrom collections import namedtuple\nfrom http.cookies import SimpleCookie\nfrom urllib.parse import parse_qs, unquote, urlunparse\n\nfrom httptools import parse_url\n\nfrom sanic.exceptions import InvalidUsage\nfrom sanic.log import error_logger, logger\n\n\ntry:\n    from ujson import loads as json_loads\nexcept ImportError:\n    if sys.version_info[:2] == (3, 5):\n\n        def json_loads(data):\n            # on Python 3.5 json.loads only supports str not bytes\n            return json.loads(data.decode())\n\n    else:\n        json_loads = json.loads\n\n\nDEFAULT_HTTP_CONTENT_TYPE = \"application/octet-stream\"\n\n\n# HTTP/1.1: https://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1\n# > If the media type remains unknown, the recipient SHOULD treat it\n# > as type \"application/octet-stream\"\n\n\nclass RequestParameters(dict):\n    \"\"\"Hosts a dict with lists as values where get returns the first\n    value of the list and getlist returns the whole shebang\n    \"\"\"\n\n    def get(self, name, default=None):\n        \"\"\"Return the first value, either the default or actual\"\"\"\n        return super().get(name, [default])[0]\n\n    def getlist(self, name, default=None):\n        \"\"\"Return the entire list\"\"\"\n        return super().get(name, default)\n\n\nclass StreamBuffer:\n    def __init__(self, buffer_size=100):\n        self._queue = asyncio.Queue(buffer_size)\n\n    async def read(self):\n        \"\"\" Stop reading when gets None \"\"\"\n        payload = await self._queue.get()\n        self._queue.task_done()\n        return payload\n\n    async def put(self, payload):\n        await self._queue.put(payload)\n\n    def is_full(self):\n        return self._queue.full()\n\n\nclass Request(dict):\n    \"\"\"Properties of an HTTP request such as URL, headers, etc.\"\"\"\n\n    __slots__ = (\n        \"__weakref__\",\n        \"_cookies\",\n        \"_ip\",\n        \"_parsed_url\",\n        \"_port\",\n        \"_remote_addr\",\n        \"_socket\",\n        \"app\",\n        \"body\",\n        \"endpoint\",\n        \"headers\",\n        \"method\",\n        \"parsed_args\",\n        \"parsed_files\",\n        \"parsed_form\",\n        \"parsed_json\",\n        \"raw_url\",\n        \"stream\",\n        \"transport\",\n        \"uri_template\",\n        \"version\",\n    )\n\n    def __init__(self, url_bytes, headers, version, method, transport):\n        self.raw_url = url_bytes\n        # TODO: Content-Encoding detection\n        self._parsed_url = parse_url(url_bytes)\n        self.app = None\n\n        self.headers = headers\n        self.version = version\n        self.method = method\n        self.transport = transport\n\n        # Init but do not inhale\n        self.body_init()\n        self.parsed_json = None\n        self.parsed_form = None\n        self.parsed_files = None\n        self.parsed_args = None\n        self.uri_template = None\n        self._cookies = None\n        self.stream = None\n        self.endpoint = None\n\n    def __repr__(self):\n        return \"<{0}: {1} {2}>\".format(\n            s",
    "from .tile import Split, Stack, TileStack\n\n\nclass Tile(Split):\n\n    class left(Stack):\n        weight = 3\n        priority = 0\n        limit = 1\n\n    class right(TileStack):\n        pass\n\n\nclass Max(Split):\n\n    class main(Stack):\n        tile = False\n\n\nclass InstantMsg(Split):\n\n    class left(TileStack): # or maybe not tiled ?\n        weight = 3\n\n    class roster(Stack):\n        limit = 1\n        priority = 0  # probably roster created first\n\n\nclass Gimp(Split):\n\n    class toolbox(Stack):\n        limit = 1\n        size = 184\n\n    class main(Stack):\n        weight = 4\n        priority = 0\n\n    class dock(Stack):\n        limit = 1\n        size = 324\n",
    "hmm = [\n    \"https://media3.giphy.com/media/TPl5N4Ci49ZQY/giphy.gif\",\n    \"https://media0.giphy.com/media/l14qxlCgJ0zUk/giphy.gif\",\n    \"https://media4.giphy.com/media/MsWnkCVSXz73i/giphy.gif\",\n    \"https://media1.giphy.com/media/l2JJEIMLgrXPEbDGM/giphy.gif\",\n    \"https://media0.giphy.com/media/dgK22exekwOLm/giphy.gif\"\n]",
    "from djblets.cache.backend import cache_memoize\n\n\nclass BugTracker(object):\n    \"\"\"An interface to a bug tracker.\n\n    BugTracker subclasses are used to enable interaction with different\n    bug trackers.\n    \"\"\"\n    def get_bug_info(self, repository, bug_id):\n        \"\"\"Get the information for the specified bug.\n\n        This should return a dictionary with 'summary', 'description', and\n        'status' keys.\n\n        This is cached for 60 seconds to reduce the number of queries to the\n        bug trackers and make things seem fast after the first infobox load,\n        but is still a short enough time to give relatively fresh data.\n        \"\"\"\n        return cache_memoize(self.make_bug_cache_key(repository, bug_id),\n                             lambda: self.get_bug_info_uncached(repository,\n                                                                bug_id),\n                             expiration=60)\n\n    def get_bug_info_uncached(self, repository, bug_id):\n        \"\"\"Get the information for the specified bug (implementation).\n\n        This should be implemented by subclasses, and should return a\n        dictionary with 'summary', 'description', and 'status' keys.\n        If any of those are unsupported by the given bug tracker, the unknown\n        values should be given as an empty string.\n        \"\"\"\n        return {\n            'summary': '',\n            'description': '',\n            'status': '',\n        }\n\n    def make_bug_cache_key(self, repository, bug_id):\n        \"\"\"Returns a key to use when caching fetched bug information.\"\"\"\n        return 'repository-%s-bug-%s' % (repository.pk, bug_id)\n",
    "import sys\nfrom stack import Stack\n\n\ndef parse_expression_into_parts(expression):\n    \"\"\"\n    Parse expression into list of parts\n    :rtype : list\n    :param expression: str # i.e. \"2 * 3 + ( 2 - 3 )\"\n    \"\"\"\n    raise NotImplementedError(\"complete me!\")\n\n\ndef evaluate_expression(a, b, op):\n    raise NotImplementedError(\"complete me!\")\n\n\ndef evaluate_postfix(parts):\n    raise NotImplementedError(\"complete me!\")\n\n\nif __name__ == \"__main__\":\n    expr = None\n    if len(sys.argv) > 1:\n        expr = sys.argv[1]\n        parts = parse_expression_into_parts(expr)\n        print \"Evaluating %s == %s\" % (expr, evaluate_postfix(parts))\n    else:\n        print 'Usage: python postfix.py \"<expr>\" -- i.e. python postfix.py \"9 1 3 + 2 * -\"'\n        print \"Spaces are required between every term.\"\n",
    "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# @author victor li nianchaoli@msn.cn\n# @date 2015/10/07\n\nimport baseHandler\n\nclass MainHandler(baseHandler.RequestHandler):\n\n    def get(self):\n        self.redirect('/posts/last')\n",
    "from ab_tool.tests.common import (SessionTestCase, TEST_COURSE_ID,\n    TEST_OTHER_COURSE_ID, NONEXISTENT_TRACK_ID, NONEXISTENT_EXPERIMENT_ID,\n    APIReturn, LIST_MODULES)\nfrom django.core.urlresolvers import reverse\nfrom ab_tool.models import (Experiment, InterventionPointUrl)\nfrom ab_tool.exceptions import (EXPERIMENT_TRACKS_ALREADY_FINALIZED,\n    NO_TRACKS_FOR_EXPERIMENT, UNAUTHORIZED_ACCESS,\n    INTERVENTION_POINTS_ARE_INSTALLED)\nimport json\nfrom mock import patch\n\nclass TestExperimentPages(SessionTestCase):\n    \"\"\" Tests related to Experiment and Experiment pages and methods \"\"\"\n    \n    def test_create_experiment_view(self):\n        \"\"\" Tests edit_experiment template renders for url 'create_experiment' \"\"\"\n        response = self.client.get(reverse(\"ab_testing_tool_create_experiment\"))\n        self.assertOkay(response)\n        self.assertTemplateUsed(response, \"ab_tool/edit_experiment.html\")\n    \n    def test_create_experiment_view_unauthorized(self):\n        \"\"\" Tests edit_experiment template does not render for url 'create_experiment'\n            when unauthorized \"\"\"\n        self.set_roles([])\n        response = self.client.get(reverse(\"ab_testing_tool_create_experiment\"), follow=True)\n        self.assertTemplateNotUsed(response, \"ab_tool/create_experiment.html\")\n        self.assertTemplateUsed(response, \"ab_tool/not_authorized.html\")\n    \n    def test_edit_experiment_view(self):\n        \"\"\" Tests edit_experiment template renders when authenticated \"\"\"\n        experiment = self.create_test_experiment()\n        response = self.client.get(reverse(\"ab_testing_tool_edit_experiment\", args=(experiment.id,)))\n        self.assertTemplateUsed(response, \"ab_tool/edit_experiment.html\")\n    \n    def test_edit_experiment_view_started_experiment(self):\n        \"\"\" Tests edit_experiment template renders when experiment has started \"\"\"\n        experiment = self.create_test_experiment()\n        experiment.tracks_finalized = True\n        experiment.save()\n        response = self.client.get(reverse(\"ab_testing_tool_edit_experiment\", args=(experiment.id,)))\n        self.assertTemplateUsed(response, \"ab_tool/edit_experiment.html\")\n    \n    def test_edit_experiment_view_with_tracks_weights(self):\n        \"\"\" Tests edit_experiment template renders properly with track weights \"\"\"\n        experiment = self.create_test_experiment()\n        experiment.assignment_method = Experiment.WEIGHTED_PROBABILITY_RANDOM\n        track1 = self.create_test_track(name=\"track1\", experiment=experiment)\n        track2 = self.create_test_track(name=\"track2\", experiment=experiment)\n        self.create_test_track_weight(experiment=experiment, track=track1)\n        self.create_test_track_weight(experiment=experiment, track=track2)\n        response = self.client.get(reverse(\"ab_testing_tool_edit_experiment\", args=(experiment.id,)))\n        self.assertTemplateUsed(response, \"ab_tool/edit_experiment.html\")\n    \n    def test_edit_experiment_view_unauthorized(self):\n        \"\"\" Tests edit_ex",
    "#-*- coding: utf-8 -*-\n\nfrom flask import current_app, flash, url_for, request\nfrom flask_admin import expose, BaseView\n\nfrom logpot.admin.base import AuthenticateView, flash_errors\nfrom logpot.admin.forms import SettingForm\nfrom logpot.utils import ImageUtil, getDirectoryPath, loadSiteConfig, saveSiteConfig\n\nimport os\nfrom PIL import Image\n\nclass SettingView(AuthenticateView, BaseView):\n\n    def saveProfileImage(self, filestorage):\n        buffer = filestorage.stream\n        buffer.seek(0)\n        image = Image.open(buffer)\n        image = ImageUtil.crop_image(image, 64)\n        current_app.logger.info(image)\n        dirpath = getDirectoryPath(current_app, '_settings')\n        filepath = os.path.join(dirpath, \"profile.png\")\n        image.save(filepath, optimize=True)\n\n    @expose('/', methods=('GET','POST'))\n    def index(self):\n        form = SettingForm()\n\n        if form.validate_on_submit():\n            if form.profile_img.data:\n                file = form.profile_img.data\n                self.saveProfileImage(file)\n\n            data = {}\n            data['site_title']          = form.title.data\n            data['site_subtitle']       = form.subtitle.data\n            data['site_author']         = form.author.data\n            data['site_author_profile'] = form.author_profile.data\n            data['enable_link_github']  = form.enable_link_github.data\n            data['enable_profile_img']  = form.enable_profile_img.data\n            data[\"ogp_app_id\"]          = form.ogp_app_id.data\n            data[\"ga_tracking_id\"]      = form.ga_tracking_id.data\n            data[\"enable_twittercard\"]  = form.enable_twittercard.data\n            data[\"twitter_username\"]    = form.twitter_username.data\n            data['display_poweredby']   = form.display_poweredby.data\n            if saveSiteConfig(current_app, data):\n                flash('Successfully saved.')\n            else:\n                flash_errors('Oops. Save error.')\n        else:\n            flash_errors(form)\n\n        data = loadSiteConfig(current_app)\n        form.title.data               = data['site_title']\n        form.subtitle.data            = data['site_subtitle']\n        form.author.data              = data['site_author']\n        form.author_profile.data      = data['site_author_profile']\n        form.enable_link_github.data  = data['enable_link_github']\n        form.enable_profile_img.data  = data['enable_profile_img']\n        form.ogp_app_id.data          = data[\"ogp_app_id\"]\n        form.ga_tracking_id.data      = data[\"ga_tracking_id\"]\n        form.enable_twittercard.data  = data[\"enable_twittercard\"]\n        form.twitter_username.data    = data[\"twitter_username\"]\n        form.display_poweredby.data   = data['display_poweredby']\n        return self.render('admin/setting.html', form=form)\n",
    "# TODO When raising an exception pass a lambda function, the function being the module/path/name thing\n\nERROR = {'default': \"Unknown engine error ({0})\",\n         400: \"Bad request sent to search API ({0})\",\n         401: \"Incorrect API Key ({0})\",\n         403: \"Correct API but request refused ({0})\",\n         404: \"Bad request sent to search API ({0})\"}\n\n\nclass SearchException(Exception):\n    \"\"\"\n    Abstract class representing an ifind search exception.\n\n    \"\"\"\n    def __init__(self, module, message):\n        \"\"\"\n        SearchException constructor.\n\n        Args:\n            module (str): name of module/class that's raising exception\n            message (str): exception message to be displayed\n\n        Usage:\n            raise SearchException(\"Test\", \"this is an error\")\n\n        \"\"\"\n        message = \"{0} - {1}\".format(module, message)\n        Exception.__init__(self, message)\n\n\nclass EngineConnectionException(SearchException):\n    \"\"\"\n    Thrown when an Engine connectivity error occurs.\n    Returns specific response message if status code specified.\n\n    \"\"\"\n    def __init__(self, engine, message, code=None):\n        \"\"\"\n        EngineException constructor.\n\n        Args:\n            engine (str): name of engine that's raising exception\n            message (str): exception message to be displayed (ignored usually here)\n\n        Kwargs:\n            code (int): response status code of issued request\n\n        Usage:\n            raise EngineException(\"Bing\", \"\", code=200)\n\n        \"\"\"\n        self.message = message\n        self.code = code\n\n        if code:\n            self.message = ERROR.get(code, ERROR['default']).format(self.code)\n\n        SearchException.__init__(self, engine, self.message)\n\n\nclass EngineLoadException(SearchException):\n    \"\"\"\n    Thrown when an Engine can't be dynamically loaded.\n\n    \"\"\"\n    pass\n\n\nclass EngineAPIKeyException(SearchException):\n    \"\"\"\n    Thrown when an Engine's API key hasn't been provided.\n\n    \"\"\"\n    pass\n\n\nclass QueryParamException(SearchException):\n    \"\"\"\n    Thrown when a query parameters incompatible or missing.\n\n    \"\"\"\n    pass\n\n\nclass CacheConnectionException(SearchException):\n    \"\"\"\n    Thrown when cache connectivity error occurs.\n\n    \"\"\"\n    pass\n\n\nclass InvalidQueryException(SearchException):\n    \"\"\"\n    Thrown when an invalid query is passed to engine's search method.\n\n    \"\"\"\n    pass\n\n\nclass RateLimitException(SearchException):\n    \"\"\"\n    Thrown when an engine's request rate limit has been exceeded.\n\n    \"\"\"\n    pass",
    "#!/usr/bin/python\n\nimport os\nimport re\nfrom lxml import etree as et\n\nimport pcbmode.config as config\nfrom . import messages as msg\n\n# pcbmode modules\nfrom . import utils\nfrom .point import Point\n\n\n\ndef makeExcellon(manufacturer='default'):\n    \"\"\"\n    \"\"\"\n\n    ns = {'pcbmode':config.cfg['ns']['pcbmode'],\n          'svg':config.cfg['ns']['svg']} \n\n    # Open the board's SVG\n    svg_in = utils.openBoardSVG()\n    drills_layer = svg_in.find(\"//svg:g[@pcbmode:sheet='drills']\",\n                               namespaces=ns)\n\n    excellon = Excellon(drills_layer)\n\n    # Save to file\n    base_dir = os.path.join(config.cfg['base-dir'], \n                            config.cfg['locations']['build'], \n                            'production')\n    base_name = \"%s_rev_%s\" % (config.brd['config']['name'],\n                               config.brd['config']['rev'])\n\n    filename_info = config.cfg['manufacturers'][manufacturer]['filenames']['drills']\n\n    add = '_%s.%s' % ('drills',\n                      filename_info['plated'].get('ext') or 'txt')\n    filename = os.path.join(base_dir, base_name + add)\n\n    with open(filename, \"wb\") as f:\n        for line in excellon.getExcellon():\n            f.write(line)\n\n\n\n\n\nclass Excellon():\n    \"\"\"\n    \"\"\"\n\n    def __init__(self, svg):\n        \"\"\"\n        \"\"\"\n\n        self._svg = svg\n\n        self._ns = {'pcbmode':config.cfg['ns']['pcbmode'],\n                    'svg':config.cfg['ns']['svg']} \n\n        # Get all drill paths except for the ones used in the\n        # drill-index\n        drill_paths = self._svg.findall(\".//svg:g[@pcbmode:type='component-shapes']//svg:path\",\n                                     namespaces=self._ns)\n\n        drills_dict = {}\n        for drill_path in drill_paths:\n            diameter = drill_path.get('{'+config.cfg['ns']['pcbmode']+'}diameter')\n            location = self._getLocation(drill_path)\n            if diameter not in drills_dict:\n                drills_dict[diameter] = {}\n                drills_dict[diameter]['locations'] = []\n            drills_dict[diameter]['locations'].append(location)\n\n        self._preamble = self._createPreamble()\n        self._content = self._createContent(drills_dict)\n        self._postamble = self._createPostamble()\n\n\n    def getExcellon(self):\n        return (self._preamble+\n                self._content+\n                self._postamble)\n\n\n\n    def _createContent(self, drills):\n        \"\"\"\n        \"\"\"\n        ex = []\n        for i, diameter in enumerate(drills):\n            # This is probably not necessary, but I'm not 100% certain\n            # that if the item order of a dict is gurenteed. If not\n            # the result can be quite devastating where drill\n            # diameters are wrong!\n            # Drill index must be greater than 0\n            drills[diameter]['index'] = i+1\n            ex.append(\"T%dC%s\\n\" % (i+1, diameter)) \n\n        ex.append('M95\\n') # End of a part program header\n\n        for diameter in drills:\n            ex.append(\"T%s\\n\" % ",
    "\"\"\"Run tests for the kmeans portion of the kmeans module\"\"\"\n\nimport kmeans.kmeans.kmeans as kmeans\nimport numpy as np\nimport random\n\n\ndef test_1dim_distance():\n    \"\"\"See if this contraption works in 1 dimension\"\"\"\n    num1 = random.random()\n    num2 = random.random()\n    assert kmeans.ndim_euclidean_distance(num1, num2) == abs(num1-num2)\n\n\ndef test_ndim_distance():\n    \"\"\"Test to see if changing val by 1 does what it ought to do\n    convert to float to integer because floating arithmetic makes testing\n    analytic functions a mess\"\"\"\n    rand = random.random\n    point1 = [rand(), rand(), rand(), rand(), rand(), rand()]\n    point2 = [point1[0]+1] + point1[1:] # just shift x to the right by 1\n    assert int(round(kmeans.ndim_euclidean_distance(point1, point2))) == 1\n\n\ndef test_maxiters():\n    \"\"\"ensure the iteration ceiling works\"\"\"\n  #  assert kmeans.should_iter([], [], iterations=29) == True\n    assert kmeans.should_iter([], [], iterations=30) == False\n    assert kmeans.should_iter([], [], iterations=31) == False\n\n\ndef test_random_centroid_dimensions():\n    \"\"\"ensure the correct number of dimensions\"\"\"\n    dimensions = random.randrange(1, 100)\n    k = random.randrange(1, 100)\n    centroids = kmeans.random_centroids(k, dimensions)\n    for centroid in centroids:\n        assert len(centroid) == dimensions\n\n\ndef test_iterated_centroid():\n    \"\"\"ensure that the average across each dimension is returned\"\"\"\n    new_centroid = kmeans.iterated_centroid([[1, 1, 1], [2, 2, 2]],\\\n            [[100, 200, 300]], [(0, 0), (1, 0)])\n    np.testing.assert_allclose(new_centroid, np.array([[1.5, 1.5, 1.5]]),\\\n            rtol=1e-5)\n\n",
    "\"\"\"\nDjango settings for ross project.\n\nGenerated by 'django-admin startproject' using Django 1.10.6.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.10/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.10/ref/settings/\n\"\"\"\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'jtn=n8&nq9jgir8_z1ck40^c1s22d%=)z5qsm*q(bku*_=^sg&'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'ross.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ross.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.10/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Imag",
    "import re\nimport hashlib\n\nFNAME_MATCH = re.compile(r'/([^/]+)$')  # From the last slash to the end of the string \nPREFIX = re.compile(r'([^:]+://)(/)?(.+)')  # Check for a prefix like data://\n\n\ndef getParentAndBase(path):\n    match = PREFIX.match(path)\n    if match is None:\n        if path.endswith('/'):\n            stripped_path = path[:-1]\n        else:\n            stripped_path = path\n        base = FNAME_MATCH.search(stripped_path)\n        if base is None:\n            raise ValueError('Invalid path')\n        parent = FNAME_MATCH.sub('', stripped_path)\n        return parent, base.group(1)\n    else:\n        prefix, leading_slash, uri = match.groups()\n        parts = uri.split('/')\n        parent_path = '/'.join(parts[:-1])\n\n        if leading_slash is not None:\n            parent_path = '{prefix}/{uri}'.format(prefix=prefix, uri='/'.join(parts[:-1]))\n        else:\n            parent_path = '{prefix}{uri}'.format(prefix=prefix, uri='/'.join(parts[:-1]))\n        return parent_path, parts[-1]\n\n\ndef pathJoin(parent, base):\n    if parent.endswith('/'):\n        return parent + base\n    return parent + '/' + base\n\n\ndef md5_for_file(fname):\n    hash_md5 = hashlib.md5()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_md5.update(chunk)\n    return str(hash_md5.hexdigest())\n\n\ndef md5_for_str(content):\n    hash_md5 = hashlib.md5()\n    hash_md5.update(content.encode())\n    return str(hash_md5.hexdigest())\n",
    "\"\"\"\ntrain supervised classifier with what's cooking recipe data\nobjective - determine recipe type categorical value from 20\n\"\"\"\nimport time\nfrom features_bow import *\nfrom features_word2vec import *\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.cross_validation import cross_val_score\n\n\n\"\"\" main entry method \"\"\"\ndef main(use_idf=False, random_state=None, std=False, n_jobs=-1, verbose=2):\n    wc_idf_map = None\n    if use_idf:\n        # ingredients inverse document frequencies\n        wc_components = build_tfidf_wc(verbose=(verbose > 0))\n        wc_idf = wc_components['model'].idf_\n        wc_idf_words = wc_components['model'].get_feature_names()\n        wc_idf_map = dict(zip(wc_idf_words, wc_idf))\n    # word2vec recipe feature vectors\n    wc_components = build_word2vec_wc(feature_vec_size=120, avg=True, idf=wc_idf_map, verbose=(verbose > 0))\n    y_train = wc_components['train']['df']['cuisine_code'].as_matrix()\n    X_train = wc_components['train']['features_matrix']\n    # standardize features aka mean ~ 0, std ~ 1\n    if std:\n        scaler = StandardScaler()\n        scaler.fit(X_train)\n        X_train = scaler.transform(X_train)\n    # random forest supervised classifier\n    time_0 = time.time()\n    clf = RandomForestClassifier(n_estimators=100, max_depth=None,\n        n_jobs=n_jobs, random_state=random_state, verbose=verbose)\n    # perform cross validation\n    cv_n_fold = 8\n    print 'cross validating %s ways...' % cv_n_fold\n    scores_cv = cross_val_score(clf, X_train, y_train, cv=cv_n_fold, n_jobs=-1)\n    print 'accuracy: %0.5f (+/- %0.5f)' % (scores_cv.mean(), scores_cv.std() * 2)\n    time_1 = time.time()\n    elapsed_time = time_1 - time_0\n    print 'cross validation took %.3f seconds' % elapsed_time\n\n\nif __name__ == '__main__':\n    main()\n",
    "# -*- coding: utf-8 -*-\n#\n# This file is part of Invenio.\n# Copyright (C) 2015-2018 CERN.\n#\n# Invenio is free software; you can redistribute it and/or modify it\n# under the terms of the MIT License; see LICENSE file for more details.\n\n\"\"\"Configuration options for Invenio-Search.\n\nThe documentation for the configuration is in docs/configuration.rst.\n\"\"\"\n\n#\n# ELASTIC configuration\n#\n\nSEARCH_CLIENT_CONFIG = None\n\"\"\"Dictionary of options for the Elasticsearch client.\n\nThe value of this variable is passed to :py:class:`elasticsearch.Elasticsearch`\nas keyword arguments and is used to configure the client. See the available\nkeyword arguments in the two following classes:\n\n- :py:class:`elasticsearch.Elasticsearch`\n- :py:class:`elasticsearch.Transport`\n\nIf you specify the key ``hosts`` in this dictionary, the configuration variable\n:py:class:`~invenio_search.config.SEARCH_ELASTIC_HOSTS` will have no effect.\n\"\"\"\n\nSEARCH_ELASTIC_HOSTS = None  # default localhost\n\"\"\"Elasticsearch hosts.\n\nBy default, Invenio connects to ``localhost:9200``.\n\nThe value of this variable is a list of dictionaries, where each dictionary\nrepresents a host. The available keys in each dictionary is determined by the\nconnection class:\n\n- :py:class:`elasticsearch.connection.Urllib3HttpConnection` (default)\n- :py:class:`elasticsearch.connection.RequestsHttpConnection`\n\nYou can change the connection class via the\n:py:class:`~invenio_search.config.SEARCH_CLIENT_CONFIG`. If you specified the\n``hosts`` key in :py:class:`~invenio_search.config.SEARCH_CLIENT_CONFIG` then\nthis configuration variable will have no effect.\n\"\"\"\n\n\nSEARCH_MAPPINGS = None  # loads all mappings and creates aliases for them\n\"\"\"List of aliases for which, their search mappings should be created.\n\n- If `None` all aliases (and their search mappings) defined through the\n  ``invenio_search.mappings`` entry point in setup.py will be created.\n- Provide an empty list ``[]`` if no aliases (or their search mappings)\n  should be created.\n\nFor example if you don't want to create aliases\nand their mappings for `authors`:\n\n.. code-block:: python\n\n    # in your `setup.py` you would specify:\n    entry_points={\n        'invenio_search.mappings': [\n            'records = invenio_foo_bar.mappings',\n            'authors = invenio_foo_bar.mappings',\n        ],\n    }\n\n    # and in your config.py\n    SEARCH_MAPPINGS = ['records']\n\"\"\"\n\nSEARCH_RESULTS_MIN_SCORE = None\n\"\"\"If set, the `min_score` parameter is added to each search request body.\n\nThe `min_score` parameter excludes results which have a `_score` less than\nthe minimum specified in `min_score`.\n\nNote that the `max_score` varies depending on the number of results for a given\nsearch query and it is not absolute value. Therefore, setting `min_score` too\nhigh can lead to 0 results because it can be higher than any result's `_score`.\n\nPlease refer to `Elasticsearch min_score documentation\n<https://www.elastic.co/guide/en/elasticsearch/reference/current/\nsearch-request-min-score.html>`_ for ",
    "from __future__ import unicode_literals\n\nfrom django.apps import AppConfig\n\n\nclass RfhistoryConfig(AppConfig):\n    name = 'RFHistory'\n",
    "import unittest\nfrom polycircles import polycircles\nfrom nose.tools import assert_equal, assert_almost_equal\n\n\nclass TestDifferentOutputs(unittest.TestCase):\n    \"\"\"Tests the various output methods: KML style, WKT, lat-lon and lon-lat.\"\"\"\n\n    def setUp(self):\n        self.latitude = 32.074322\n        self.longitude = 34.792081\n        self.radius_meters = 100\n        self.number_of_vertices = 36\n        self.polycircle = \\\n            polycircles.Polycircle(latitude=self.latitude,\n                                   longitude=self.longitude,\n                                   radius=self.radius_meters,\n                                   number_of_vertices=self.number_of_vertices)\n\n    def test_lat_lon_output(self):\n        \"\"\"Asserts that the vertices in the lat-lon output are in the\n        right order (lat before long).\"\"\"\n        for vertex in self.polycircle.to_lat_lon():\n            assert_almost_equal(vertex[0], self.latitude, places=2)\n            assert_almost_equal(vertex[1], self.longitude, places=2)\n\n    def test_lon_lat_output(self):\n        \"\"\"Asserts that the vertices in the lat-lon output are in the\n        right order (lat before long).\"\"\"\n        for vertex in self.polycircle.to_lon_lat():\n            assert_almost_equal(vertex[0], self.longitude, places=2)\n            assert_almost_equal(vertex[1], self.latitude, places=2)\n\n    def test_vertices_equals_lat_lon(self):\n        \"\"\"Asserts that the \"vertices\" property is identical to the return\n        value of to_lat_lon().\"\"\"\n        assert_equal(self.polycircle.vertices, self.polycircle.to_lat_lon())\n\n    def test_kml_equals_lon_lat(self):\n        \"\"\"Asserts that the return value of to_kml() property is identical to\n        the return value of to_lon_lat().\"\"\"\n        assert_equal(self.polycircle.to_kml(), self.polycircle.to_lon_lat())\n\nif __name__ == '__main__':\n    unittest.main()",
    "# coding: utf-8\n\n\"\"\" General utilities. \"\"\"\n\nfrom __future__ import division, print_function\n\n__author__ = \"adrn <adrn@astro.columbia.edu>\"\n\n# Standard library\nimport collections\nimport sys\nimport logging\nimport multiprocessing\n\n# Third-party\nimport numpy as np\n\n__all__ = ['get_pool']\n\n# Create logger\nlogger = logging.getLogger(__name__)\n\nclass SerialPool(object):\n\n    def close(self):\n        return\n\n    def map(self, *args, **kwargs):\n        return map(*args, **kwargs)\n\ndef get_pool(mpi=False, threads=None):\n    \"\"\" Get a pool object to pass to emcee for parallel processing.\n        If mpi is False and threads is None, pool is None.\n\n        Parameters\n        ----------\n        mpi : bool\n            Use MPI or not. If specified, ignores the threads kwarg.\n        threads : int (optional)\n            If mpi is False and threads is specified, use a Python\n            multiprocessing pool with the specified number of threads.\n    \"\"\"\n\n    if mpi:\n        from emcee.utils import MPIPool\n\n        # Initialize the MPI pool\n        pool = MPIPool()\n\n        # Make sure the thread we're running on is the master\n        if not pool.is_master():\n            pool.wait()\n            sys.exit(0)\n        logger.debug(\"Running with MPI...\")\n\n    elif threads > 1:\n        logger.debug(\"Running with multiprocessing on {} cores...\"\n                     .format(threads))\n        pool = multiprocessing.Pool(threads)\n\n    else:\n        logger.debug(\"Running serial...\")\n        pool = SerialPool()\n\n    return pool\n\ndef gram_schmidt(y):\n    \"\"\" Modified Gram-Schmidt orthonormalization of the matrix y(n,n) \"\"\"\n\n    n = y.shape[0]\n    if y.shape[1] != n:\n        raise ValueError(\"Invalid shape: {}\".format(y.shape))\n    mo = np.zeros(n)\n\n    # Main loop\n    for i in range(n):\n        # Remove component in direction i\n        for j in range(i):\n            esc = np.sum(y[j]*y[i])\n            y[i] -= y[j]*esc\n\n        # Normalization\n        mo[i] = np.linalg.norm(y[i])\n        y[i] /= mo[i]\n\n    return mo\n\nclass use_backend(object):\n\n    def __init__(self, backend):\n        import matplotlib.pyplot as plt\n        from IPython.core.interactiveshell import InteractiveShell\n        from IPython.core.pylabtools import backend2gui\n\n        self.shell = InteractiveShell.instance()\n        self.old_backend = backend2gui[str(plt.get_backend())]\n        self.new_backend = backend\n\n    def __enter__(self):\n        gui, backend = self.shell.enable_matplotlib(self.new_backend)\n\n    def __exit__(self, type, value, tb):\n        gui, backend = self.shell.enable_matplotlib(self.old_backend)\n\ndef inherit_docs(cls):\n    for name, func in vars(cls).items():\n        if not func.__doc__:\n            for parent in cls.__bases__:\n                try:\n                    parfunc = getattr(parent, name)\n                except AttributeError: # parent doesn't have function\n                    break\n                if parfunc and getattr(parfunc, '__doc__', None):\n                    func.__doc"
  ],
  "java": [
    "/**\n * The MIT License Copyright (c) 2015 Teal Cube Games\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n * associated documentation files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or\n * substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage land.face.strife.managers;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport land.face.strife.StrifePlugin;\nimport land.face.strife.data.champion.Champion;\nimport land.face.strife.data.champion.LifeSkillType;\nimport org.bukkit.entity.Player;\n\npublic class CombatStatusManager {\n\n  private final StrifePlugin plugin;\n  private final Map<Player, Integer> tickMap = new ConcurrentHashMap<>();\n\n  private static final int SECONDS_TILL_EXPIRY = 8;\n\n  public CombatStatusManager(StrifePlugin plugin) {\n    this.plugin = plugin;\n  }\n\n  public boolean isInCombat(Player player) {\n    return tickMap.containsKey(player);\n  }\n\n  public void addPlayer(Player player) {\n    tickMap.put(player, SECONDS_TILL_EXPIRY);\n  }\n\n  public void tickCombat() {\n    for (Player player : tickMap.keySet()) {\n      if (!player.isOnline() || !player.isValid()) {\n        tickMap.remove(player);\n        continue;\n      }\n      int ticksLeft = tickMap.get(player);\n      if (ticksLeft < 1) {\n        doExitCombat(player);\n        tickMap.remove(player);\n        continue;\n      }\n      tickMap.put(player, ticksLeft - 1);\n    }\n  }\n\n  public void doExitCombat(Player player) {\n    if (!tickMap.containsKey(player)) {\n      return;\n    }\n    Champion champion = plugin.getChampionManager().getChampion(player);\n    if (champion.getDetailsContainer().getExpValues() == null) {\n      return;\n    }\n    for (LifeSkillType type : champion.getDetailsContainer().getExpValues().keySet()) {\n      plugin.getSkillExperienceManager().addExperience(player, type,\n          champion.getDetailsContainer().getExpValues().get(type), false, false);\n    }\n    champion.getDetailsContainer().clearAll();\n  }\n}\n",
    "package com.jeecg.qywx.core.service;\n\nimport com.jeecg.qywx.base.entity.QywxReceivetext;\n\n/**\n * \u6587\u672c\u5904\u7406\u63a5\u53e3\n * @author \u4ed8\u660e\u661f\n *\n */\npublic interface TextDealInterfaceService {\n\t/**\n\t * \u6587\u672c\u6d88\u606f\u5904\u7406\u63a5\u53e3\n\t * @param receiveText \u6587\u672c\u6d88\u606f\u5b9e\u4f53\u7c7b\n\t */\n\tvoid dealTextMessage(QywxReceivetext receiveText);\n}\n",
    "/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n */\n\npackage com.microsoft.azure.management.datafactory.v2018_06_01;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.JsonTypeName;\n\n/**\n * The location of Google Cloud Storage dataset.\n */\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\", defaultImpl = GoogleCloudStorageLocation.class)\n@JsonTypeName(\"GoogleCloudStorageLocation\")\npublic class GoogleCloudStorageLocation extends DatasetLocation {\n    /**\n     * Specify the bucketName of Google Cloud Storage. Type: string (or\n     * Expression with resultType string).\n     */\n    @JsonProperty(value = \"bucketName\")\n    private Object bucketName;\n\n    /**\n     * Specify the version of Google Cloud Storage. Type: string (or Expression\n     * with resultType string).\n     */\n    @JsonProperty(value = \"version\")\n    private Object version;\n\n    /**\n     * Get specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string).\n     *\n     * @return the bucketName value\n     */\n    public Object bucketName() {\n        return this.bucketName;\n    }\n\n    /**\n     * Set specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string).\n     *\n     * @param bucketName the bucketName value to set\n     * @return the GoogleCloudStorageLocation object itself.\n     */\n    public GoogleCloudStorageLocation withBucketName(Object bucketName) {\n        this.bucketName = bucketName;\n        return this;\n    }\n\n    /**\n     * Get specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).\n     *\n     * @return the version value\n     */\n    public Object version() {\n        return this.version;\n    }\n\n    /**\n     * Set specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).\n     *\n     * @param version the version value to set\n     * @return the GoogleCloudStorageLocation object itself.\n     */\n    public GoogleCloudStorageLocation withVersion(Object version) {\n        this.version = version;\n        return this;\n    }\n\n}\n",
    "package se.dsv.waora.deviceinternetinformation;\r\n\r\nimport android.content.Context;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.support.v7.app.ActionBarActivity;\r\nimport android.widget.TextView;\r\n\r\n\r\n/**\r\n * <code>ConnectionActivity</code> presents UI for showing if the device\r\n * is connected to internet.\r\n *\r\n * @author Dushant Singh\r\n */\r\npublic class ConnectionActivity extends ActionBarActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        // Initiate view\r\n        TextView connectivityStatus = (TextView) findViewById(R.id.textViewDeviceConnectivity);\r\n\r\n        // Get connectivity service.\r\n        ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n        // Get active network information\r\n        NetworkInfo activeNetwork = manager.getActiveNetworkInfo();\r\n\r\n        // Check if active network is connected.\r\n        boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();\r\n        if (isConnected) {\r\n            // Set status connected\r\n            connectivityStatus.setText(getString(R.string.online));\r\n            connectivityStatus.setTextColor(getResources().getColor(R.color.color_on));\r\n\r\n            // Check if connected with wifi\r\n            boolean isWifiOn = activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;\r\n            if (isWifiOn) {\r\n                // Set wifi status on\r\n                TextView wifiTextView = (TextView) findViewById(R.id.textViewWifi);\r\n                wifiTextView.setText(getString(R.string.on));\r\n                wifiTextView.setTextColor(getResources().getColor(R.color.color_on));\r\n\r\n            } else {\r\n                // Set mobile data status on.\r\n                TextView mobileDataTextView = (TextView) findViewById(R.id.textViewMobileData);\r\n                mobileDataTextView.setText(getString(R.string.on));\r\n                mobileDataTextView.setTextColor(getResources().getColor(R.color.color_on));\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "package com.github.kwoin.kgate.core.sequencer;\n\nimport com.github.kwoin.kgate.core.message.Message;\nimport com.github.kwoin.kgate.core.session.Session;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.Nullable;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.net.SocketException;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.concurrent.CountDownLatch;\n\n\n/**\n * @author P. WILLEMET\n */\npublic abstract class AbstractSequencer<T extends Message> implements Iterator<T> {\n\n\n    private final Logger logger = LoggerFactory.getLogger(AbstractSequencer.class);\n    protected Session<T> session;\n    protected boolean hasNext;\n    protected final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    protected @Nullable CountDownLatch oppositeSessionSignal;\n\n\n    public void setSession(Session<T> session) {\n\n        this.session = session;\n        hasNext = !session.getInput().isInputShutdown();\n\n    }\n\n    \n    @Override\n    public boolean hasNext() {\n\n        hasNext &= !session.getInput().isClosed();\n        return hasNext;\n\n    }\n\n\n    @Override\n    @Nullable\n    public T next() {\n\n        if(!hasNext())\n            throw new NoSuchElementException();\n\n        baos.reset();\n\n        if(oppositeSessionSignal != null) {\n            try {\n                oppositeSessionSignal.await();\n            } catch (InterruptedException e) {\n                logger.warn(\"Waiting for opposite session signal interrupted\");\n                oppositeSessionSignal = null;\n            }\n        }\n\n        try {\n            return readNextMessage();\n        } catch (SocketException e) {\n            logger.debug(\"Input read() interrupted because socket has been closed\");\n            hasNext = false;\n            return null;\n        } catch (IOException e) {\n            logger.error(\"Unexpected error while reading next message\", e);\n            return null;\n        } finally {\n            resetState();\n        }\n\n    }\n\n\n    protected abstract T readNextMessage() throws IOException;\n\n\n    protected abstract void resetState();\n\n\n    protected void waitForOppositeSessionSignal() {\n\n        if(oppositeSessionSignal == null) {\n            logger.debug(\"Wait for opposite session...\");\n            oppositeSessionSignal = new CountDownLatch(1);\n        }\n\n    }\n\n\n    public void oppositeSessionSignal() {\n\n        if(oppositeSessionSignal != null) {\n            logger.debug(\"wait for opposite session RELEASED\");\n            oppositeSessionSignal.countDown();\n        }\n\n    }\n\n\n    protected byte readByte() throws IOException {\n\n        int read = session.getInput().getInputStream().read();\n        baos.write(read);\n        return (byte) read;\n\n    }\n\n\n    protected byte[] readBytes(int n) throws IOException {\n\n        byte[] bytes = new byte[n];\n        for (int i = 0; i < n; i++)\n            bytes[i] = readByte();\n\n        return bytes;\n\n    }\n\n\n    protec",
    "package fr.pizzeria.admin.web;\n\nimport java.io.IOException;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.apache.commons.lang3.StringUtils;\n\n@WebServlet(\"/login\")\npublic class LoginController extends HttpServlet {\n\n\t\n\n\n\t@Override\n\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\tRequestDispatcher rd = this.getServletContext().getRequestDispatcher(\"/WEB-INF/views/login/login.jsp\");\n\t\trd.forward(req, resp);\n\t}\n\t\n\t\n\t@Override\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\tString email = req.getParameter(\"email\");\n\t\tString password = req.getParameter(\"password\");\n\t\t\n\t\tif (StringUtils.isBlank(email) || StringUtils.isBlank(password)) \n\t\t{\n\t\t\tresp.sendError(400, \"Non non non ! Zone interdite\");\n\t\t} \n\t\telse if ( StringUtils.equals(email, \"admin@pizzeria.fr\") \n\t\t\t&&  StringUtils.equals(password, \"admin\"))\n\t\t{\n\t\t\tHttpSession session = req.getSession();\n\t\t\tsession.setAttribute(\"email\", email);\n\t\t\tresp.sendRedirect(req.getContextPath() + \"/pizzas/list\");\n\t\t} \n\t\telse\n\t\t{\n\t\t\tresp.setStatus(403);\n\t\t\treq.setAttribute(\"msgerr\", \"Ooppps   noooo\");\n\t\t\tRequestDispatcher rd = this.getServletContext().getRequestDispatcher(\"/WEB-INF/views/login/login.jsp\");\n\t\t\trd.forward(req, resp);\n\t\t\n\t\t}\n\t}\n\n\t\n\n\t\n}\n",
    "package org.anodyneos.xp.tag.core;\n\nimport javax.servlet.jsp.el.ELException;\n\nimport org.anodyneos.xp.XpException;\nimport org.anodyneos.xp.XpOutput;\nimport org.anodyneos.xp.tagext.XpTagSupport;\nimport org.xml.sax.SAXException;\n\n/**\n * @author jvas\n */\npublic class DebugTag extends XpTagSupport {\n\n    public DebugTag() {\n        super();\n    }\n\n    /* (non-Javadoc)\n     * @see org.anodyneos.xp.tagext.XpTag#doTag(org.anodyneos.xp.XpContentHandler)\n     */\n    public void doTag(XpOutput out) throws XpException, ELException, SAXException {\n        XpOutput newOut = new XpOutput(new DebugCH(System.err, out.getXpContentHandler()));\n        getXpBody().invoke(newOut);\n    }\n\n}\n",
    "package com.codenotfound.endpoint;\n\nimport java.math.BigInteger;\n\nimport org.example.ticketagent.ObjectFactory;\nimport org.example.ticketagent.TFlightsResponse;\nimport org.example.ticketagent.TListFlights;\nimport org.example.ticketagent_wsdl11.TicketAgent;\n\npublic class TicketAgentImpl implements TicketAgent {\n\n  @Override\n  public TFlightsResponse listFlights(TListFlights body) {\n    ObjectFactory factory = new ObjectFactory();\n    TFlightsResponse response = factory.createTFlightsResponse();\n    response.getFlightNumber().add(BigInteger.valueOf(101));\n\n    return response;\n  }\n}\n",
    "package com.eaw1805.data.model.map;\n\nimport com.eaw1805.data.constants.RegionConstants;\nimport com.eaw1805.data.model.Game;\n\nimport java.io.Serializable;\n\n/**\n * Represents a region of the world.\n */\npublic class Region implements Serializable {\n\n    /**\n     * Required by Serializable interface.\n     */\n    static final long serialVersionUID = 42L; //NOPMD\n\n    /**\n     * Region's identification number.\n     */\n    private int id; // NOPMD\n\n    /**\n     * Region's code.\n     */\n    private char code;\n\n    /**\n     * The name of the region.\n     */\n    private String name;\n\n    /**\n     * The game this region belongs to.\n     */\n    private Game game;\n\n    /**\n     * Default constructor.\n     */\n    public Region() {\n        // Empty constructor\n    }\n\n    /**\n     * Get the Identification number of the region.\n     *\n     * @return the identification number of the region.\n     */\n    public int getId() {\n        return id;\n    }\n\n    /**\n     * Set the Identification number of the region.\n     *\n     * @param identity the identification number of the region.\n     */\n    public void setId(final int identity) {\n        this.id = identity;\n    }\n\n    /**\n     * Get the name of the region.\n     *\n     * @return the name of the region.\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Set the thisName of the region.\n     *\n     * @param thisName the name of the region.\n     */\n    public void setName(final String thisName) {\n        this.name = thisName;\n    }\n\n    /**\n     * Get the Single-char code of the region.\n     *\n     * @return the Single-char code of the region.\n     */\n    public char getCode() {\n        return code;\n    }\n\n    /**\n     * Set the single-char code of the region.\n     *\n     * @param thisCode the single-char code of the region.\n     */\n    public void setCode(final char thisCode) {\n        this.code = thisCode;\n    }\n\n    /**\n     * Get the game this region belongs to.\n     *\n     * @return The game of the region.\n     */\n    public Game getGame() {\n        return game;\n    }\n\n    /**\n     * Set the game this region belongs to.\n     *\n     * @param value The game.\n     */\n    public void setGame(final Game value) {\n        this.game = value;\n    }\n\n    /**\n     * Indicates whether some other object is \"equal to\" this one.\n     * The <code>equals</code> method implements an equivalence relation\n     * on non-null object references:\n     * <ul>\n     * <li>It is <i>reflexive</i>: for any non-null reference value\n     * <code>x</code>, <code>x.equals(x)</code> should return\n     * <code>true</code>.\n     * <li>It is <i>symmetric</i>: for any non-null reference values\n     * <code>x</code> and <code>y</code>, <code>x.equals(y)</code>\n     * should return <code>true</code> if and only if\n     * <code>y.equals(x)</code> returns <code>true</code>.\n     * <li>It is <i>transitive</i>: for any non-null reference values\n     * <code>x</code>, <code>y</code>, and <code>z</code>, if\n     * <code>x.equals(y)<",
    "package com.malalaoshi.android.ui.dialogs;\n\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.text.Editable;\nimport android.text.TextUtils;\nimport android.text.TextWatcher;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.RatingBar;\nimport android.widget.TextView;\n\nimport com.malalaoshi.android.R;\nimport com.malalaoshi.android.core.network.api.ApiExecutor;\nimport com.malalaoshi.android.core.network.api.BaseApiContext;\nimport com.malalaoshi.android.core.stat.StatReporter;\nimport com.malalaoshi.android.core.utils.MiscUtil;\nimport com.malalaoshi.android.entity.Comment;\nimport com.malalaoshi.android.network.Constants;\nimport com.malalaoshi.android.network.api.PostCommentApi;\nimport com.malalaoshi.android.ui.widgets.DoubleImageView;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport butterknife.Bind;\nimport butterknife.ButterKnife;\nimport butterknife.OnClick;\n\n/**\n * Created by donald on 2017/6/29.\n */\n\npublic class CommentDialog extends BaseDialog {\n    private static String ARGS_DIALOG_COMMENT_TYPE = \"comment type\";\n\n    private static String ARGS_DIALOG_TEACHER_NAME = \"teacher name\";\n    private static String ARGS_DIALOG_TEACHER_AVATAR = \"teacher avatar\";\n\n    private static String ARGS_DIALOG_LECTURER_NAME = \"lecturer name\";\n    private static String ARGS_DIALOG_LECTURER_AVATAR = \"lecturer avatar\";\n\n    private static String ARGS_DIALOG_ASSIST_NAME = \"assist name\";\n    private static String ARGS_DIALOG_ASSIST_AVATAR = \"assist avatar\";\n\n    private static String ARGS_DIALOG_COURSE_NAME = \"course name\";\n    private static String ARGS_DIALOG_COMMENT = \"comment\";\n    private static String ARGS_DIALOG_TIMESLOT = \"timeslot\";\n    @Bind(R.id.div_comment_dialog_avatar)\n    DoubleImageView mDivCommentDialogAvatar;\n    @Bind(R.id.tv_comment_dialog_teacher_course)\n    TextView mTvCommentDialogTeacherCourse;\n    @Bind(R.id.rb_comment_dialog_score)\n    RatingBar mRbCommentDialogScore;\n    @Bind(R.id.et_comment_dialog_input)\n    EditText mEtCommentDialogInput;\n    @Bind(R.id.tv_comment_dialog_commit)\n    TextView mTvCommentDialogCommit;\n    @Bind(R.id.iv_comment_dialog_close)\n    ImageView mIvCommentDialogClose;\n    private int mCommentType;\n    private String mTeacherName;\n    private String mTeacherAvatar;\n    private String mLeactureAvatar;\n    private String mLeactureName;\n    private String mAssistantAvatar;\n    private String mAssistantName;\n    private String mCourseName;\n    private Comment mComment;\n    private long mTimeslot;\n    private OnCommentResultListener mResultListener;\n\n    public CommentDialog(Context context) {\n        super(context);\n    }\n\n    public CommentDialog(Context context, Bundle bundle) {\n        super(context);\n        if (bundle != null) {\n            mCommentType = bundle.getInt(ARGS_DIALOG_COMMENT_TYPE);\n            if (mCommentType == 0) {\n      ",
    "import java.text.NumberFormat;\n\n// ****************************************************************\n//   ManageAccounts.java\n//   Use Account class to create and manage Sally and Joe's bank accounts\n\npublic class ManageAccounts\n{\n    public static void main(String[] args)\n    {\n\t\tAccount acct1, acct2;\n\t\tNumberFormat usMoney = NumberFormat.getCurrencyInstance();\n\t\t\n\t\t//create account1 for Sally with $1000\n\t\tacct1 = new Account(1000, \"Sally\", 1111);\n\t\t\n\t\t//create account2 for Joe with $500\n\t\tacct2 = new Account(500, \"Joe\", 1212);\n\t\t\n\t\t//deposit $100 to Joe's account\n\t\tacct2.deposit(100);\n\t\t\n\t\t//print Joe's new balance (use getBalance())\n\t\tSystem.out.println(\"Joe's new balance: \" + usMoney.format(acct2.getBalance()));\n\t\t\n\t\t//withdraw $50 from Sally's account\n\t\tacct1.withdraw(50);\n\t\t\n\t\t//print Sally's new balance (use getBalance())\n\t\tSystem.out.println(\"Sally's new balance: \" + usMoney.format(acct1.getBalance()));\n\t\t\n\t\t//charge fees to both accounts\n\t\tSystem.out.println(\"Sally's new balance after the fee is charged: \" + usMoney.format(acct1.chargeFee()));\n\t\tSystem.out.println(\"Joe's new balance after the fee is charged: \" + usMoney.format(acct2.chargeFee()));\n\t\t\n\t\t//change the name on Joe's account to Joseph\n\t\tacct2.changeName(\"Joseph\");\t\t\n\t\t\n\t\t//print summary for both accounts\t\t\n\t\tSystem.out.println(acct1);\n\t\tSystem.out.println(acct2);\n\t\t\n\t\t//close and display Sally's account\n\t\tacct1.close();\n\t\tSystem.out.println(acct1);\n\t\t\n\t\t//consolidate account test (doesn't work as acct1\n\t\tAccount newAcct = Account.consolidate(acct1, acct2);\n\t\t\t\t\n\t\tSystem.out.println(acct1);\n    }\n}\n\n",
    "/*The MIT License (MIT)\n\nCopyright (c) 2016 Muhammad Hammad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Sogiftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.*/\n\n\npackage org.dvare.annotations;\n\nimport org.dvare.expression.datatype.DataType;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\npublic @interface Type {\n\n    DataType dataType();\n\n}\n",
    "\npackage com.arekusu.datamover.model.jaxb;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for anonymous complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType>\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;sequence>\n *         &lt;element ref=\"{http://www.arekusu.com}DefinitionType\"/>\n *       &lt;/sequence>\n *       &lt;attribute name=\"version\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *     &lt;/restriction>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"definitionType\"\n})\n@XmlRootElement(name = \"ModelType\", namespace = \"http://www.arekusu.com\")\npublic class ModelType {\n\n    @XmlElement(name = \"DefinitionType\", namespace = \"http://www.arekusu.com\", required = true)\n    protected DefinitionType definitionType;\n    @XmlAttribute(name = \"version\")\n    protected String version;\n\n    /**\n     * Gets the value of the definitionType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link DefinitionType }\n     *     \n     */\n    public DefinitionType getDefinitionType() {\n        return definitionType;\n    }\n\n    /**\n     * Sets the value of the definitionType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link DefinitionType }\n     *     \n     */\n    public void setDefinitionType(DefinitionType value) {\n        this.definitionType = value;\n    }\n\n    /**\n     * Gets the value of the version property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getVersion() {\n        return version;\n    }\n\n    /**\n     * Sets the value of the version property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setVersion(String value) {\n        this.version = value;\n    }\n\n}\n",
    "package SOLID.Exercise.Logger.model.appenders;\n\n\nimport SOLID.Exercise.Logger.api.File;\nimport SOLID.Exercise.Logger.api.Layout;\nimport SOLID.Exercise.Logger.model.files.LogFile;\n\npublic class FileAppender extends BaseAppender {\n    private File file;\n\n    public FileAppender(Layout layout) {\n        super(layout);\n        this.setFile(new LogFile());\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n    @Override\n    public void append(String message) {\n        this.file.write(message);\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"%s, File size: %d\", super.toString(), this.file.getSize());\n    }\n}\n",
    "package nl.ulso.sprox.json.spotify;\n\nimport nl.ulso.sprox.Node;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n/**\n * Sprox processor for Spotify API album data. This is a very simple processor that ignores most data.\n * <p>\n * This implementation creates an Artist object for each and every artist in the response. But only the first one on\n * album level is kept in the end.\n * </p>\n */\npublic class AlbumFactory {\n\n    @Node(\"album\")\n    public Album createAlbum(@Node(\"name\") String name, @Node(\"release_date\") LocalDate releaseDate, Artist artist,\n                             List<Track> tracks) {\n        return new Album(name, releaseDate, artist, tracks);\n    }\n\n    @Node(\"artists\")\n    public Artist createArtist(@Node(\"name\") String name) {\n        return new Artist(name);\n    }\n\n    @Node(\"items\")\n    public Track createTrack(@Node(\"track_number\") Integer trackNumber, @Node(\"name\") String name) {\n        return new Track(trackNumber, name);\n    }\n}\n",
    "package com.gmail.hexragon.gn4rBot.command.ai;\n\nimport com.gmail.hexragon.gn4rBot.managers.commands.CommandExecutor;\nimport com.gmail.hexragon.gn4rBot.managers.commands.annotations.Command;\nimport com.gmail.hexragon.gn4rBot.util.GnarMessage;\nimport com.google.code.chatterbotapi.ChatterBot;\nimport com.google.code.chatterbotapi.ChatterBotFactory;\nimport com.google.code.chatterbotapi.ChatterBotSession;\nimport com.google.code.chatterbotapi.ChatterBotType;\nimport net.dv8tion.jda.entities.User;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Map;\nimport java.util.WeakHashMap;\n\n@Command(\n        aliases = {\"cbot\", \"cleverbot\"},\n        usage = \"(query)\",\n        description = \"Talk to Clever-Bot.\"\n)\npublic class PrivateCleverbotCommand extends CommandExecutor\n{\n    private ChatterBotFactory factory = new ChatterBotFactory();\n    private ChatterBotSession session = null;\n    \n    private Map<User, ChatterBotSession> sessionMap = new WeakHashMap<>();\n    \n    @Override\n    public void execute(GnarMessage message, String[] args)\n    {\n        try\n        {\n            if (!sessionMap.containsKey(message.getAuthor()))\n            {\n                ChatterBot bot = factory.create(ChatterBotType.CLEVERBOT);\n                sessionMap.put(message.getAuthor(), bot.createSession());\n            }\n            message.replyRaw(sessionMap.get(message.getAuthor()).think(StringUtils.join(args, \" \")));\n        }\n        catch (Exception e)\n        {\n            message.reply(\"Chat Bot encountered an exception. Restarting. `:[`\");\n            sessionMap.remove(message.getAuthor());\n        }\n    }\n}\n",
    "package logbook.data;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.Closeable;\r\nimport java.io.IOException;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.net.URLClassLoader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport javax.annotation.CheckForNull;\r\nimport javax.script.Invocable;\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\n\r\nimport logbook.config.AppConfig;\r\n\r\nimport org.apache.commons.io.FilenameUtils;\r\n\r\n/**\r\n * \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8aad\u307f\u8fbc\u307fEventListener\u306e\u5b9f\u88c5\u3092\u53d6\u5f97\u3059\u308b\r\n *\r\n */\r\npublic final class ScriptLoader implements Closeable {\r\n\r\n    /** ClassLoader */\r\n    private final URLClassLoader classLoader;\r\n\r\n    /** ScriptEngineManager */\r\n    private final ScriptEngineManager manager;\r\n\r\n    /**\r\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\r\n     */\r\n    public ScriptLoader() {\r\n        this.classLoader = URLClassLoader.newInstance(this.getLibraries());\r\n        this.manager = new ScriptEngineManager(this.classLoader);\r\n    }\r\n\r\n    /**\r\n     * \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8aad\u307f\u8fbc\u307fEventListener\u306e\u5b9f\u88c5\u3092\u53d6\u5f97\u3059\u308b<br>\r\n     *\r\n     * @param script \u30b9\u30af\u30ea\u30d7\u30c8\r\n     * @return \u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3088\u308a\u5b9f\u88c5\u3055\u308c\u305fEventListener\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u30a8\u30f3\u30b8\u30f3\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3001\u3082\u3057\u304f\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u95a2\u6570\u304cEventListener\u3092\u5b9f\u88c5\u3057\u306a\u3044\u5834\u5408null\r\n     * @throws IOException\r\n     * @throws ScriptException\r\n     */\r\n    @CheckForNull\r\n    public EventListener getEventListener(Path script) throws IOException, ScriptException {\r\n        try (BufferedReader reader = Files.newBufferedReader(script, StandardCharsets.UTF_8)) {\r\n            // \u62e1\u5f35\u5b50\u304b\u3089ScriptEngine\u3092\u53d6\u5f97\r\n            String ext = FilenameUtils.getExtension(script.toString());\r\n            ScriptEngine engine = this.manager.getEngineByExtension(ext);\r\n            if (engine != null) {\r\n                // eval\r\n                engine.eval(reader);\r\n                // \u5b9f\u88c5\u3092\u53d6\u5f97\r\n                EventListener listener = ((Invocable) engine).getInterface(EventListener.class);\r\n\r\n                if (listener != null) {\r\n                    return new ScriptEventAdapter(listener, script);\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ScriptEngineManager\u3067\u4f7f\u7528\u3059\u308b\u8ffd\u52a0\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\r\n     *\r\n     * @return \u30e9\u30a4\u30d6\u30e9\u30ea\r\n     */\r\n    public URL[] getLibraries() {\r\n        String[] engines = AppConfig.get().getScriptEngines();\r\n        List<URL> libs = new ArrayList<>();\r\n        for (String engine : engines) {\r\n            Path path = Paths.get(engine);\r\n            if (Files.isReadable(path)) {\r\n                try {\r\n                    libs.add(path.toUri().toURL());\r\n                } catch (MalformedURLException e) {\r\n                    // \u3053\u3053\u306b\u5165\u308b\u30d1\u30bf\u30fc\u30f3\u306f\u306a\u3044\u306f\u305a\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        return libs.toArray(new URL[libs.size()]);\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n        this.classLoader.close();\r\n    }\r\n}\r\n",
    "// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See License.txt in the project root.\n\n/*\n * Copyright 2000-2010 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.microsoft.alm.plugin.idea.tfvc.ui;\n\nimport com.google.common.annotations.VisibleForTesting;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.Messages;\nimport com.intellij.openapi.ui.TextFieldWithBrowseButton;\nimport com.intellij.util.ui.AbstractTableCellEditor;\nimport com.intellij.util.ui.CellEditorComponentWithBrowseButton;\nimport com.microsoft.alm.plugin.context.ServerContext;\nimport com.microsoft.alm.plugin.idea.common.resources.TfPluginBundle;\nimport com.microsoft.alm.plugin.idea.common.utils.VcsHelper;\nimport com.microsoft.alm.plugin.idea.tfvc.ui.servertree.ServerBrowserDialog;\nimport org.apache.commons.lang.StringUtils;\n\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport java.awt.Component;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class ServerPathCellEditor extends AbstractTableCellEditor {\n    private final String title;\n    private final Project project;\n    private final ServerContext serverContext;\n\n    private CellEditorComponentWithBrowseButton<JTextField> component;\n\n    public ServerPathCellEditor(final String title, final Project project, final ServerContext serverContext) {\n        this.title = title;\n        this.project = project;\n        this.serverContext = serverContext;\n    }\n\n    public Object getCellEditorValue() {\n        return component.getChildComponent().getText();\n    }\n\n    public Component getTableCellEditorComponent(final JTable table, final Object value, final boolean isSelected, final int row, final int column) {\n        final ActionListener listener = new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                createBrowserDialog();\n            }\n        };\n        component = new CellEditorComponentWithBrowseButton<JTextField>(new TextFieldWithBrowseButton(listener), this);\n        component.getChildComponent().setText((String) value);\n        return component;\n    }\n\n    /**\n     * Creates the browser dialog for file selection\n     */\n    @VisibleForTesting\n    protected void createBrowserDialog() {\n        final String serverPath = getServerPath();\n\n        if (StringUtils.isNotEmpty(serverPath)) {\n            final ServerBrowserDialog dialog = new ServerBrowserDialog(titl",
    "package org.peerbox.presenter;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.Node;\nimport javafx.scene.layout.Pane;\n\npublic class MainController implements INavigatable {\n\n\t@FXML\n\tprivate Pane mainPane;\n\n\t/*\n\t * (non-Javadoc)\n\t *\n\t * @see org.peerbox.presenter.INavigatable#setContent(javafx.scene.Node)\n\t */\n\t@Override\n\tpublic void setContent(Node content) {\n\t\tmainPane.getChildren().clear();\n\t\tmainPane.getChildren().add(content);\n\t\tmainPane.requestLayout();\n\t}\n\n}\n",
    "package tutorialHorizon.arrays;\n\n/**\n * Created by archithrapaka on 7/4/17.\n */\npublic class InsertionSort {\n\n    public static void insertionSort(int[] items, int n) {\n        int i, j;\n\n        for (i = 1; i < n; i++) {\n            j = i;\n            while (j > 0 && (items[j] < items[j - 1])) {\n                swap(items, j, j - 1);\n                j--;\n            }\n        }\n    }\n\n    public static void swap(int[] items, int i, int j) {\n        int temp = items[i];\n        items[i] = items[j];\n        items[j] = temp;\n    }\n\n    public static void display(int[] a) {\n        for (int i : a) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] a = {100, 4, 30, 15, 98, 3};\n        insertionSort(a, a.length);\n        display(a);\n    }\n\n}\n",
    "/*\n * This file is part of Sponge, licensed under the MIT License (MIT).\n *\n * Copyright (c) SpongePowered <https://www.spongepowered.org>\n * Copyright (c) contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage org.spongepowered.common.mixin.api.mcp.tileentity;\n\nimport net.minecraft.tileentity.TileEntityDropper;\nimport org.spongepowered.api.block.tileentity.carrier.Dropper;\nimport org.spongepowered.api.util.annotation.NonnullByDefault;\nimport org.spongepowered.asm.mixin.Mixin;\n\n@NonnullByDefault\n@Mixin(TileEntityDropper.class)\npublic abstract class TileEntityDropperMixin_API extends TileEntityDispenserMixin_API implements Dropper {\n\n}\n",
    "package biz.golek.whattodofordinner.business.contract.presenters;\n\nimport biz.golek.whattodofordinner.business.contract.entities.Dinner;\n\n/**\n * Created by Bartosz Go\u0142ek on 2016-02-10.\n */\npublic interface EditDinnerPresenter {\n    void Show(Dinner dinner);\n}\n",
    "/* SaveFileController\n *\n * Version 1.0\n *\n * November 13, 2017\n *\n * Copyright (c) 2017 Cup Of Java. All rights reserved.\n */\n\npackage com.cmput301f17t11.cupofjava.Controllers;\n\nimport android.content.Context;\n\nimport com.cmput301f17t11.cupofjava.Models.Habit;\nimport com.cmput301f17t11.cupofjava.Models.HabitEvent;\nimport com.cmput301f17t11.cupofjava.Models.HabitList;\nimport com.cmput301f17t11.cupofjava.Models.User;\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\n\n/**\n * Implements the file to save data to.\n *\n * @version 1.0\n */\npublic class SaveFileController {\n    private ArrayList<User> allUsers;\n    //private String username;\n    private String saveFile = \"test_save_file4.sav\";\n\n    public SaveFileController(){\n        this.allUsers = new ArrayList<User>();\n    }\n\n    /**\n     * Loads data from file.\n     *\n     * @param context instance of Context\n     */\n    private void loadFromFile(Context context){\n        try{\n            FileInputStream ifStream = context.openFileInput(saveFile);\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(ifStream));\n            Gson gson = new Gson();\n            Type userArrayListType = new TypeToken<ArrayList<User>>(){}.getType();\n            this.allUsers = gson.fromJson(bufferedReader, userArrayListType);\n            ifStream.close();\n        }\n        //create a new array list if a file does not already exist\n        catch (FileNotFoundException e){\n            this.allUsers = new ArrayList<User>();\n            saveToFile(context);\n        }\n        catch (IOException e){\n            throw new RuntimeException();\n        }\n    }\n\n    /**\n     * Saves current ArrayList contents in file.\n     *\n     * @param context instance of Context\n     */\n\n    private void saveToFile(Context context){\n        try{\n            FileOutputStream ofStream = context.openFileOutput(saveFile, Context.MODE_PRIVATE);\n            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(ofStream));\n            Gson gson = new Gson();\n            gson.toJson(this.allUsers, bufferedWriter);\n            bufferedWriter.flush();\n            ofStream.close();\n        }\n        catch (FileNotFoundException e){\n            //shouldn't really happen, since a file not found would create a new file.\n            throw new RuntimeException(\"Laws of nature defied!\");\n        }\n        catch (IOException e){\n            throw new RuntimeException();\n        }\n    }\n\n    /**\n     * Adds new user and saves to file.\n     *\n     * @param context instance of Context\n     * @param user instance of User\n     * @see User\n     */\n    public void addNewUser(Context",
    "package doit.study.droid.fragments;\n\nimport android.app.Activity;\nimport android.app.Dialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.DialogFragment;\nimport android.support.v4.app.Fragment;\nimport android.support.v7.app.AlertDialog;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\n\nimport doit.study.droid.R;\n\npublic class DislikeDialogFragment extends DialogFragment {\n    public static final String EXTRA_CAUSE = \"doit.study.droid.extra_cause\";\n    private static final String QUESTION_TEXT_KEY = \"doit.study.droid.question_text_key\";\n    private Activity mHostActivity;\n    private View mView;\n    private int[] mCauseIds = {R.id.question_incorrect, R.id.answer_incorrect, R.id.documentation_irrelevant};\n\n    public static DislikeDialogFragment newInstance(String questionText) {\n        DislikeDialogFragment dislikeDialog = new DislikeDialogFragment();\n        Bundle arg = new Bundle();\n        arg.putString(QUESTION_TEXT_KEY, questionText);\n        dislikeDialog.setArguments(arg);\n        return dislikeDialog;\n    }\n\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        mHostActivity = getActivity();\n        LayoutInflater inflater = mHostActivity.getLayoutInflater();\n        mView = inflater.inflate(R.layout.fragment_dialog_dislike, null);\n\n        AlertDialog.Builder builder = new AlertDialog.Builder(mHostActivity);\n        builder.setMessage(getString(R.string.report_because))\n                .setView(mView)\n                .setPositiveButton(mHostActivity.getString(R.string.report), new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        Fragment fr = getTargetFragment();\n                        if (fr != null) {\n                            Intent intent = new Intent();\n                            intent.putExtra(EXTRA_CAUSE, formReport());\n                            fr.onActivityResult(getTargetRequestCode(), Activity.RESULT_OK, intent);\n                        }\n                    }\n                })\n                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                        // User cancelled the dialog\n                    }\n                });\n        // Create the AlertDialog object and return it\n        return builder.create();\n    }\n\n    private String formReport() {\n        EditText editText = (EditText) mView.findViewById(R.id.comment);\n        StringBuilder result = new StringBuilder(\" Cause:\");\n        for (int id : mCauseIds) {\n            CheckBox checkBox = (CheckBox) mView.findViewById(id);\n            if (checkBox.isChecked())\n                result.append(checkBox.getText())\n                        .append(\",\");\n        }\n        result.a",
    "\npackage slacknotifications.teamcity.payload;\n\nimport jetbrains.buildServer.messages.Status;\nimport jetbrains.buildServer.responsibility.ResponsibilityEntry;\nimport jetbrains.buildServer.responsibility.TestNameResponsibilityEntry;\nimport jetbrains.buildServer.serverSide.*;\nimport jetbrains.buildServer.tests.TestName;\nimport slacknotifications.teamcity.BuildStateEnum;\nimport slacknotifications.teamcity.Loggers;\nimport slacknotifications.teamcity.payload.content.SlackNotificationPayloadContent;\n\nimport java.util.Collection;\n\npublic class SlackNotificationPayloadManager {\n\n    SBuildServer server;\n\n    public SlackNotificationPayloadManager(SBuildServer server){\n        this.server = server;\n        Loggers.SERVER.info(\"SlackNotificationPayloadManager :: Starting\");\n    }\n\n\n    public SlackNotificationPayloadContent beforeBuildFinish(SRunningBuild runningBuild, SFinishedBuild previousBuild) {\n        SlackNotificationPayloadContent content = new SlackNotificationPayloadContent(server, runningBuild, previousBuild, BuildStateEnum.BEFORE_BUILD_FINISHED);\n        return content;\n    }\n\n\n    public SlackNotificationPayloadContent buildFinished(SRunningBuild runningBuild, SFinishedBuild previousBuild) {\n        SlackNotificationPayloadContent content = new SlackNotificationPayloadContent(server, runningBuild, previousBuild, BuildStateEnum.BUILD_FINISHED);\n        return content;\n    }\n\n    public SlackNotificationPayloadContent buildInterrupted(SRunningBuild runningBuild, SFinishedBuild previousBuild) {\n        SlackNotificationPayloadContent content = new SlackNotificationPayloadContent(server, runningBuild, previousBuild, BuildStateEnum.BUILD_INTERRUPTED);\n        return content;\n    }\n\n    public SlackNotificationPayloadContent buildStarted(SRunningBuild runningBuild, SFinishedBuild previousBuild) {\n        SlackNotificationPayloadContent content = new SlackNotificationPayloadContent(server, runningBuild, previousBuild, BuildStateEnum.BUILD_STARTED);\n        return content;\n    }\n\n    /** Used by versions of TeamCity less than 7.0\n     */\n    public SlackNotificationPayloadContent responsibleChanged(SBuildType buildType,\n                                     ResponsibilityInfo responsibilityInfoOld,\n                                     ResponsibilityInfo responsibilityInfoNew, boolean isUserAction) {\n\n        SlackNotificationPayloadContent content = new SlackNotificationPayloadContent(server, buildType, BuildStateEnum.RESPONSIBILITY_CHANGED);\n        String oldUser = \"Nobody\";\n        String newUser = \"Nobody\";\n        try {\n            oldUser = responsibilityInfoOld.getResponsibleUser().getDescriptiveName();\n        } catch (Exception e) {}\n        try {\n            newUser = responsibilityInfoNew.getResponsibleUser().getDescriptiveName();\n        } catch (Exception e) {}\n\n        content.setText(buildType.getFullName().toString()\n                        + \" changed responsibility from \"\n                        + oldUser\n                        + \" t",
    "package com.facetime.spring.support;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.facetime.core.conf.ConfigUtils;\nimport com.facetime.core.utils.StringUtils;\n\n/**\n * \u5206\u9875\u7c7b\n * \n * @author yufei\n * @param <T>\n */\npublic class Page<T> {\n\tprivate static int BEGIN_PAGE_SIZE = 20;\n\t/** \u4e0b\u62c9\u5206\u9875\u5217\u8868\u7684\u9012\u589e\u6570\u91cf\u7ea7 */\n\tprivate static int ADD_PAGE_SIZE_RATIO = 10;\n\tpublic static int DEFAULT_PAGE_SIZE = 10;\n\tprivate static int MAX_PAGE_SIZE = 200;\n\n\tprivate QueryInfo<T> queryInfo = null;\n\tprivate List<T> queryResult = null;\n\n\tpublic Page() {\n\t\tthis(new QueryInfo<T>());\n\t}\n\n\tpublic Page(QueryInfo<T> queryInfo) {\n\t\tthis.queryInfo = queryInfo;\n\t\tthis.queryResult = new ArrayList<T>(15);\n\t}\n\n\t/**\n\t * @return \u4e0b\u62c9\u5206\u9875\u5217\u8868\u7684\u9012\u589e\u6570\u91cf\u7ea7\n\t */\n\tpublic final static int getAddPageSize() {\n\t\tString addPageSizeRatio = ConfigUtils.getProperty(\"add_page_size_ratio\");\n\t\tif (StringUtils.isValid(addPageSizeRatio))\n\t\t\tADD_PAGE_SIZE_RATIO = Integer.parseInt(addPageSizeRatio);\n\t\treturn ADD_PAGE_SIZE_RATIO;\n\t}\n\n\t/**\n\t * @return \u9ed8\u8ba4\u5206\u9875\u4e0b\u62c9\u5217\u8868\u7684\u5f00\u59cb\u503c\n\t */\n\tpublic final static int getBeginPageSize() {\n\t\tString beginPageSize = ConfigUtils.getProperty(\"begin_page_size\");\n\t\tif (StringUtils.isValid(beginPageSize))\n\t\t\tBEGIN_PAGE_SIZE = Integer.parseInt(beginPageSize);\n\t\treturn BEGIN_PAGE_SIZE;\n\t}\n\n\t/**\n\t * \u9ed8\u8ba4\u5217\u8868\u8bb0\u5f55\u663e\u793a\u6761\u6570\n\t */\n\tpublic static final int getDefaultPageSize() {\n\t\tString defaultPageSize = ConfigUtils.getProperty(\"default_page_size\");\n\t\tif (StringUtils.isValid(defaultPageSize))\n\t\t\tDEFAULT_PAGE_SIZE = Integer.parseInt(defaultPageSize);\n\t\treturn DEFAULT_PAGE_SIZE;\n\t}\n\n\t/**\n\t * \u9ed8\u8ba4\u5206\u9875\u5217\u8868\u663e\u793a\u7684\u6700\u5927\u8bb0\u5f55\u6761\u6570\n\t */\n\tpublic static final int getMaxPageSize() {\n\t\tString maxPageSize = ConfigUtils.getProperty(\"max_page_size\");\n\t\tif (StringUtils.isValid(maxPageSize)) {\n\t\t\tMAX_PAGE_SIZE = Integer.parseInt(maxPageSize);\n\t\t}\n\t\treturn MAX_PAGE_SIZE;\n\t}\n\n\tpublic String getBeanName() {\n\t\treturn this.queryInfo.getBeanName();\n\t}\n\n\tpublic int getCurrentPageNo() {\n\t\treturn this.queryInfo.getCurrentPageNo();\n\t}\n\n\tpublic String getKey() {\n\t\treturn this.queryInfo.getKey();\n\t}\n\n\tpublic Integer getNeedRowNum() {\n\t\treturn this.getPageSize() - this.getQueryResult().size();\n\t}\n\n\tpublic long getNextPage() {\n\t\treturn this.queryInfo.getNextPage();\n\t}\n\n\tpublic int getPageCount() {\n\t\treturn this.queryInfo.getPageCount();\n\t}\n\n\tpublic int getPageSize() {\n\t\treturn this.queryInfo.getPageSize();\n\t}\n\n\tpublic List<T> getParams() {\n\t\treturn this.queryInfo.getParams();\n\t}\n\n\tpublic int getPreviousPage() {\n\t\treturn this.queryInfo.getPreviousPage();\n\t}\n\n\tpublic String[] getProperties() {\n\t\treturn this.queryInfo.getProperties();\n\t}\n\n\tpublic List<T> getQueryResult() {\n\t\treturn this.queryResult;\n\t}\n\n\tpublic int getRecordCount() {\n\t\treturn this.queryInfo.getRecordCount();\n\t}\n\n\tpublic String getSql() {\n\t\treturn this.queryInfo.getSql();\n\t}\n\n\tpublic boolean isHasResult() {\n\t\treturn this.queryResult != null && this.queryResult.size() > 0;\n\t}\n\n\tpublic void setBeanName(String beanNameValue) {\n\t\tthis.queryInfo.setBeanName(beanNameValue);\n\t}\n\n\tpublic void setCurrentPageN",
    "package com.cnpc.framework.base.service.impl;\r\n\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.cnpc.framework.base.entity.Dict;\r\nimport com.cnpc.framework.base.pojo.TreeNode;\r\nimport com.cnpc.framework.base.service.DictService;\r\nimport com.cnpc.framework.constant.RedisConstant;\r\nimport com.cnpc.framework.utils.StrUtil;\r\nimport com.cnpc.framework.utils.TreeUtil;\r\n\r\n@Service(\"dictService\")\r\npublic class DictServiceImpl extends BaseServiceImpl implements DictService {\r\n\r\n    @Override\r\n    public List<TreeNode> getTreeData() {\r\n\r\n        // \u83b7\u53d6\u6570\u636e\r\n        String key = RedisConstant.DICT_PRE+\"tree\";\r\n        List<TreeNode> tnlist = null;\r\n        String tnStr = redisDao.get(key);\r\n        if(!StrUtil.isEmpty(key)) {\r\n            tnlist = JSON.parseArray(tnStr,TreeNode.class);\r\n        }\r\n        if (tnlist != null) {\r\n            return tnlist;\r\n        } else {\r\n            String hql = \"from Dict order by levelCode asc\";\r\n            List<Dict> dicts = this.find(hql);\r\n            Map<String, TreeNode> nodelist = new LinkedHashMap<String, TreeNode>();\r\n            for (Dict dict : dicts) {\r\n                TreeNode node = new TreeNode();\r\n                node.setText(dict.getName());\r\n                node.setId(dict.getId());\r\n                node.setParentId(dict.getParentId());\r\n                node.setLevelCode(dict.getLevelCode());\r\n                nodelist.put(node.getId(), node);\r\n            }\r\n            // \u6784\u9020\u6811\u5f62\u7ed3\u6784\r\n            tnlist = TreeUtil.getNodeList(nodelist);\r\n            redisDao.save(key, tnlist);\r\n            return tnlist;\r\n        }\r\n    }\r\n\r\n    public List<Dict> getDictsByCode(String code) {\r\n        String key = RedisConstant.DICT_PRE+ code;\r\n        List dicts = redisDao.get(key, List.class);\r\n        if (dicts == null) {\r\n            String hql = \"from Dict where code='\" + code + \"'\";\r\n            Dict dict = this.get(hql);\r\n            dicts = this.find(\"from Dict where parentId='\" + dict.getId() + \"' order by levelCode\");\r\n            redisDao.add(key, dicts);\r\n            return dicts;\r\n        } else {\r\n            return dicts;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<TreeNode> getTreeDataByCode(String code) {\r\n        // \u83b7\u53d6\u6570\u636e\r\n        String key = RedisConstant.DICT_PRE + code + \"s\";\r\n        List<TreeNode> tnlist = null;\r\n        String tnStr = redisDao.get(key);\r\n        if(!StrUtil.isEmpty(key)) {\r\n            tnlist = JSON.parseArray(tnStr,TreeNode.class);\r\n        }\r\n        if (tnlist != null) {\r\n            return tnlist;\r\n        } else {\r\n            String hql = \"from Dict where code='\" + code + \"' order by levelCode asc\";\r\n            List<Dict> dicts = this.find(hql);\r\n            hql = \"from Dict where code='\" + code + \"' or parent_id = '\" +dicts.get(0).getId()+ \"' order by levelCode asc\";\r\n            dicts = this.find(hql);\r\n            Map<String, TreeNode> n",
    "package com.kromracing.runningroute.client;\n\nimport com.google.gwt.dom.client.Element;\nimport com.google.gwt.user.client.DOM;\nimport com.google.gwt.user.client.ui.CheckBox;\nimport com.google.gwt.user.client.ui.Widget;\n\nfinal public class Utils {\n    private Utils() {\n        \n    }\n    \n    /**\n     * Sets the HTML id for a widget.\n     * @param widget The widget to have the id set, ex: TextBox\n     * @param id ID in HTML, ex: textbox-location\n     */\n    static void setId(final Widget widget, final String id) {   \n        if (widget instanceof CheckBox) {\n            final Element checkBoxElement = widget.getElement();\n            // The first element is the actual box to check.  That is the one we care about.\n            final Element inputElement = DOM.getChild(checkBoxElement, 0);\n            inputElement.setAttribute(\"id\", id);\n            //DOM.setElementAttribute(inputElement, \"id\", id);  deprecated!\n        }\n        else {\n        \twidget.getElement().setAttribute(\"id\", id);\n            //DOM.setElementAttribute(widget.getElement(), \"id\", id);  deprecated!\n        }\n    }\n}\n",
    "/**\n * This file was copied from https://github.com/jenkinsci/mercurial-plugin/raw/master/src/test/java/hudson/plugins/mercurial/MercurialRule.java\n * so we as well have a MercurialRule to create test repos with.\n * The file is licensed under the MIT License, which can by found at: http://www.opensource.org/licenses/mit-license.php\n * More information about this file and it's authors can be found at: https://github.com/jenkinsci/mercurial-plugin/\n */\n\npackage org.paylogic.jenkins.advancedscm;\n\nimport hudson.EnvVars;\nimport hudson.FilePath;\nimport hudson.Launcher;\nimport hudson.model.Action;\nimport hudson.model.FreeStyleBuild;\nimport hudson.model.FreeStyleProject;\nimport hudson.model.TaskListener;\nimport hudson.plugins.mercurial.HgExe;\nimport hudson.plugins.mercurial.MercurialTagAction;\nimport hudson.scm.PollingResult;\nimport hudson.util.ArgumentListBuilder;\nimport hudson.util.StreamTaskListener;\nimport org.junit.Assume;\nimport org.junit.internal.AssumptionViolatedException;\nimport org.junit.rules.ExternalResource;\nimport org.jvnet.hudson.test.JenkinsRule;\nimport org.paylogic.jenkins.ABuildCause;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport static java.util.Collections.sort;\nimport static org.junit.Assert.*;\n\npublic final class MercurialRule extends ExternalResource {\n\n    private TaskListener listener;\n\n    private final JenkinsRule j;\n\n    public MercurialRule(JenkinsRule j) {\n        this.j = j;\n    }\n\n    @Override protected void before() throws Exception {\n        listener = new StreamTaskListener(System.out, Charset.defaultCharset());\n        try {\n            if (new ProcessBuilder(\"hg\", \"--version\").start().waitFor() != 0) {\n                throw new AssumptionViolatedException(\"hg --version signaled an error\");\n            }\n        } catch(IOException ioe) {\n            String message = ioe.getMessage();\n            if(message.startsWith(\"Cannot run program \\\"hg\\\"\") && message.endsWith(\"No such file or directory\")) {\n                throw new AssumptionViolatedException(\"hg is not available; please check that your PATH environment variable is properly configured\");\n            }\n            Assume.assumeNoException(ioe); // failed to check availability of hg\n        }\n    }\n\n    private Launcher launcher() {\n        return j.jenkins.createLauncher(listener);\n    }\n\n    private HgExe hgExe() throws Exception {\n        return new HgExe(null, null, launcher(), j.jenkins, listener, new EnvVars());\n    }\n\n    public void hg(String... args) throws Exception {\n        HgExe hg = hgExe();\n        assertEquals(0, hg.launch(nobody(hg.seed(false)).add(args)).join());\n    }\n\n    public void hg(File repo, String... args) throws Exception {\n        HgExe hg = hgExe();\n        assertEquals(0, hg.launch(nobody(hg.seed(false)).add(args)).pwd(repo).join());\n    }\n\n    private static ArgumentListBuilder nobody(A",
    "package zhou.adapter;\n\nimport android.support.v7.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport java.util.List;\n\n/**\n * Created by zzhoujay on 2015/7/22 0022.\n */\npublic class NormalAdapter extends RecyclerView.Adapter<NormalAdapter.Holder> {\n\n    private List<String> msg;\n\n    public NormalAdapter(List<String> msg) {\n        this.msg = msg;\n    }\n\n    @Override\n    public Holder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_normal, null);\n        Holder holder = new Holder(view);\n        return holder;\n    }\n\n    @Override\n    public void onBindViewHolder(Holder holder, int position) {\n        String m = msg.get(position);\n        holder.icon.setImageResource(R.mipmap.ic_launcher);\n        holder.text.setText(m);\n    }\n\n    @Override\n    public int getItemCount() {\n        return msg == null ? 0 : msg.size();\n    }\n\n    public static class Holder extends RecyclerView.ViewHolder {\n\n        public TextView text;\n        public ImageView icon;\n\n        public Holder(View itemView) {\n            super(itemView);\n            text = (TextView) itemView.findViewById(R.id.item_text);\n            icon = (ImageView) itemView.findViewById(R.id.item_icon);\n        }\n    }\n}\n",
    "package UserInterface.Animation;\n\n/**\n * Makes shit get big, makes shit get small.\n */\npublic class SizeAnimation extends Animation {\n\n    protected int iW, iH, fW, fH, cW, cH;\n\n    public SizeAnimation(long period, int paceType, boolean loop, int iW, int iH, int fW, int fH) {\n        super(period, paceType, loop);\n\n        this.iW = iW;\n        this.iH = iH;\n        this.fW = fW;\n        this.fH = fH;\n        this.cW = iW;\n        this.cH = iH;\n    }\n\n    @Override\n    protected void updateAnimation(double p) {\n        cW = (int)Math.round((fW - iW)*p) + iW;\n        cH = (int)Math.round((fH - iH)*p) + iH;\n    }\n\n    public int getWidth() {\n        return cW;\n    }\n\n    public int getHeight() {\n        return cH;\n    }\n}\n",
    "package com.mauriciotogneri.apply.compiler.syntactic.nodes.arithmetic;\n\nimport com.mauriciotogneri.apply.compiler.lexical.Token;\nimport com.mauriciotogneri.apply.compiler.syntactic.TreeNode;\nimport com.mauriciotogneri.apply.compiler.syntactic.nodes.ExpressionBinaryNode;\n\npublic class ArithmeticModuleNode extends ExpressionBinaryNode\n{\n    public ArithmeticModuleNode(Token token, TreeNode left, TreeNode right)\n    {\n        super(token, left, right);\n    }\n\n    @Override\n    public String sourceCode()\n    {\n        return String.format(\"mod(%s, %s)\", left.sourceCode(), right.sourceCode());\n    }\n}",
    "package net.pinemz.hm.gui;\r\n\r\nimport net.pinemz.hm.R;\r\nimport net.pinemz.hm.api.HmApi;\r\nimport net.pinemz.hm.api.Prefecture;\r\nimport net.pinemz.hm.api.PrefectureCollection;\r\nimport net.pinemz.hm.storage.CommonSettings;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.google.common.base.Optional;\r\n\r\npublic class SettingsActivity\r\n\textends BasicActivity\r\n{\r\n\tpublic static final String TAG = \"SettingsActivity\";\r\n\t\r\n\tprivate RequestQueue requestQueue;\r\n\tprivate HmApi hmApi;\r\n\tprivate PrefectureCollection prefectures;\r\n\tprivate CommonSettings settings;\r\n\tprivate ListView listViewPrefectures;\r\n\t\r\n\t@Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\t\tLog.d(TAG, \"onCreate\");\r\n\t\t\r\n        super.onCreate(savedInstanceState);\r\n        \r\n        this.setContentView(R.layout.activity_settings);\r\n        \r\n        this.requestQueue = Volley.newRequestQueue(this.getApplicationContext());\r\n        this.hmApi = new HmApi(this.getApplicationContext(), this.requestQueue);\r\n        \r\n        this.listViewPrefectures = (ListView)this.findViewById(R.id.listViewPrefectures);\r\n        assert this.listViewPrefectures != null;\r\n        \r\n        // \u0090\u00dd\u0092\u00e8\u0083N\u0083\u0089\u0083X\u0082\u00f0\u008f\u0080\u0094\u00f5\r\n     \tthis.settings = new CommonSettings(this.getApplicationContext());\r\n    }\r\n\t\r\n\t@Override\r\n\tprotected void onResume() {\r\n\t\tLog.d(TAG, \"onResume\");\r\n\t\tsuper.onResume();\r\n\t\t\t\t\r\n\t\t// \u0093s\u0093\u00b9\u0095{\u008c\u00a7\u0082\u00f0\u0093\u00c7\u0082\u00dd\u008d\u009e\u0082\u00de\r\n\t\tthis.loadPrefectures();\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected void onPause() {\r\n\t\tLog.d(TAG, \"onPause\");\r\n\t\tsuper.onPause();\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected void onDestroy() {\r\n\t\tLog.d(TAG, \"onDestroy\");\r\n\t\tsuper.onDestroy();\r\n\t\t\r\n\t\tthis.requestQueue = null;\r\n\t\tthis.hmApi = null;\r\n\t\t\r\n\t\t// \u0090\u00dd\u0092\u00e8\u0083N\u0083\u0089\u0083X\u0082\u00f0\u0089\u00f0\u0095\u00fa\r\n\t\tthis.settings = null;\r\n\t}\r\n\t\r\n\t@Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        Log.d(TAG, \"onCreateOptionsMenu\");\r\n        \r\n        super.onCreateOptionsMenu(menu);\r\n        return true;\r\n\t}\r\n\t\r\n\t@Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n    \tLog.d(TAG, \"onOptionsItemSelected\");\r\n    \t\r\n    \treturn super.onOptionsItemSelected(item);\r\n\t}\r\n\t\r\n\tpublic void okButtonClicked(View view) {\r\n\t\tLog.d(TAG, \"okButtonClicked\");\r\n\t\tassert view instanceof Button;\r\n\t\t\r\n\t\t// \u008c\u00bb\u008d\u00dd\u0091I\u0091\u00f0\u0082\u00b3\u0082\u00ea\u0082\u00c4\u0082\u00a2\u0082\u00e9\u008d\u0080\u0096\u00da\u0082\u00f0\u008e\u00e6\u0093\u00be\r\n\t\tint checkedPosition = this.listViewPrefectures.getCheckedItemPosition();\r\n\t\tLog.v(TAG, \"onButtonClicked>getCheckedItemPosition = \" + checkedPosition);\r\n\t\tif (checkedPosition == ListView.INVALID_POSITION) { return; }\r\n\t\t\r\n\t\t// \u0091I\u0091\u00f0\u0082\u00b3\u0082\u00ea\u0082\u00c4\u0082\u00a2\u0082\u00e9\u0093s\u0093\u00b9\u0095{\u008c\u00a7\u0096\u00bc\u0082\u00f0\u008e\u00e6\u0093\u00be\r\n\t\tString checkedPrefectureName =\r\n\t\t\t\t(String)this.listViewPrefectures.getItemAtPosition(checkedPosition);\r\n\t\tassert checkedPrefectureName != null;\r\n\t\t\r\n\t\t// \u0093s\u0093\u00b9\u0095{\u008c\u00a7\u0082\u00cc\u0083f\u0081[\u0083^\u0082\u00f0\u008e\u00e6\u0093\u00be\r\n",
    "/*\n * This file is part of Zinc, licensed under the MIT License (MIT).\n *\n * Copyright (c) 2015-2016, Jamie Mansfield <https://github.com/jamierocks>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage uk.jamierocks.zinc.example;\n\nimport com.google.common.collect.Lists;\nimport org.spongepowered.api.command.CommandResult;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.command.args.CommandArgs;\nimport org.spongepowered.api.text.Text;\nimport uk.jamierocks.zinc.Command;\nimport uk.jamierocks.zinc.TabComplete;\n\nimport java.util.List;\n\npublic class ExampleCommands {\n\n    @Command(name = \"example\")\n    public CommandResult exampleCommand(CommandSource source, CommandArgs args) {\n        source.sendMessage(Text.of(\"This is the base command.\"));\n        return CommandResult.success();\n    }\n\n    @Command(parent = \"example\",\n            name = \"sub\")\n    public CommandResult exampleSubCommand(CommandSource source, CommandArgs args) {\n        source.sendMessage(Text.of(\"This is a sub command.\"));\n        return CommandResult.success();\n    }\n\n    @TabComplete(name = \"example\")\n    public List<String> tabComplete(CommandSource source, String args) {\n        return Lists.newArrayList();\n    }\n}\n",
    "// Template Source: BaseEntityCollectionPage.java.tt\n// ------------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.\n// ------------------------------------------------------------------------------\n\npackage com.microsoft.graph.requests;\nimport com.microsoft.graph.models.TermsAndConditionsAcceptanceStatus;\nimport com.microsoft.graph.requests.TermsAndConditionsAcceptanceStatusCollectionRequestBuilder;\nimport javax.annotation.Nullable;\nimport javax.annotation.Nonnull;\nimport com.microsoft.graph.requests.TermsAndConditionsAcceptanceStatusCollectionResponse;\nimport com.microsoft.graph.http.BaseCollectionPage;\n\n// **NOTE** This file was generated by a tool and any changes will be overwritten.\n\n/**\n * The class for the Terms And Conditions Acceptance Status Collection Page.\n */\npublic class TermsAndConditionsAcceptanceStatusCollectionPage extends BaseCollectionPage<TermsAndConditionsAcceptanceStatus, TermsAndConditionsAcceptanceStatusCollectionRequestBuilder> {\n\n    /**\n     * A collection page for TermsAndConditionsAcceptanceStatus\n     *\n     * @param response the serialized TermsAndConditionsAcceptanceStatusCollectionResponse from the service\n     * @param builder  the request builder for the next collection page\n     */\n    public TermsAndConditionsAcceptanceStatusCollectionPage(@Nonnull final TermsAndConditionsAcceptanceStatusCollectionResponse response, @Nonnull final TermsAndConditionsAcceptanceStatusCollectionRequestBuilder builder) {\n        super(response, builder);\n    }\n\n    /**\n     * Creates the collection page for TermsAndConditionsAcceptanceStatus\n     *\n     * @param pageContents       the contents of this page\n     * @param nextRequestBuilder the request builder for the next page\n     */\n    public TermsAndConditionsAcceptanceStatusCollectionPage(@Nonnull final java.util.List<TermsAndConditionsAcceptanceStatus> pageContents, @Nullable final TermsAndConditionsAcceptanceStatusCollectionRequestBuilder nextRequestBuilder) {\n        super(pageContents, nextRequestBuilder);\n    }\n}\n",
    "package io.github.ageofwar.telejam.updates;\n\nimport io.github.ageofwar.telejam.Bot;\nimport io.github.ageofwar.telejam.TelegramException;\nimport io.github.ageofwar.telejam.methods.GetUpdates;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.Objects;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.function.LongUnaryOperator;\n\n/**\n * Utility class that reads new updates received from a bot.\n *\n * @author Michi Palazzo\n */\npublic final class UpdateReader implements AutoCloseable {\n  \n  private final Bot bot;\n  private final ConcurrentLinkedQueue<Update> updates;\n  private final LongUnaryOperator backOff;\n  private long lastUpdateId;\n  \n  /**\n   * Constructs an UpdateReader.\n   *\n   * @param bot     the bot that receive updates\n   * @param backOff back off to be used when long polling fails\n   */\n  public UpdateReader(Bot bot, LongUnaryOperator backOff) {\n    this.bot = Objects.requireNonNull(bot);\n    this.backOff = Objects.requireNonNull(backOff);\n    updates = new ConcurrentLinkedQueue<>();\n    lastUpdateId = -1;\n  }\n  \n  /**\n   * Constructs an UpdateReader.\n   *\n   * @param bot the bot that receive updates\n   */\n  public UpdateReader(Bot bot) {\n    this(bot, a -> 500L);\n  }\n  \n  /**\n   * Returns the number of updates that can be read from this update reader without blocking by the\n   * next invocation read method for this update reader. The next invocation\n   * might be the same thread or another thread.\n   * If the available updates are more than {@code Integer.MAX_VALUE}, returns\n   * {@code Integer.MAX_VALUE}.\n   *\n   * @return the number of updates that can be read from this update reader\n   * without blocking by the next invocation read method\n   */\n  public int available() {\n    return updates.size();\n  }\n  \n  /**\n   * Tells whether this stream is ready to be read.\n   *\n   * @return <code>true</code> if the next read() is guaranteed not to block for input,\n   * <code>false</code> otherwise.  Note that returning false does not guarantee that the\n   * next read will block.\n   */\n  public boolean ready() {\n    return !updates.isEmpty();\n  }\n  \n  /**\n   * Reads one update from the stream.\n   *\n   * @return the read update\n   * @throws IOException          if an I/O Exception occurs\n   * @throws InterruptedException if any thread has interrupted the current\n   *                              thread while waiting for updates\n   */\n  public Update read() throws IOException, InterruptedException {\n    if (!ready()) {\n      for (long attempts = 0; getUpdates() == 0; attempts++) {\n        Thread.sleep(backOff.applyAsLong(attempts));\n      }\n    }\n    return updates.remove();\n  }\n  \n  /**\n   * Retrieves new updates received from the bot.\n   *\n   * @return number of updates received\n   * @throws IOException if an I/O Exception occurs\n   */\n  public int getUpdates() throws IOException {\n    try {\n      Update[] newUpdates = getUpdates(lastUpdateId + 1);\n      Collections.addAll(updates, newUpdates);\n      if ",
    "package remove_duplicates_from_sorted_list;\n\nimport common.ListNode;\n\npublic class RemoveDuplicatesfromSortedList {\n\n    public class Solution {\n        public ListNode deleteDuplicates(ListNode head) {\n            if (head != null) {\n                ListNode pre = head;\n                ListNode p = pre.next;\n                while (p != null) {\n                    if (p.val == pre.val) {\n                        pre.next = p.next;\n                    } else {\n                        pre = p;\n                    }\n                    p = p.next;\n                }\n            }\n            return head;\n        }\n    }\n\n    public static class UnitTest {\n\n    }\n}\n",
    "package illume.analysis;\n\nimport java.awt.image.BufferedImage;\n\n/* This simple analyser example averages pixel values. */\npublic class SimpleImageAnalyser<T extends BufferedImage> extends AbstractImageAnalyser<T> {\n\n    @Override\n    public double analyse(T input) {\n        int sum_r = 0;\n        int sum_g = 0;\n        int sum_b = 0;\n        for (int y = 0; y < input.getHeight(); y++) {\n            for (int x = 0; x < input.getWidth(); x++) {\n                final int clr = input.getRGB(x, y);\n                sum_r += (clr & 0x00ff0000) >> 16;\n                sum_g += (clr & 0x0000ff00) >> 8;\n                sum_b += clr & 0x000000ff;\n            }\n        }\n        double sum_rgb = ((sum_r + sum_b + sum_g) / 3.0d);\n        double avg = sum_rgb / (input.getHeight() * input.getWidth());\n        // 8-bit RGB\n        return avg / 255;\n    }\n}\n",
    "package com.covoex.qarvox;\n\nimport com.covoex.qarvox.Application.BasicFunction;\n\n/**\n * @author Myeongjun Kim\n */\n\npublic class Main {\n\n    public static void main(String[] args) {\n        BasicFunction.programStart();\n    }\n}\n",
    "/***\n * ASM: a very small and fast Java bytecode manipulation framework\n * Copyright (c) 2000-2011 INRIA, France Telecom\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage mockit.external.asm4;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n/**\n * A Java field or method type. This class can be used to make it easier to\n * manipulate type and method descriptors.\n *\n * @author Eric Bruneton\n * @author Chris Nokleberg\n */\npublic class Type {\n\n    /**\n     * The sort of the <tt>void</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int VOID = 0;\n\n    /**\n     * The sort of the <tt>boolean</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int BOOLEAN = 1;\n\n    /**\n     * The sort of the <tt>char</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int CHAR = 2;\n\n    /**\n     * The sort of the <tt>byte</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int BYTE = 3;\n\n    /**\n     * The sort of the <tt>short</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int SHORT = 4;\n\n    /**\n     * The sort of the <tt>int</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int INT = 5;\n\n    /**\n     * The sort of the <tt>float</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int FLOAT = 6;\n\n    /**\n     * The sort of the <tt>long</tt> type. See {@link #getSort getSort}.\n     */\n    public static final int LONG = 7;\n\n  ",
    "/**\n * <copyright>\n * </copyright>\n *\n * $Id$\n */\npackage org.eclipse.bpel4chor.model.pbd;\n\n\n/**\n * <!-- begin-user-doc -->\n * A representation of the model object '<em><b>Query</b></em>'.\n * <!-- end-user-doc -->\n *\n * <p>\n * The following features are supported:\n * <ul>\n *   <li>{@link org.eclipse.bpel4chor.model.pbd.Query#getQueryLanguage <em>Query Language</em>}</li>\n *   <li>{@link org.eclipse.bpel4chor.model.pbd.Query#getOpaque <em>Opaque</em>}</li>\n *   <li>{@link org.eclipse.bpel4chor.model.pbd.Query#getValue <em>Value</em>}</li>\n * </ul>\n * </p>\n *\n * @see org.eclipse.bpel4chor.model.pbd.PbdPackage#getQuery()\n * @model\n * @generated\n */\npublic interface Query extends ExtensibleElements {\n\t/**\n\t * Returns the value of the '<em><b>Query Language</b></em>' attribute.\n\t * <!-- begin-user-doc -->\n\t * <p>\n\t * If the meaning of the '<em>Query Language</em>' attribute isn't clear,\n\t * there really should be more of a description here...\n\t * </p>\n\t * <!-- end-user-doc -->\n\t * @return the value of the '<em>Query Language</em>' attribute.\n\t * @see #setQueryLanguage(String)\n\t * @see org.eclipse.bpel4chor.model.pbd.PbdPackage#getQuery_QueryLanguage()\n\t * @model\n\t * @generated\n\t */\n\tString getQueryLanguage();\n\n\t/**\n\t * Sets the value of the '{@link org.eclipse.bpel4chor.model.pbd.Query#getQueryLanguage <em>Query Language</em>}' attribute.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param value the new value of the '<em>Query Language</em>' attribute.\n\t * @see #getQueryLanguage()\n\t * @generated\n\t */\n\tvoid setQueryLanguage(String value);\n\n\t/**\n\t * Returns the value of the '<em><b>Opaque</b></em>' attribute.\n\t * The literals are from the enumeration {@link org.eclipse.bpel4chor.model.pbd.OpaqueBoolean}.\n\t * <!-- begin-user-doc -->\n\t * <p>\n\t * If the meaning of the '<em>Opaque</em>' attribute isn't clear,\n\t * there really should be more of a description here...\n\t * </p>\n\t * <!-- end-user-doc -->\n\t * @return the value of the '<em>Opaque</em>' attribute.\n\t * @see org.eclipse.bpel4chor.model.pbd.OpaqueBoolean\n\t * @see #setOpaque(OpaqueBoolean)\n\t * @see org.eclipse.bpel4chor.model.pbd.PbdPackage#getQuery_Opaque()\n\t * @model\n\t * @generated\n\t */\n\tOpaqueBoolean getOpaque();\n\n\t/**\n\t * Sets the value of the '{@link org.eclipse.bpel4chor.model.pbd.Query#getOpaque <em>Opaque</em>}' attribute.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param value the new value of the '<em>Opaque</em>' attribute.\n\t * @see org.eclipse.bpel4chor.model.pbd.OpaqueBoolean\n\t * @see #getOpaque()\n\t * @generated\n\t */\n\tvoid setOpaque(OpaqueBoolean value);\n\n\t/**\n\t * Returns the value of the '<em><b>Value</b></em>' attribute.\n\t * <!-- begin-user-doc -->\n\t * <p>\n\t * If the meaning of the '<em>Value</em>' attribute isn't clear,\n\t * there really should be more of a description here...\n\t * </p>\n\t * <!-- end-user-doc -->\n\t * @return the value of the '<em>Value</em>' attribute.\n\t * @see #setValue(String)\n\t * @see org.eclipse.bpel4chor.model.pbd.PbdPackage#getQuery_Value(",
    "import java.awt.Dimension;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JTextPane;\nimport java.awt.SystemColor;\n\n/**\n * The GUIError object is used to show an error message if the Path of Exile API is not responding.\n * \n * @author Joschn\n */\npublic class GUIError{\n\tprivate JFrame windowError;\n\tprivate JButton buttonRetry;\n\tprivate volatile boolean buttonPressed = false;\n\tprivate ButtonRetryListener buttonRetryListener = new ButtonRetryListener();\n\tprivate String errorMessage = \"Error! Path of Exile's API is not responding! Servers are probably down! Check www.pathofexile.com\";\n\tprivate String version = \"2.7\";\n\t\n\t/**\n\t * Constructor for the GUIError object.\n\t */\n\tpublic GUIError(){\n\t\tinitialize();\n\t}\n\t/**\n\t * Initializes the GUI.\n\t */\n\tprivate void initialize(){\n\t\tDimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n\t\t\n\t\t// error window\n\t\twindowError = new JFrame();\t\n\t\twindowError.setBounds(100, 100, 300, 145);\n\t\twindowError.setLocation(dim.width/2-windowError.getSize().width/2, dim.height/2-windowError.getSize().height/2);\n\t\twindowError.setResizable(false);\n\t\twindowError.setTitle(\"Ladder Tracker v\" + version);\n\t\twindowError.setIconImage(new ImageIcon(getClass().getResource(\"icon.png\")).getImage());\n\t\twindowError.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\twindowError.getContentPane().setLayout(null);\n\t\t\n\t\t// button retry\n\t\tbuttonRetry = new JButton(\"Retry\");\n\t\tbuttonRetry.setBounds(10, 80, 274, 23);\n\t\tbuttonRetry.addActionListener(buttonRetryListener);\n\t\twindowError.getContentPane().add(buttonRetry);\n\t\t\n\t\t// error text \n\t\tJTextPane textError = new JTextPane();\n\t\ttextError.setText(errorMessage);\n\t\ttextError.setEditable(false);\n\t\ttextError.setBackground(SystemColor.menu);\n\t\ttextError.setBounds(10, 21, 274, 39);\n\t\twindowError.getContentPane().add(textError);\n\t}\n\t/**\n\t * Shows the error GUI and waits for the retry button to be pressed.\n\t */\n\tpublic void show(){\n\t\twindowError.setVisible(true);\n\t\twhile(!buttonPressed){}\n\t\twindowError.dispose();\n\t}\n\t/**\n\t * The definition of the action listener for the retry button.\n\t * \n\t * @author Joschn\n\t */\n\tprivate class ButtonRetryListener implements ActionListener{\n\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\tbuttonPressed = true;\n\t\t}\n\t}\n}",
    "package com.lamost.update;\n\nimport java.io.IOException;\n\nimport org.ksoap2.SoapEnvelope;\nimport org.ksoap2.serialization.SoapObject;\nimport org.ksoap2.serialization.SoapSerializationEnvelope;\nimport org.ksoap2.transport.HttpTransportSE;\nimport org.xmlpull.v1.XmlPullParserException;\n\nimport android.util.Log;\n\n/**\n * Created by Jia on 2016/4/6.\n */\npublic class UpdateWebService {\n\tprivate static final String TAG = \"WebService\";\n\t// \u547d\u540d\u7a7a\u95f4\n\tprivate final static String SERVICE_NS = \"http://ws.smarthome.zfznjj.com/\";\n\t// \u963f\u91cc\u4e91\n\tprivate final static String SERVICE_URL = \"http://101.201.211.87:8080/zfzn02/services/smarthome?wsdl=SmarthomeWs.wsdl\";\n\t// SOAP Action\n\tprivate static String soapAction = \"\";\n\t// \u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\n\tprivate static String methodName = \"\";\n\tprivate HttpTransportSE ht;\n\tprivate SoapSerializationEnvelope envelope;\n\tprivate SoapObject soapObject;\n\tprivate SoapObject result;\n\n\tpublic UpdateWebService() {\n\t\tht = new HttpTransportSE(SERVICE_URL); // \u2460\n\t\tht.debug = true;\n\t}\n\n\tpublic String getAppVersionVoice(String appName) {\n\t\tht = new HttpTransportSE(SERVICE_URL);\n\t\tht.debug = true;\n\n\t\tmethodName = \"getAppVersionVoice\";\n\t\tsoapAction = SERVICE_NS + methodName;// \u901a\u5e38\u4e3a\u547d\u540d\u7a7a\u95f4 + \u8c03\u7528\u7684\u65b9\u6cd5\u540d\u79f0\n\n\t\t// \u4f7f\u7528SOAP1.1\u534f\u8bae\u521b\u5efaEnvelop\u5bf9\u8c61\n\t\tenvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11); // \u2461\n\t\t// \u5b9e\u4f8b\u5316SoapObject\u5bf9\u8c61\n\t\tsoapObject = new SoapObject(SERVICE_NS, methodName); // \u2462\n\t\t// \u5c06soapObject\u5bf9\u8c61\u8bbe\u7f6e\u4e3a SoapSerializationEnvelope\u5bf9\u8c61\u7684\u4f20\u51faSOAP\u6d88\u606f\n\t\tenvelope.bodyOut = soapObject; // \u2464\n\t\tenvelope.dotNet = true;\n\t\tenvelope.setOutputSoapObject(soapObject);\n\t\tsoapObject.addProperty(\"appName\", appName);\n\n\t\ttry {\n\t\t\t// System.out.println(\"\u6d4b\u8bd51\");\n\t\t\tht.call(soapAction, envelope);\n\t\t\t// System.out.println(\"\u6d4b\u8bd52\");\n\t\t\t// \u6839\u636e\u6d4b\u8bd5\u53d1\u73b0\uff0c\u8fd0\u884c\u8fd9\u884c\u4ee3\u7801\u65f6\u6709\u65f6\u4f1a\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u4f7f\u7528\u52a0\u4e86\u4e00\u53e5\u8fdb\u884c\u5904\u7406\n\t\t\tif (envelope != null && envelope.getResponse() != null) {\n\t\t\t\t// \u83b7\u53d6\u670d\u52a1\u5668\u54cd\u5e94\u8fd4\u56de\u7684SOAP\u6d88\u606f\n\t\t\t\t// System.out.println(\"\u6d4b\u8bd53\");\n\t\t\t\tresult = (SoapObject) envelope.bodyIn; // \u2466\n\t\t\t\t// \u63a5\u4e0b\u6765\u5c31\u662f\u4eceSoapObject\u5bf9\u8c61\u4e2d\u89e3\u6790\u54cd\u5e94\u6570\u636e\u7684\u8fc7\u7a0b\u4e86\n\t\t\t\t// System.out.println(\"\u6d4b\u8bd54\");\n\t\t\t\tString flag = result.getProperty(0).toString();\n\t\t\t\tLog.e(TAG, \"*********Webservice masterReadElecticOrder \u670d\u52a1\u5668\u8fd4\u56de\u503c\uff1a\"\n\t\t\t\t\t\t+ flag);\n\t\t\t\treturn flag;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (XmlPullParserException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tresetParam();\n\t\t}\n\t\treturn -1 + \"\";\n\t}\n\n\tprivate void resetParam() {\n\t\tenvelope = null;\n\t\tsoapObject = null;\n\t\tresult = null;\n\t}\n\n}\n",
    "package cn.winxo.gank.module.view;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.widget.SwipeRefreshLayout;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport cn.winxo.gank.R;\nimport cn.winxo.gank.adapter.DetailTitleBinder;\nimport cn.winxo.gank.adapter.DetailViewBinder;\nimport cn.winxo.gank.base.BaseMvpActivity;\nimport cn.winxo.gank.data.Injection;\nimport cn.winxo.gank.data.entity.constants.Constant;\nimport cn.winxo.gank.data.entity.remote.GankData;\nimport cn.winxo.gank.module.contract.DetailContract;\nimport cn.winxo.gank.module.presenter.DetailPresenter;\nimport cn.winxo.gank.util.Toasts;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport me.drakeet.multitype.Items;\nimport me.drakeet.multitype.MultiTypeAdapter;\n\npublic class DetailActivity extends BaseMvpActivity<DetailContract.Presenter> implements DetailContract.View {\n\n  protected Toolbar mToolbar;\n  protected RecyclerView mRecycler;\n  protected SwipeRefreshLayout mSwipeLayout;\n  private long mDate;\n  private MultiTypeAdapter mTypeAdapter;\n\n  @Override protected int setLayoutResourceID() {\n    return R.layout.activity_detail;\n  }\n\n  @Override protected void init(Bundle savedInstanceState) {\n    super.init(savedInstanceState);\n    mDate = getIntent().getLongExtra(Constant.ExtraKey.DATE, -1);\n  }\n\n  @Override protected void initView() {\n    mToolbar = findViewById(R.id.toolbar);\n    mRecycler = findViewById(R.id.recycler);\n    mSwipeLayout = findViewById(R.id.swipe_layout);\n\n    mToolbar.setNavigationOnClickListener(view -> finish());\n    mToolbar.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp);\n\n    mRecycler.setLayoutManager(new LinearLayoutManager(this));\n    mTypeAdapter = new MultiTypeAdapter();\n    mTypeAdapter.register(String.class, new DetailTitleBinder());\n    DetailViewBinder detailViewBinder = new DetailViewBinder();\n    detailViewBinder.setOnItemTouchListener((v, gankData) -> {\n      Intent intent = new Intent();\n      intent.setClass(DetailActivity.this, WebActivity.class);\n      intent.putExtra(\"url\", gankData.getUrl());\n      intent.putExtra(\"name\", gankData.getDesc());\n      startActivity(intent);\n    });\n    mTypeAdapter.register(GankData.class, detailViewBinder);\n    mRecycler.setAdapter(mTypeAdapter);\n    mSwipeLayout.setOnRefreshListener(() -> mPresenter.refreshDayGank(mDate));\n  }\n\n  @Override protected void initData() {\n    if (mDate != -1) {\n      String dateShow = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.CHINA).format(mDate);\n      mToolbar.setTitle(dateShow);\n      mSwipeLayout.setRefreshing(true);\n      mPresenter.loadDayGank(mDate);\n    } else {\n      finish();\n    }\n  }\n\n  @Override protected DetailPresenter onLoadPresenter() {\n    return new DetailPresenter(this, Injection.provideGankDataSource(this));\n  }\n\n  @Override public void showLoading() {\n    mSwipeLayout.setRefreshing(true);\n",
    "\npackage br.com.swconsultoria.nfe.schema.retEnvEpec;\n\nimport javax.xml.bind.annotation.*;\nimport javax.xml.bind.annotation.adapters.CollapsedStringAdapter;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\n\n/**\n * Tipo Evento\n *\n * <p>Classe Java de TEvento complex type.\n *\n * <p>O seguinte fragmento do esquema especifica o contedo esperado contido dentro desta classe.\n *\n * <pre>\n * &lt;complexType name=\"TEvento\">\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;sequence>\n *         &lt;element name=\"infEvento\">\n *           &lt;complexType>\n *             &lt;complexContent>\n *               &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *                 &lt;sequence>\n *                   &lt;element name=\"cOrgao\" type=\"{http://www.portalfiscal.inf.br/nfe}TCOrgaoIBGE\"/>\n *                   &lt;element name=\"tpAmb\" type=\"{http://www.portalfiscal.inf.br/nfe}TAmb\"/>\n *                   &lt;choice>\n *                     &lt;element name=\"CNPJ\" type=\"{http://www.portalfiscal.inf.br/nfe}TCnpjOpc\"/>\n *                     &lt;element name=\"CPF\" type=\"{http://www.portalfiscal.inf.br/nfe}TCpf\"/>\n *                   &lt;/choice>\n *                   &lt;element name=\"chNFe\" type=\"{http://www.portalfiscal.inf.br/nfe}TChNFe\"/>\n *                   &lt;element name=\"dhEvento\" type=\"{http://www.portalfiscal.inf.br/nfe}TDateTimeUTC\"/>\n *                   &lt;element name=\"tpEvento\">\n *                     &lt;simpleType>\n *                       &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}string\">\n *                         &lt;whiteSpace value=\"preserve\"/>\n *                         &lt;pattern value=\"[0-9]{6}\"/>\n *                         &lt;enumeration value=\"110140\"/>\n *                       &lt;/restriction>\n *                     &lt;/simpleType>\n *                   &lt;/element>\n *                   &lt;element name=\"nSeqEvento\">\n *                     &lt;simpleType>\n *                       &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}string\">\n *                         &lt;whiteSpace value=\"preserve\"/>\n *                         &lt;pattern value=\"[1-9]|[1][0-9]{0,1}|20\"/>\n *                       &lt;/restriction>\n *                     &lt;/simpleType>\n *                   &lt;/element>\n *                   &lt;element name=\"verEvento\">\n *                     &lt;simpleType>\n *                       &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}string\">\n *                         &lt;whiteSpace value=\"preserve\"/>\n *                         &lt;enumeration value=\"1.00\"/>\n *                       &lt;/restriction>\n *                     &lt;/simpleType>\n *                   &lt;/element>\n *                   &lt;element name=\"detEvento\">\n *                     &lt;complexType>\n *                       &lt;complexContent>\n *                         &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *",
    "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\npackage com.azure.ai.formrecognizer.administration;\n\nimport com.azure.ai.formrecognizer.administration.models.AccountProperties;\nimport com.azure.ai.formrecognizer.administration.models.BuildModelOptions;\nimport com.azure.ai.formrecognizer.administration.models.CopyAuthorization;\nimport com.azure.ai.formrecognizer.administration.models.CopyAuthorizationOptions;\nimport com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions;\nimport com.azure.ai.formrecognizer.administration.models.DocumentBuildMode;\nimport com.azure.ai.formrecognizer.administration.models.DocumentModel;\nimport com.azure.ai.formrecognizer.administration.models.ModelOperation;\nimport com.azure.ai.formrecognizer.administration.models.ModelOperationStatus;\nimport com.azure.core.credential.AzureKeyCredential;\nimport com.azure.core.http.HttpPipeline;\nimport com.azure.core.http.HttpPipelineBuilder;\nimport com.azure.core.util.polling.AsyncPollResponse;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Code snippet for {@link DocumentModelAdministrationAsyncClient}\n */\npublic class DocumentModelAdminAsyncClientJavaDocCodeSnippets {\n    private final DocumentModelAdministrationAsyncClient documentModelAdministrationAsyncClient =\n        new DocumentModelAdministrationClientBuilder().buildAsyncClient();\n\n    /**\n     * Code snippet for {@link DocumentModelAdministrationAsyncClient} initialization\n     */\n    public void formTrainingAsyncClientInInitialization() {\n        // BEGIN: com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.initialization\n        DocumentModelAdministrationAsyncClient documentModelAdministrationAsyncClient =\n            new DocumentModelAdministrationClientBuilder().buildAsyncClient();\n        // END: com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.initialization\n    }\n\n    /**\n     * Code snippet for creating a {@link DocumentModelAdministrationAsyncClient} with pipeline\n     */\n    public void createDocumentTrainingAsyncClientWithPipeline() {\n        // BEGIN: com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.pipeline.instantiation\n        HttpPipeline pipeline = new HttpPipelineBuilder()\n            .policies(/* add policies */)\n            .build();\n\n        DocumentModelAdministrationAsyncClient documentModelAdministrationAsyncClient =\n            new DocumentModelAdministrationClientBuilder()\n                .credential(new AzureKeyCredential(\"{key}\"))\n                .endpoint(\"{endpoint}\")\n                .pipeline(pipeline)\n                .buildAsyncClient();\n        // END:  com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.pipeline.instantiation\n    }\n\n    /**\n     * Code snippet for {@link DocumentModelAdministrationAsyncClient#beginBuildModel(String, Documen",
    "// This file is automatically generated.\n\npackage adila.db;\n\n/*\n * Asus ZenFone 2 Laser (ZE600KL)\n *\n * DEVICE: ASUS_Z00M\n * MODEL: ASUS_Z00MD\n */\nfinal class asus5fz00m_asus5fz00md {\n    public static final String DATA = \"Asus|ZenFone 2 Laser (ZE600KL)|\";\n}\n",
    "/**\n * University of Campinas - Brazil\n * Institute of Computing\n * SED group\n *\n * date: February 2009\n * \n */\npackage br.unicamp.ic.sed.mobilemedia.copyphoto.impl;\n\nimport javax.microedition.lcdui.Command;\nimport javax.microedition.lcdui.Display;\nimport javax.microedition.lcdui.Displayable;\nimport javax.microedition.midlet.MIDlet;\n\nimport br.unicamp.ic.sed.mobilemedia.copyphoto.spec.prov.IManager;\nimport br.unicamp.ic.sed.mobilemedia.copyphoto.spec.req.IFilesystem;\nimport br.unicamp.ic.sed.mobilemedia.main.spec.dt.IImageData;\nimport br.unicamp.ic.sed.mobilemedia.photo.spec.prov.IPhoto;\n\n\n\n/**\n * TODO This whole class must be aspectized\n */\n\nclass PhotoViewController extends AbstractController {\n\n\tprivate AddPhotoToAlbum addPhotoToAlbum;\n\tprivate static final Command backCommand = new Command(\"Back\", Command.BACK, 0);\n\tprivate Displayable lastScreen = null;\n\t\n\tprivate void setAddPhotoToAlbum(AddPhotoToAlbum addPhotoToAlbum) {\n\t\tthis.addPhotoToAlbum = addPhotoToAlbum;\n\t}\n\n\tString imageName = \"\";\n\n\t\n\tpublic PhotoViewController(MIDlet midlet,  String imageName) {\n\t\tsuper( midlet );\n\t\tthis.imageName = imageName;\n\n\t}\n\n\tprivate AddPhotoToAlbum getAddPhotoToAlbum() {\n\t\tif( this.addPhotoToAlbum == null)\n\t\t\tthis.addPhotoToAlbum = new AddPhotoToAlbum(\"Copy Photo to Album\");\n\t\treturn addPhotoToAlbum;\n\t}\n\n\n\t/* (non-Javadoc)\n\t * @see ubc.midp.mobilephoto.core.ui.controller.ControllerInterface#handleCommand(javax.microedition.lcdui.Command, javax.microedition.lcdui.Displayable)\n\t */\n\tpublic boolean handleCommand(Command c)  {\n\t\tString label = c.getLabel();\n\t\tSystem.out.println( \"<*\"+this.getClass().getName()+\".handleCommand() *> \" + label);\n\t\t\n\t\t/** Case: Copy photo to a different album */\n\t\tif (label.equals(\"Copy\")) {\n\t\t\tthis.initCopyPhotoToAlbum( );\n\t\t\treturn true;\n\t\t}\n\n\t\t/** Case: Save a copy in a new album */\n\t\telse if (label.equals(\"Save Photo\")) {\n\t\t\treturn this.savePhoto();\n\t\t/*\tIManager manager = ComponentFactory.createInstance();\n\t\t\tIPhoto photo = (IPhoto) manager.getRequiredInterface(\"IPhoto\");\n\t\t\treturn photo.postCommand( listImagesCommand ); */\n\t\t\t\n\t\t}else if( label.equals(\"Cancel\")){\n\t\t\tif( lastScreen != null ){\n\t\t\t\tMIDlet midlet = this.getMidlet();\n\t\t\t\tDisplay.getDisplay( midlet ).setCurrent( lastScreen );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\n\tprivate void initCopyPhotoToAlbum() {\n\t\t\n\t\tString title = new String(\"Copy Photo to Album\");\n\t\tString labelPhotoPath = new String(\"Copy to Album:\");\n\t\t\n\t\tAddPhotoToAlbum addPhotoToAlbum = new AddPhotoToAlbum( title );\n\t\taddPhotoToAlbum.setPhotoName( imageName );\n\t\taddPhotoToAlbum.setLabelPhotoPath( labelPhotoPath );\n\t\t\n\t\tthis.setAddPhotoToAlbum( addPhotoToAlbum );\n\t\t\n\t\t//Get all required interfaces for this method\n\t\tMIDlet midlet = this.getMidlet();\n\t\t\n\t\t//addPhotoToAlbum.setCommandListener( this );\n\t\tlastScreen = Display.getDisplay( midlet ).getCurrent();\n\t\tDisplay.getDisplay( midlet ).setCurrent( addPhotoToAlbum );\n\t\t\t\t\n\t\taddPhotoToAlbum.setCommandListener(this);\n\t\n\t}\n\t\n\tprivate boolean saveP",
    "\nimport java.util.Scanner;\n\npublic class BinarySearch {\n\n\tpublic static int binarySearch(int arr[], int num, int startIndex,\n\t\t\tint endIndex) {\n\t\tif (startIndex > endIndex) {\n\t\t\treturn -1;\n\t\t}\n\t\tint mid = startIndex + (endIndex - startIndex) / 2;\n\t\tif (num == arr[mid]) {\n\t\t\treturn mid;\n\t\t} else if (num > arr[mid]) {\n\t\t\treturn binarySearch(arr, num, mid + 1, endIndex);\n\t\t} else {\n\t\t\treturn binarySearch(arr, num, startIndex, mid - 1);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint size = s.nextInt();\n\t\tint[] arr = new int[size];\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tarr[i] = s.nextInt();\n\t\t}\n\t\tint num = s.nextInt();\n\t\tint position = binarySearch(arr, num, 0, size - 1);\n\t\tif (position == -1) {\n\t\t\tSystem.out.println(\"The number is not present in the array\");\n\t\t} else {\n\t\t\tSystem.out.println(\"The position of number in array is : \"\n\t\t\t\t\t+ position);\n\t\t}\n\t\ts.close();\n\t}\n\n}\n",
    "\n\npackage com.docuware.dev.schema._public.services.platform;\n\nimport javax.xml.bind.annotation.XmlEnum;\nimport javax.xml.bind.annotation.XmlEnumValue;\nimport javax.xml.bind.annotation.XmlType;\n\n\n@XmlType(name = \"SortDirection\")\n@XmlEnum\npublic enum SortDirection {\n\n\n    @XmlEnumValue(\"Default\")\n    DEFAULT(\"Default\"),\n\n    @XmlEnumValue(\"Asc\")\n    ASC(\"Asc\"),\n\n    @XmlEnumValue(\"Desc\")\n    DESC(\"Desc\");\n    private final String value;\n\n    SortDirection(String v) {\n        value = v;\n    }\n\n    public String value() {\n        return value;\n    }\n\n    public static SortDirection fromValue(String v) {\n        for (SortDirection c: SortDirection.values()) {\n            if (c.value.equals(v)) {\n                return c;\n            }\n        }\n        throw new IllegalArgumentException(v);\n    }\n\n\n\n}\n",
    "/**\n * The MIT License\n *\n * Copyright (C) 2015 Asterios Raptis\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *  *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *  *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\npackage de.alpharogroup.user.repositories;\n\nimport org.springframework.stereotype.Repository;\n\nimport de.alpharogroup.db.dao.jpa.JpaEntityManagerDao;\nimport de.alpharogroup.user.entities.RelationPermissions;\n\n@Repository(\"relationPermissionsDao\")\npublic class RelationPermissionsDao extends JpaEntityManagerDao<RelationPermissions, Integer>\n{\n\t/**\n\t * The serialVersionUID.\n\t */\n\tprivate static final long serialVersionUID = 1L;\n}",
    "/* \n * PokeDat - A Pokemon Data API.\n * Copyright (C) 2015\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage io.github.kaioru.species;\n\nimport java.io.Serializable;\n\n/**\n * @todo Class Description\n * \n * @author Kaioru\n **/\npublic class SpeciesLearnset implements Serializable {\n\n\tprivate static final long serialVersionUID = 5370581555765470935L;\n\n}\n",
    "package billing;\n\nimport cuke4duke.Then;\nimport cuke4duke.Given;\nimport static org.junit.Assert.assertTrue;\n\npublic class CalledSteps {\n    private boolean magic;\n\n    @Given(\"^it is (.*)$\")\n    public void itIs(String what) {\n        if(what.equals(\"magic\")) {\n            magic = true;\n        }\n    }\n\n    @Then(\"^magic should happen$\")\n    public void magicShouldHappen() {\n        assertTrue(magic);\n    }\n}\n",
    "/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 Vincent Vergnolle\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage org.vas.notification;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vas.domain.repository.Address;\nimport org.vas.domain.repository.User;\nimport org.vas.notification.domain.repository.NotificationService;\n\n/**\n * Notification worker for limited users\n *\n */\npublic class NotificationWorker implements Runnable {\n\n  protected final Logger logger = LoggerFactory.getLogger(getClass());\n\n  protected final List<User> users;\n  protected final Notifier notifier;\n  protected final NotificationService notificationService;\n\n  public NotificationWorker(List<User> users, NotificationService notificationService, Notifier notifier) {\n    super();\n    this.users = users;\n    this.notifier = notifier;\n    this.notificationService = notificationService;\n  }\n\n  @Override\n  public void run() {\n    if(logger.isTraceEnabled()) {\n      logger.trace(\"Start worker with {} users\", users);\n    }\n\n    users.forEach(this::notifyUser);\n  }\n\n  protected void notifyUser(User user) {\n    user.addresses.forEach((address) -> notifyAddress(user, address));\n  }\n\n  protected void notifyAddress(User user, Address address) {\n    if(logger.isTraceEnabled()) {\n      logger.trace(\"Notify address {} - {}\", user.username, address.label);\n    }\n\n    notificationService.listByAddress(address).forEach(notif -> doNotify(user, address, notif));\n  }\n\n  protected void doNotify(User user, Address address, Notification notification) {\n    if(notification.isTime(LocalDateTime.now())) {\n      dispatch(user, address, notification);\n    }\n  }\n\n  protected void dispatch(User user, Address address, Notification notification) {\n    if(logger.isTraceEnabled()) {\n      logger.trace(\"Dispatch notification n-{}\", notification.id);\n    }\n\n    notifier.dispatch(user, address, notification);\n  }\n}\n",
    "package shuaicj.hello.configuration.case04;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * Spring boot application.\n *\n * @author shuaicj 2019/10/12\n */\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n",
    "package com.reactnativeexample;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.shell.MainReactPackage;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainActivity extends ReactActivity {\n\n    /**\n     * Returns the name of the main component registered from JavaScript.\n     * This is used to schedule rendering of the component.\n     */\n    @Override\n    protected String getMainComponentName() {\n        return \"ReactNativeExample\";\n    }\n\n    /**\n     * Returns whether dev mode should be enabled.\n     * This enables e.g. the dev menu.\n     */\n    @Override\n    protected boolean getUseDeveloperSupport() {\n        return BuildConfig.DEBUG;\n    }\n\n    /**\n     * A list of packages used by the app. If the app uses additional views\n     * or modules besides the default ones, add more packages here.\n     */\n    @Override\n    protected List<ReactPackage> getPackages() {\n        return Arrays.<ReactPackage>asList(\n            new MainReactPackage()\n        );\n    }\n}\n",
    "package net.inpercima.runandfun.service;\n\nimport static net.inpercima.runandfun.runkeeper.constants.RunkeeperConstants.ACTIVITIES_MEDIA;\nimport static net.inpercima.runandfun.runkeeper.constants.RunkeeperConstants.ACTIVITIES_URL_PAGE_SIZE_ONE;\nimport static net.inpercima.runandfun.runkeeper.constants.RunkeeperConstants.ACTIVITIES_URL_SPECIFIED_PAGE_SIZE_NO_EARLIER_THAN;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport com.google.common.base.Splitter;\nimport com.google.common.base.Strings;\n\nimport org.elasticsearch.index.query.BoolQueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.index.query.RangeQueryBuilder;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;\nimport org.springframework.data.elasticsearch.core.SearchHits;\nimport org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;\nimport org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;\nimport org.springframework.stereotype.Service;\n\nimport lombok.NoArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport net.inpercima.restapi.service.RestApiService;\nimport net.inpercima.runandfun.app.model.AppActivity;\nimport net.inpercima.runandfun.runkeeper.model.RunkeeperActivities;\nimport net.inpercima.runandfun.runkeeper.model.RunkeeperActivityItem;\n\n/**\n * @author Marcel J\u00e4nicke\n * @author Sebastian Peters\n * @since 26.01.2015\n */\n@NoArgsConstructor\n@Service\n@Slf4j\npublic class ActivitiesService {\n\n    // initial release in 2008 according to http://en.wikipedia.org/wiki/RunKeeper\n    private static final LocalDate INITIAL_RELEASE_OF_RUNKEEPER = LocalDate.of(2008, 01, 01);\n\n    @Inject\n    private AuthService authService;\n\n    @Inject\n    private RestApiService restApiService;\n\n    @Inject\n    private ActivityRepository repository;\n\n    @Inject\n    private ElasticsearchRestTemplate elasticsearchRestTemplate;\n\n    public int indexActivities(final String accessToken) {\n        final Collection<AppActivity> activities = new ArrayList<>();\n        final String username = authService.getAppState(accessToken).getUsername();\n        listActivities(accessToken, calculateFetchDate()).stream().filter(item -> !repository.existsById(item.getId()))\n                .forEach(item -> addActivity(item, username, activities));\n        log.info(\"new activities: {}\", activities.size());\n        if (!activities.isEmpty()) {\n            repository.saveAll(activities);\n        }\n        return activities.size();\n    }\n\n    /**\n     * List activities live from runkeeper with an accessToken and a date. The full\n     * size will be determined every time but with the given date only the last\n     * items will be collected with a max. of the full size.\n     *\n     * @param accessToken\n     * @param from\n     ",
    "package cellsociety_team05;\n\npublic class SimulationException extends Exception {\n\tpublic SimulationException(String s) {\n\t\tsuper(s);\n\t}\n}\n",
    "package com.globalforge.infix;\n\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport com.globalforge.infix.api.InfixSimpleActions;\nimport com.google.common.collect.ListMultimap;\n\n/*-\nThe MIT License (MIT)\n\nCopyright (c) 2019-2020 Global Forge LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\npublic class TestAndOrSimple {\n    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n    }\n\n    private ListMultimap<String, String> getResults(String sampleRule) throws Exception {\n        InfixSimpleActions rules = new InfixSimpleActions(sampleRule);\n        String result = rules.transformFIXMsg(TestAndOrSimple.sampleMessage1);\n        return StaticTestingUtils.parseMessage(result);\n    }\n\n    @Test\n    public void t1() {\n        try {\n            String sampleRule = \"&45==0 && &47==0 ? &50=1\";\n            ListMultimap<String, String> resultStore = getResults(sampleRule);\n            Assert.assertEquals(\"1\", resultStore.get(\"50\").get(0));\n        } catch (Exception e) {\n            e.printStackTrace();\n            Assert.fail();\n        }\n    }\n\n    @Test\n    public void t2() {\n        try {\n            String sampleRule = \"&45==1 && &47==0 ? &50=1 : &50=2\";\n            ListMultimap<String, String> resultStore = getResults(sampleRule);\n            Assert.assertEquals(\"2\", resultStore.get(\"50\").get(0));\n        } catch (Exception e) {\n            e.printStackTrace();\n            Assert.fail();\n        }\n    }\n\n    @Test\n    public void t3() {\n        try {\n            String sampleRule = \"&45!=1 && &47==0 ? &50=1\";\n            ListMultimap<String, String> resultStore = getResults(sampleRule);\n            Assert.assertEquals(\"1\", resultStore.get(\"50\").get(0));\n        } catch (Exception e) {\n            e.printStackTrace();\n            Assert.fail();\n        }\n    }\n\n    @Test\n    public void t4() {\n        try {\n            String sampleRule = \"&45==0 && &47 != 1 ? &50=1\";\n            ListMultimap<String, String> resultStore = getResults(sam",
    "package championpicker.console;\n\nimport com.googlecode.lanterna.gui.*;\n\nimport com.googlecode.lanterna.TerminalFacade;\nimport com.googlecode.lanterna.terminal.Terminal;\nimport com.googlecode.lanterna.terminal.TerminalSize;\nimport com.googlecode.lanterna.terminal.swing.SwingTerminal;\n\nimport com.googlecode.lanterna.gui.GUIScreen;\nimport com.googlecode.lanterna.gui.dialog.DialogButtons;\nimport com.googlecode.lanterna.gui.component.Button;\nimport com.googlecode.lanterna.gui.component.Panel;\nimport com.googlecode.lanterna.gui.component.Label;\nimport com.googlecode.lanterna.gui.Window;\n\nimport com.googlecode.lanterna.screen.Screen;\nimport com.googlecode.lanterna.screen.Screen;\n\nimport championpicker.Main;\nimport championpicker.console.mainStartUp;\nimport championpicker.console.queueWindow;\n\nimport javax.swing.JFrame;\n\npublic class mainMenu extends Window{\n\n\tpublic mainMenu(String name){\n\t\n\t\tsuper(name);\n\t\t\n\t\tqueueWindow win = new queueWindow();\n\t\t\n\t\taddComponent(new Button(\"Queue!\", new Action(){\n\n\t\t\tpublic void doAction(){\n\t\t\tSystem.out.println(\"Success!\");\n\t\t\t\n\t\t\tmainStartUp.gui.showWindow(win, GUIScreen.Position.CENTER);\n\t\t}}));\n\t}\t\n}",
    "package simulation.generators;\n\nimport simulation.data.PetrolStation;\nimport simulation.data.Road;\n\n/**\n * Created by user on 03.06.2017.\n */\n\npublic class PetrolStationGenerator {\n    private Road road;\n    private int minimalDistanceBetweenStations = 50;\n    private int maximumDistanceBetweenStations = 200;\n    private float minimalFuelPrice = 3.5f;\n    private float maximumFuelPrice = 4f;\n\n    public PetrolStationGenerator(Road road) {\n        this.road = road;\n    }\n\n    public void generateStationsOnTheRoad(){\n        RandomIntegerGenerator generator = new RandomIntegerGenerator();\n        int lastStationPosition = 0;\n        road.addPetrolStation(generateStation(lastStationPosition));\n\n        while (lastStationPosition < road.getDistance()){\n           int nextStationDistance = generator.generateNumberFromRange(minimalDistanceBetweenStations,maximumDistanceBetweenStations);\n\n           if(lastStationPosition+nextStationDistance <= road.getDistance()){\n                road.addPetrolStation(generateStation(lastStationPosition+nextStationDistance));\n                lastStationPosition += nextStationDistance;\n           }else{\n               break;\n           }\n\n        }\n    }\n\n    private PetrolStation generateStation(int positionOnRoad){\n        float fuelPrice = new RandomFloatGenerator().generateNumberFromRange(minimalFuelPrice,maximumFuelPrice);\n\n        return new PetrolStation(positionOnRoad,fuelPrice);\n    }\n\n\n    public Road getRoad() {\n        return road;\n    }\n\n    public void setRoad(Road road) {\n        this.road = road;\n    }\n\n    public int getMinimalDistanceBetweenStations() {\n        return minimalDistanceBetweenStations;\n    }\n\n    public void setMinimalDistanceBetweenStations(int minimalDistanceBetweenStations) {\n        this.minimalDistanceBetweenStations = minimalDistanceBetweenStations;\n    }\n\n    public int getMaximumDistanceBetweenStations() {\n        return maximumDistanceBetweenStations;\n    }\n\n    public void setMaximumDistanceBetweenStations(int maximumDistanceBetweenStations) {\n        this.maximumDistanceBetweenStations = maximumDistanceBetweenStations;\n    }\n\n    public float getMinimalFuelPrice() {\n        return minimalFuelPrice;\n    }\n\n    public void setMinimalFuelPrice(float minimalFuelPrice) {\n        this.minimalFuelPrice = minimalFuelPrice;\n    }\n\n    public float getMaximumFuelPrice() {\n        return maximumFuelPrice;\n    }\n\n    public void setMaximumFuelPrice(float maximumFuelPrice) {\n        this.maximumFuelPrice = maximumFuelPrice;\n    }\n}\n",
    "/**\n *\n * Licensed Property to China UnionPay Co., Ltd.\n * \n * (C) Copyright of China UnionPay Co., Ltd. 2010\n *     All Rights Reserved.\n *\n * \n * Modification History:\n * =============================================================================\n *   Author         Date          Description\n *   ------------ ---------- ---------------------------------------------------\n *   xshu       2014-05-28       MPI\u63d2\u4ef6\u5305\u5e38\u91cf\u5b9a\u4e49\n * =============================================================================\n */\npackage com.boyuanitsm.pay.unionpay.config;\n\npublic class SDKConstants {\n\n\tpublic final static String COLUMN_DEFAULT = \"-\";\n\n\tpublic final static String KEY_DELIMITER = \"#\";\n\n\t/** memeber variable: blank. */\n\tpublic static final String BLANK = \"\";\n\n\t/** member variabel: space. */\n\tpublic static final String SPACE = \" \";\n\n\t/** memeber variable: unline. */\n\tpublic static final String UNLINE = \"_\";\n\n\t/** memeber varibale: star. */\n\tpublic static final String STAR = \"*\";\n\n\t/** memeber variable: line. */\n\tpublic static final String LINE = \"-\";\n\n\t/** memeber variable: add. */\n\tpublic static final String ADD = \"+\";\n\n\t/** memeber variable: colon. */\n\tpublic final static String COLON = \"|\";\n\n\t/** memeber variable: point. */\n\tpublic final static String POINT = \".\";\n\n\t/** memeber variable: comma. */\n\tpublic final static String COMMA = \",\";\n\n\t/** memeber variable: slash. */\n\tpublic final static String SLASH = \"/\";\n\n\t/** memeber variable: div. */\n\tpublic final static String DIV = \"/\";\n\n\t/** memeber variable: left . */\n\tpublic final static String LB = \"(\";\n\n\t/** memeber variable: right. */\n\tpublic final static String RB = \")\";\n\n\t/** memeber variable: rmb. */\n\tpublic final static String CUR_RMB = \"RMB\";\n\n\t/** memeber variable: .page size */\n\tpublic static final int PAGE_SIZE = 10;\n\n\t/** memeber variable: String ONE. */\n\tpublic static final String ONE = \"1\";\n\n\t/** memeber variable: String ZERO. */\n\tpublic static final String ZERO = \"0\";\n\n\t/** memeber variable: number six. */\n\tpublic static final int NUM_SIX = 6;\n\n\t/** memeber variable: equal mark. */\n\tpublic static final String EQUAL = \"=\";\n\n\t/** memeber variable: operation ne. */\n\tpublic static final String NE = \"!=\";\n\n\t/** memeber variable: operation le. */\n\tpublic static final String LE = \"<=\";\n\n\t/** memeber variable: operation ge. */\n\tpublic static final String GE = \">=\";\n\n\t/** memeber variable: operation lt. */\n\tpublic static final String LT = \"<\";\n\n\t/** memeber variable: operation gt. */\n\tpublic static final String GT = \">\";\n\n\t/** memeber variable: list separator. */\n\tpublic static final String SEP = \"./\";\n\n\t/** memeber variable: Y. */\n\tpublic static final String Y = \"Y\";\n\n\t/** memeber variable: AMPERSAND. */\n\tpublic static final String AMPERSAND = \"&\";\n\n\t/** memeber variable: SQL_LIKE_TAG. */\n\tpublic static final String SQL_LIKE_TAG = \"%\";\n\n\t/** memeber variable: @. */\n\tpublic static final String MAIL = \"@\";\n\n\t/** memeber variable: number zero. */\n\tpublic static final int NZERO = 0;\n\n\tpublic static final Str",
    "package br.com.gamemods.tutorial.ctf;\n\nimport org.bukkit.plugin.java.JavaPlugin;\n\npublic class CTFGameMods extends JavaPlugin\n{\n\n}\n",
    "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\n\r\npublic class CharCounterMain{\r\n    final static Charset enc = StandardCharsets.US_ASCII ;\r\n\r\n    public CharCounterMain(String ch, String filedir){\r\n        if(ch.length() != 1){\r\n            System.out.println(\"The first argument needs to be a char, found string of length \"+ch.length());\r\n            System.exit(1);\r\n        }\r\n\r\n        char c = ch.charAt(0);\r\n        if( c != ' ' && c != '.' &&  Character.getNumericValue(c) < 97 && Character.getNumericValue(c) > 122 ){ //compare against the ascii integer values\r\n            System.out.println(\"Need a character in range a-z (lowercase only) or a whitespace or a dot, found \"+c+\"!\");\r\n            System.exit(1);\r\n        }\r\n\r\n        Path p = Paths.get(filedir);\r\n        try {\r\n            BufferedReader bf = Files.newBufferedReader(p,enc);\r\n            String line;\r\n            String line2 = null ;\r\n            while((line = bf.readLine()) != null){\r\n                line2 += line ;\r\n            }\r\n            CharCounter cc = new CharCounter(c,line2);\r\n            int freq = cc.getFrequency();\r\n\r\n            System.out.println(String.format(\"Frequency of character %c was %d\", c,freq));\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"Finished, exiting...\");\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        if(args.length != 2){\r\n            System.out.println(\"Usage : CharCounterMain <char-to-look-for> <text-file-dir>\");\r\n        }else{\r\n            new CharCounterMain(args[0],args[1]);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n",
    "package com.company;\n\nimport java.util.Scanner;\n\npublic class Greeting {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        String firstName = scanner.nextLine();\n        String lastName = scanner.nextLine();\n        int age = Integer.parseInt(scanner.nextLine());\n\n        System.out.printf(\"Hello, %s %s. You are %d years old.\", firstName, lastName, age);\n    }\n}\n",
    "package sbahjsic.runtime;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport sbahjsic.core.Warnings;\nimport sbahjsic.core.Warnings.Level;\nimport sbahjsic.runtime.Operator.BiOperator;\nimport sbahjsic.runtime.Operator.UnOperator;\nimport sbahjsic.runtime.Operator.VarargOperator;\nimport sbahjsic.runtime.type.AnyType;\nimport sbahjsic.runtime.type.SVoid;\n\n/** Describes a Sbahjsic type.\n * \n * <p>For all subclasses, there must only exist one instance. To enforce\n * this, this class implements final {@code equals()} and {@code hashCode()}\n * methods as they are defined in {@code Object}.*/\npublic abstract class Type {\n\t\n\tprivate final Map<String, Operator> operators = new HashMap<>();\n\tprivate final Set<Type> supertypes = new HashSet<>();\n\tprivate final Set<String> fields = new HashSet<>();\n\tprivate final Map<String, Method> methods = new HashMap<>();\n\tprivate int priority = 0;\n\t\n\tprotected Type() {\n\t\t// Fixes a bug where AnyType tried to add AnyType.INSTANCE, which\n\t\t// was null at that point, to its own supertypes\n\t\tif(!getClass().equals(AnyType.class)) {\n\t\t\taddSupertype(AnyType.INSTANCE);\n\t\t}\n\t}\n\t\n\t/** Registers a new supertype for this type.\n\t * @param supertype the new supertype*/\n\tpublic final void addSupertype(Type supertype) {\n\t\t\n\t\tif(getSupertypes().contains(supertype) || supertype.getSupertypes().contains(this)) {\n\t\t\tthrow new RecursiveTypedefException(this.toString());\n\t\t}\n\t\t\n\t\tif(this != supertype) {\n\t\t\tsupertypes.add(supertype);\n\t\t}\n\t}\n\t\n\t/** Removes a supertype from this type if it exists.\n\t * @param supertype the supertype to remove*/\n\tpublic final void removeSupertype(Type supertype) {\n\t\tsupertypes.remove(supertype);\n\t}\n\t\n\t/** Registers an unary operator for this type.\n\t * @param op the operator to register\n\t * @param func a function that applies this operator*/\n\tpublic final void addUnOperator(String op, UnOperator func) {\n\t\toperators.put(op, Operator.unaryOperator(func));\n\t}\n\t\n\t/** Registers a binary operator for this type.\n\t * @param op the operator to register\n\t * @param func a function that applies this operator*/\n\tpublic final void addBiOperator(String op, BiOperator func) {\n\t\toperators.put(op, Operator.binaryOperator(func));\n\t}\n\t\n\t/** Adds an operator that can accept one or two arguments.\n\t * @param op the operator\n\t * @param unary the unary operator\n\t * @param binary the binary operator*/\n\tprotected final void addDoubleOperator(String op, UnOperator unary, BiOperator binary) {\n\t\toperators.put(op, (con, args) -> {\n\t\t\tif(args.length == 1)\n\t\t\t\treturn unary.apply(con, args[0]);\n\t\t\telse if(args.length == 2)\n\t\t\t\treturn binary.apply(con, args[0], args[1]);\n\t\t\t\n\t\t\tthrow new OperatorCallException(\"Called with \" + args.length + \n\t\t\t\t\t\" arguments, expected 1 or 2\");\n\t\t});\n\t}\n\t\n\t/** Registers a vararg operator for this type.*/\n\tpublic void addVarargOperator(String op, VarargOperator func) {\n\t\toperators.put(op, Operator.varargOperator(func));\n\t}\n\t\n\t/** Adds a field to this type.\n\t * @param ",
    "package septemberpack.september;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\n\nimport java.util.Random;\n\n/**\n * Created by Vlady on 22.10.2015.\n */\n\n/**\n * \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0443 \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u043e\u0432\n */\npublic class Asteroid {\n\n    Bitmap bitmap;\n\n    /**\n     * \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430\n     */\n    private int line1x;\n    private int line1y;\n\n    /**\n     * \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430\n     */\n    private int line2x;\n    private int line2y;\n\n    /**\n     * \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430\n     */\n    private int line3x;\n    private int line3y;\n\n    private Random random;\n\n    /**\n     * \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430 \u0438\n     * \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430\u043c \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b\n     * @param bmp - \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430\n     */\n    public Asteroid(Bitmap bmp){\n        this.bitmap = bmp;\n        random = new Random();\n\n        line1x = random.nextInt(880);\n        line2x = random.nextInt(880);\n        line3x = random.nextInt(880);\n\n        line1y = -random.nextInt(300);\n        line2y = -random.nextInt(300) - 400; // \u0417\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0430 \u043c\u0438\u043d\u0443\u0441 400\n        line3y = -random.nextInt(300) - 800; // \u0417\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u043e\u043c \u044d\u043a\u0440\u0430\u043d\u0430 \u043c\u0438\u043d\u0443\u0441 800\n    }\n\n    /**\n     * \u041c\u0435\u0442\u043e\u0434 \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438 \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u043e\u0432\n     * @param canvas - \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u044d\u043a\u0440\u0430\u043d\u0430 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f\n     */\n    public void draw(Canvas canvas){\n        canvas.drawBitmap(bitmap, line1x, line1y, null); // \u041f\u0435\u0440\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f\n        canvas.drawBitmap(bitmap, line2x, line2y, null); // \u0412\u0442\u043e\u0440\u0430\u044f \u043b\u0438\u043d\u0438\u044f\n        canvas.drawBitmap(bitmap, line3x, line3y, null); // \u0422\u0440\u0435\u0442\u044c\u044f \u043b\u0438\u043d\u0438\u044f\n    }\n\n    /**\n     * \u041c\u0435\u0442\u043e\u0434 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u0440\u0438 \u0443\u043f\u043b\u044b\u0442\u0438\u0438 \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0444\u043e\u043d\u0430\n     */\n    public void update(){\n        if(line1y > 1400) {\n            line1y = -80;\n            line1x = random.nextInt(880);\n        }\n        else if(line2y > 1400) {\n            line2y = -80;\n            line2x = random.nextInt(880);\n        }\n        else if(line3y > 1400) {\n            line3y = -80;\n            line3x = random.nextInt(880);\n        }\n\n        line1y += GamePanel.speed;\n        line2y += GamePanel.speed;\n        line3y += GamePanel.speed;\n    }\n\n    /*\n    * \u041c\u0435\u0442\u043e\u0434\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430 \u043f\u043e \u0435\u0433\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c, \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u043e\u043b\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u044f \u0441 \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u043c\n    * \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0443\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043e\u0434\u0438\u043d \u043c\u0435\u0442\u043e\u0434 \u0441 \u0447\u0435\u0442\u044b\u0440\u044c\u043c\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043d\u043e \u0435\u0433\u043e \u0432\u044b\u0437\u043e\u0432 \u0431\u044b\u043b \u0431\u044b \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\n    * \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u0430\u0441\u0442\u0435\u0440\u043e\u0438\u0434\u0430, \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0432\u043e\u0439 \u043c\u0435\u0442\u043e\u0434\n    */\n    public Rect getAsteroid1(){\n        return new Rect(line1x, line1y, line1x + 100, line1y + 120);\n    }\n\n    public Rect getAsteroid2(){\n        return new Rect(line2x, line2y, line2x + 100, line2y + 120);\n    }\n\n    public Rect getAsteroid3(){\n        return new Rect(line3x, line3y, line3x + 100, line3y + 120);\n    }\n}\n",
    "/*\n * The contents of this file are subject to the Mozilla Public \n * License Version 1.1 (the \"License\"); you may not use this \n * file except in compliance with the License. You may obtain \n * a copy of the License at http://www.mozilla.org/MPL/\n * \n * Software distributed under the License is distributed on an \n * \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express \n * or implied. See the License for the specific language governing\n * rights and limitations under the License.\n *\n *\n * The Original Code is OIOSAML Java Service Provider.\n * \n * The Initial Developer of the Original Code is Trifork A/S. Portions \n * created by Trifork A/S are Copyright (C) 2008 Danish National IT \n * and Telecom Agency (http://www.itst.dk). All Rights Reserved.\n * \n * Contributor(s):\n *   Joakim Recht <jre@trifork.com>\n *   Rolf Njor Jensen <rolf@trifork.com>\n *   Aage Nielsen <ani@openminds.dk>\n *\n */\npackage dk.itst.oiosaml.sp.service;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport dk.itst.oiosaml.logging.Logger;\nimport dk.itst.oiosaml.logging.LoggerFactory;\nimport org.apache.commons.configuration.Configuration;\nimport org.opensaml.DefaultBootstrap;\nimport org.opensaml.xml.ConfigurationException;\n\nimport dk.itst.oiosaml.common.SAMLUtil;\nimport dk.itst.oiosaml.configuration.FileConfiguration;\nimport dk.itst.oiosaml.configuration.SAMLConfiguration;\nimport dk.itst.oiosaml.configuration.SAMLConfigurationFactory;\nimport dk.itst.oiosaml.error.Layer;\nimport dk.itst.oiosaml.error.WrappedException;\nimport dk.itst.oiosaml.logging.Audit;\nimport dk.itst.oiosaml.logging.Operation;\nimport dk.itst.oiosaml.sp.UserAssertion;\nimport dk.itst.oiosaml.sp.UserAssertionHolder;\nimport dk.itst.oiosaml.sp.bindings.BindingHandler;\nimport dk.itst.oiosaml.sp.develmode.DevelMode;\nimport dk.itst.oiosaml.sp.develmode.DevelModeImpl;\nimport dk.itst.oiosaml.sp.metadata.CRLChecker;\nimport dk.itst.oiosaml.sp.metadata.IdpMetadata;\nimport dk.itst.oiosaml.sp.metadata.SPMetadata;\nimport dk.itst.oiosaml.sp.service.session.Request;\nimport dk.itst.oiosaml.sp.service.session.SessionCleaner;\nimport dk.itst.oiosaml.sp.service.session.SessionHandler;\nimport dk.itst.oiosaml.sp.service.session.SessionHandlerFactory;\nimport dk.itst.oiosaml.sp.service.util.Constants;\n\n/**\n * Servlet filter for checking if the user is authenticated.\n * \n * <p>\n * If the user is authenticated, a session attribute,\n * {@link Constants#SESSION_USER_ASSERTION} is set to contain a\n * {@link UserAssertion} repre",
    "package fables.kotlin.jee.rest;\n\nimport fables.kotlin.jee.business.KittenBusinessService;\nimport fables.kotlin.jee.business.KittenEntity;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.*;\n\n/**\n * JSON REST CRud service.\n * JEE will first create one noarg instance, and then injected instances.\n *\n * @author Zeljko Trogrlic\n */\n@Path(\"kitten\")\npublic class KittenRestService {\n\n  @Inject\n  protected KittenBusinessService kittenBusinessService;\n\n  @GET\n  @Path(\"{id}\")\n  @Produces({\"application/json\"})\n  public KittenRest find(\n      @PathParam(\"id\") final int id\n  ) {\n    return kittenBusinessService\n        .find(id)\n        .map(kittenEntity -> new KittenRest(kittenEntity.getName(), kittenEntity.getCuteness()))\n        .orElseThrow(() -> new NotFoundException(\"ID \" + id + \" not found\"));\n  }\n\n  @POST\n  @Produces({\"application/json\"})\n  public Integer add(KittenRest kittenRest) {\n    KittenEntity kittenEntity = new KittenEntity(kittenRest.getName(), kittenRest.getCuteness());\n    return kittenBusinessService.add(kittenEntity);\n  }\n}\n",
    "package me.nereo.multi_image_selector;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Matrix;\nimport android.graphics.RectF;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.support.annotation.Nullable;\nimport android.text.TextUtils;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.facebook.common.executors.CallerThreadExecutor;\nimport com.facebook.common.references.CloseableReference;\nimport com.facebook.datasource.DataSource;\nimport com.facebook.drawee.backends.pipeline.Fresco;\nimport com.facebook.drawee.controller.AbstractDraweeController;\nimport com.facebook.drawee.drawable.ProgressBarDrawable;\nimport com.facebook.drawee.drawable.ScalingUtils;\nimport com.facebook.drawee.generic.GenericDraweeHierarchy;\nimport com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;\nimport com.facebook.drawee.interfaces.DraweeController;\nimport com.facebook.imagepipeline.core.ImagePipeline;\nimport com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber;\nimport com.facebook.imagepipeline.image.CloseableImage;\nimport com.facebook.imagepipeline.request.ImageRequest;\nimport com.facebook.imagepipeline.request.ImageRequestBuilder;\n\nimport java.io.File;\n\nimport me.nereo.multi_image_selector.view.ClipImageBorderView;\nimport me.nereo.multi_image_selector.view.zoomable.DefaultZoomableController;\nimport me.nereo.multi_image_selector.view.zoomable.ZoomableDraweeView;\n\n/**\n * Created by sunny on 2015/12/22.\n * \u56fe\u7247\u88c1\u526a\n */\npublic class ClipPhotoActivity extends Activity implements OnClickListener, IBitmapShow {\n    public static final String TAG = ClipPhotoActivity.class.getSimpleName();\n\n    private String imgUrl;\n\n    private TextView mTitle;\n    private Button mCommit;\n    private ImageView mBack;\n    private ZoomableDraweeView mGestureImageView;\n    private ClipImageBorderView clip_image_borderview;\n\n    //\u56fe\u7247\u7684\u5e73\u79fb\u4e0e\u7f29\u653e\n    float mCurrentScale;\n    float last_x = -1;\n    float last_y = -1;\n    boolean move = false;\n\n    public static void startClipPhotoActivity(Context context, String uri) {\n        Intent targetIntent = new Intent(context, ClipPhotoActivity.class);\n        targetIntent.putExtra(TAG, uri);\n        context.startActivity(targetIntent);\n    }\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_clip_photo);\n        setTitle(\"\u56fe\u7247\u88c1\u526a\");\n\n        initIntentParams();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n   ",
    "package wanghaisheng.com.yakerweather;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * To work on unit tests, switch the Test Artifact in the Build Variants view.\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() throws Exception {\n        assertEquals(4, 2 + 2);\n    }\n}",
    "/*\n * Code used in the \"Software Engineering\" course.\n *\n * Copyright 2017 by Claudio Cusano (claudio.cusano@unipv.it)\n * Dept of Electrical, Computer and Biomedical Engineering,\n * University of Pavia.\n */\npackage goldrush;\n\n/**\n *  @author Reina Michele cl418656\n * @author Bonissone Davidecl427113\n */\npublic class BoniMichele extends GoldDigger{ //\nint t=0;\n   int j=99;\n    @Override\n    public int chooseDiggingSite(int[] distances) {\n     \n        for (int i=0; i<distances.length; i++){\n          if (t==0){\n            \n            if (distances[i]==140) {\n               j=i;\n               t++;\n            }\n        }\n     else   if (t<3) { \n          if (distances[i]== 30) {\n               j=i;\n               t=0;\n              \n            }\n         }\n     else {\n        if (distances[i]== 200) {\n               j=i;\n               t=0;\n     }\n        }\n        }\n       \n    return j;\n          \n        }\n    \n}\n",
    "/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage com.docuware.dev.Extensions;\r\n\r\nimport java.io.Closeable;\r\nimport java.io.InputStream;\r\n\r\n/**\r\n *\r\n * @author Patrick\r\n */\r\npublic class EasyCheckoutResult implements Closeable {\r\n\r\n    private String EncodedFileName;\r\n\r\n    public String getEncodedFileName() {\r\n        return EncodedFileName;\r\n    }\r\n\r\n    void setEncodedFileName(String data) {\r\n        EncodedFileName = data;\r\n    }\r\n\r\n    private DeserializedHttpResponseGen<InputStream> response;\r\n\r\n    public DeserializedHttpResponseGen<InputStream> getResponse() {\r\n        return response;\r\n    }\r\n\r\n    void setResponse(DeserializedHttpResponseGen<InputStream> data) {\r\n        response = data;\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        this.response.close();\r\n    }\r\n}\r\n",
    "package experiments;\n\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport data.StateImpl;\nimport datahandler.word2vec.MedicalSequenceIterator;\nimport state2vec.State2Vec;\n\npublic class State2VecTest {\n\t\n\tprotected static final Logger logger = LoggerFactory.getLogger(State2VecTest.class);\n\t\n\tpublic State2VecTest(File file, String run) throws Exception {\n\t\t\n\t\tList<Integer> windowSizes;\n\t\tList<Double> learningRates;\n\t\t\n\t\tif(run.equals(\"0\")){\n\t\t\tlogger.info(\"Run 0\");\n\t\t\twindowSizes = Arrays.asList(5);\n\t\t\tlearningRates = Arrays.asList(0.025, 0.1);\n\t\t}\n\t\telse if(run.equals(\"1\")) {\n\t\t\tlogger.info(\"Run 1\");\n\t\t\twindowSizes = Arrays.asList(5);\n\t\t\tlearningRates = Arrays.asList(0.1);\n\t\t}\n\t\telse if(run.equals(\"2\")) {\n\t\t\tlogger.info(\"Run 2\");\n\t\t\twindowSizes = Arrays.asList(10);\n\t\t\tlearningRates = Arrays.asList(0.025);\n\t\t}\n\t\telse if(run.equals(\"3\")) {\n\t\t\tlogger.info(\"Run 3\");\n\t\t\twindowSizes = Arrays.asList(10);\n\t\t\tlearningRates = Arrays.asList(0.1);\n\t\t}\n\t\telse if(run.equals(\"4\")) {\n\t\t\tlogger.info(\"Run 4\");\n\t\t\twindowSizes = Arrays.asList(15);\n\t\t\tlearningRates = Arrays.asList(0.025);\n\t\t}\n\t\telse {\n\t\t\tlogger.info(\"Run \" + run);\n\t\t\twindowSizes = Arrays.asList(15);\n\t\t\tlearningRates = Arrays.asList(0.1);\n\t\t}\n\t\t\n\t\t//List<Integer> windowSizes = Arrays.asList(5, 10, 15);\n\t\t//List<Double> learningRates = Arrays.asList(0.025, 0.1);\n\t\tList<Integer> vectorLengths = Arrays.asList(50, 100);\n\t\tList<Integer> minWordFreqs = Arrays.asList(5, 10);\n\t\tint batchsize = 500;\n\t\tint epoch = 1;\n\t\t\n\t\t\n\t\tMedicalSequenceIterator<StateImpl> sequenceIterator = new MedicalSequenceIterator<StateImpl>(file, false);\n\t\t\n\t\tfor(int windowSize: windowSizes) {\n\t\t\tfor(double learningRate: learningRates) {\n\t\t\t\tfor(int vectorLength: vectorLengths) {\n\t\t\t\t\tfor(int minWordFreq: minWordFreqs) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tlogger.info(\"STATE2VEC - EXPERIMENT\");\n\t\t\t\t\t\tlogger.info(\"\");\n\t\t\t\t\t\tlogger.info(\"==PARAMETERS==\");\n\t\t\t\t\t\tlogger.info(\"windowSize: \" + windowSize);\n\t\t\t\t\t\tlogger.info(\"learningRate: \" + learningRate);\n\t\t\t\t\t\tlogger.info(\"vectorLength: \" + vectorLength);\n\t\t\t\t\t\tlogger.info(\"batchSize: \" + batchsize);\n\t\t\t\t\t\tlogger.info(\"epoch: \" + epoch);\n\t\t\t\t\t\tlogger.info(\"minWordFreq: \" + minWordFreq);\n\t\t\t\t\t\tlogger.info(\"\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tsequenceIterator.reset();\n\n\t\t\t\t\t\tState2Vec state2vec = new State2Vec();\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate2vec.trainSequenceVectors(sequenceIterator, windowSize, learningRate, vectorLength, batchsize, epoch, minWordFreq);\n\t\t\t\t\t\t\n\t\t\t\t\t\tList<Integer> ks = Arrays.asList(100, 1000, 5000);\n\t\t\t\t\t\t\n\t\t\t\t\t\tClusterSeqTest clusterTest = new ClusterSeqTest();\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int k: ks) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tResultWriter writer1 = new ResultWriter(\"State2Vec - \", \"Cluster1Test\");\n\t\t\t\t\t\t\twriter1.writeLine(\"STATE2VEC - EXPERIMENT\");\n\t\t\t\t\t\t\twriter1.writeLine(\"\");\n\t\t\t\t\t\t\twriter1.writeLine(\"==PARAMETERS==\");\n\t\t\t\t\t\t\twriter1.writeLine(\"windowSize: \" + windowSize);\n\t\t\t\t\t\t\twriter1.writeLine(\"learningRate: \" + learningRate);\n\t\t\t\t\t\t\twriter1",
    "package lv.emes.libraries.utilities.validation;\n\n/**\n * Actions for error that occur in validation process.\n *\n * @author eMeS\n * @version 1.2.\n */\npublic interface MS_ValidationError<T> {\n\n    MS_ValidationError withErrorMessageFormingAction(IFuncFormValidationErrorMessage action);\n\n    /**\n     * Returns message of validation error using pre-defined method to form message.\n     * @return formatted message describing essence of this particular validation error.\n     */\n    String getMessage();\n    Integer getNumber();\n\n    T getObject();\n\n    /**\n     * @param object an object to validate.\n     * @return reference to validation error itself.\n     */\n    MS_ValidationError withObject(T object);\n}\n",
    "package ch.spacebase.openclassic.api;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.ProtocolException;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.security.SecureRandom;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport ch.spacebase.openclassic.api.util.Constants;\n\n/**\n * Manages the server's web heartbeats.\n */\npublic final class HeartbeatManager {\n\n\tprivate static final long salt = new SecureRandom().nextLong();\n\tprivate static final Map<String, Runnable> customBeats = new HashMap<String, Runnable>();\n\tprivate static String url = \"\";\n\t\n\t/**\n\t * Gets the server's current salt.\n\t * @return The server's salt.\n\t */\n\tpublic static long getSalt() {\n\t\treturn salt;\n\t}\n\t\n\t/**\n\t * Gets the server's minecraft.net url.\n\t * @return The url.\n\t */\n\tpublic static String getURL() {\n\t\treturn url;\n\t}\n\t\n\t/**\n\t * Sets the server's known minecraft.net url.\n\t * @param url The url.\n\t */\n\tpublic static void setURL(String url) {\n\t\tHeartbeatManager.url = url;\n\t}\n\t\n\t/**\n\t * Triggers a heartbeat.\n\t */\n\tpublic static void beat() {\n\t\tmineBeat();\n\t\twomBeat();\n\t\t\n\t\tfor(String id : customBeats.keySet()) {\n\t\t\ttry {\n\t\t\t\tcustomBeats.get(id).run();\n\t\t\t} catch(Exception e) {\n\t\t\t\tOpenClassic.getLogger().severe(\"Exception while running a custom heartbeat with the ID \\\"\" + id + \"\\\"!\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Adds a custom heartbeat to run when {@link beat()} is called.\n\t * @param id ID of the custom heartbeat.\n\t * @param run Runnable to call when beating.\n\t */\n\tpublic static void addBeat(String id, Runnable run) {\n\t\tcustomBeats.put(id, run);\n\t}\n\t\n\t/**\n\t * Removes a custom heartbeat.\n\t * @param id ID of the heartbeat.\n\t */\n\tpublic static void removeBeat(String id) {\n\t\tcustomBeats.remove(id);\n\t}\n\t\n\t/**\n\t * Clears the custom heartbeat list.\n\t */\n\tpublic static void clearBeats() {\n\t\tcustomBeats.clear();\n\t}\n\n\tprivate static void mineBeat() {\n\t\tURL url = null;\n\t\t\n\t\ttry {\n\t\t\turl = new URL(\"https://minecraft.net/heartbeat.jsp?port=\" + OpenClassic.getServer().getPort() + \"&max=\" + OpenClassic.getServer().getMaxPlayers() + \"&name=\" + URLEncoder.encode(Color.stripColor(OpenClassic.getServer().getServerName()), \"UTF-8\") + \"&public=\" + OpenClassic.getServer().isPublic() + \"&version=\" + Constants.PROTOCOL_VERSION + \"&salt=\" + salt + \"&users=\" + OpenClassic.getServer().getPlayers().size());\n\t\t} catch(MalformedURLException e) {\n\t\t\tOpenClassic.getLogger().severe(\"Malformed URL while attempting minecraft.net heartbeat?\");\n\t\t\treturn;\n\t\t} catch(UnsupportedEncodingException e) {\n\t\t\tOpenClassic.getLogger().severe(\"UTF-8 URL encoding is unsupported on your system.\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tHttpURLConnection conn = null;\n\t\t\n\t\ttry {\n\t\t\tconn = (HttpURLConnection) url.openConnection(",
    "package org.gojul.gojulutils.data;\n\n/**\n * Class {@code GojulPair} is a simple stupid pair class. This class is notably necessary\n * when emulating JOIN in database and such a class does not exist natively in the JDK.\n * This object is immutable as long as the object it contains are immutable. Since\n * this object is not serializable it should not be stored in objects which could be serialized,\n * especially Java HttpSession objects.\n *\n * @param <S> the type of the first object of the pair.\n * @param <T> the type of the second object of the pair.\n * @author jaubin\n */\npublic final class GojulPair<S, T> {\n\n    private final S first;\n    private final T second;\n\n    /**\n     * Constructor. Both parameters are nullable. Note that this constructor\n     * does not perform any defensive copy as it is not possible there.\n     *\n     * @param first  the first object.\n     * @param second the second object.\n     */\n    public GojulPair(final S first, final T second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    /**\n     * Return the first object.\n     *\n     * @return the first object.\n     */\n    public S getFirst() {\n        return first;\n    }\n\n    /**\n     * Return the second object.\n     *\n     * @return the second object.\n     */\n    public T getSecond() {\n        return second;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        GojulPair<?, ?> pair = (GojulPair<?, ?>) o;\n\n        if (getFirst() != null ? !getFirst().equals(pair.getFirst()) : pair.getFirst() != null) return false;\n        return getSecond() != null ? getSecond().equals(pair.getSecond()) : pair.getSecond() == null;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        int result = getFirst() != null ? getFirst().hashCode() : 0;\n        result = 31 * result + (getSecond() != null ? getSecond().hashCode() : 0);\n        return result;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String toString() {\n        return \"GojulPair{\" +\n                \"first=\" + first +\n                \", second=\" + second +\n                '}';\n    }\n}\n",
    "package me.august.lumen.data;\n\nimport me.august.lumen.compile.resolve.data.ClassData;\nimport me.august.lumen.compile.resolve.lookup.DependencyManager;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class DataTest {\n\n    @Test\n    public void testClassData() {\n        ClassData data = ClassData.fromClass(String.class);\n\n        Assert.assertEquals(\n                String.class.getName(),\n                data.getName()\n        );\n\n        String[] expected = new String[]{\n                \"java.io.Serializable\", \"java.lang.Comparable\",\n                \"java.lang.CharSequence\"\n        };\n        Assert.assertArrayEquals(\n                expected,\n                data.getInterfaces()\n        );\n    }\n\n    @Test\n    public void testAssignableTo() {\n        DependencyManager deps = new DependencyManager();\n        ClassData data;\n\n        data = ClassData.fromClass(String.class);\n\n        Assert.assertTrue(\n                \"Expected String to be assignable to String\",\n                data.isAssignableTo(\"java.lang.String\", deps)\n        );\n\n        Assert.assertTrue(\n                \"Expected String to be assignable to Object\",\n                data.isAssignableTo(\"java.lang.Object\", deps)\n        );\n\n        Assert.assertTrue(\n                \"Expected String to be assignable to CharSequence\",\n                data.isAssignableTo(\"java.lang.CharSequence\", deps)\n        );\n\n        data = ClassData.fromClass(Object.class);\n\n        Assert.assertFalse(\n                \"Expected Object to not be assignable to String\",\n                data.isAssignableTo(\"java.lang.String\", deps)\n        );\n\n        data = ClassData.fromClass(CharSequence.class);\n\n        Assert.assertTrue(\n                \"Expected CharSequence to be assignable to Object\",\n                data.isAssignableTo(\"java.lang.Object\", deps)\n        );\n    }\n\n}\n",
    "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage ons;\n\nimport ons.util.WeightedGraph;\n\nimport org.w3c.dom.*;\n\n/**\n * The physical topology of a network refers to he physical layout of devices on\n * a network, or to the way that the devices on a network are arranged and how\n * they communicate with each other.\n *\n * @author andred\n */\npublic abstract class PhysicalTopology {\n\n    protected int nodes;\n    protected int links;\n    protected OXC[] nodeVector;\n    protected Link[] linkVector;\n    protected Link[][] adjMatrix;\n\n    /**\n     * Creates a new PhysicalTopology object. Takes the XML file containing all\n     * the information about the simulation environment and uses it to populate\n     * the PhysicalTopology object. The physical topology is basically composed\n     * of nodes connected by links, each supporting different wavelengths.\n     *\n     * @param xml file that contains the simulation environment information\n     */\n    public PhysicalTopology(Element xml) {\n        try {\n            if (Simulator.verbose) {\n                System.out.println(xml.getAttribute(\"name\"));\n            }\n        } catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n\n    /**\n     * Retrieves the number of nodes in a given PhysicalTopology.\n     *\n     * @return the value of the PhysicalTopology's nodes attribute\n     */\n    public int getNumNodes() {\n        return nodes;\n    }\n\n    /**\n     * Retrieves the number of links in a given PhysicalTopology.\n     *\n     * @return number of items in the PhysicalTopology's linkVector attribute\n     */\n    public int getNumLinks() {\n        return linkVector.length;\n    }\n\n    /**\n     * Retrieves a specific node in the PhysicalTopology object.\n     *\n     * @param id the node's unique identifier\n     * @return specified node from the PhysicalTopology's nodeVector\n     */\n    public OXC getNode(int id) {\n        return nodeVector[id];\n    }\n\n    /**\n     * Retrieves a specific link in the PhysicalTopology object, based on its\n     * unique identifier.\n     *\n     * @param linkid the link's unique identifier\n     * @return specified link from the PhysicalTopology's linkVector\n     */\n    public Link getLink(int linkid) {\n        return linkVector[linkid];\n    }\n\n    /**\n     * Retrieves a specific link in the PhysicalTopology object, based on its\n     * source and destination nodes.\n     *\n     * @param src the link's source node\n     * @param dst the link's destination node\n     * @return the specified link from the PhysicalTopology's adjMatrix\n     */\n    public Link getLink(int src, int dst) {\n        return adjMatrix[src][dst];\n    }\n\n    /**\n     * Retrives a given PhysicalTopology's adjancency matrix, which contains the\n     * links between source and destination nodes.\n     *\n     * @return the PhysicalTopology's adjMatrix\n     */\n    public Link[][] getAdjMatrix() {\n        return adjMatrix;\n    }\n\n    /**\n     * Says whether exists ",
    "package exercise.task5_kingsGambitExtended.utils;\n\npublic class MessegeLogger {\n\n    public static void log(String message){\n        System.out.println(message);\n    }\n}\n",
    "package ir.abforce.dinorunner.custom;\n\nimport com.makersf.andengine.extension.collisions.entity.sprite.PixelPerfectSprite;\nimport com.makersf.andengine.extension.collisions.opengl.texture.region.PixelPerfectTextureRegion;\n\nimport ir.abforce.dinorunner.managers.RM;\n\n/**\n * Created by Ali Reza on 9/4/15.\n */\npublic class SPixelPerfectSprite extends PixelPerfectSprite {\n    public SPixelPerfectSprite(float pX, float pY, PixelPerfectTextureRegion pTextureRegion) {\n        super(pX, pY, pTextureRegion, RM.VBO);\n        setScale(RM.S);\n    }\n}\n",
    "package com.asksunny.batch.tasklets;\r\n\r\npublic class Demo1 {\r\n\r\n\tlong id;\r\n\tString name;\r\n\t\r\n\tpublic Demo1() {\t\t\r\n\t}\r\n\r\n\tpublic long getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic void setId(long id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\t\r\n\t\r\n\r\n}\r\n",
    "package net.glowstone.net.codec.play.game;\n\nimport com.flowpowered.network.Codec;\nimport io.netty.buffer.ByteBuf;\nimport java.io.IOException;\nimport net.glowstone.net.GlowBufUtils;\nimport net.glowstone.net.message.play.game.UpdateBlockEntityMessage;\nimport net.glowstone.util.nbt.CompoundTag;\nimport org.bukkit.util.BlockVector;\n\npublic final class UpdateBlockEntityCodec implements Codec<UpdateBlockEntityMessage> {\n\n    @Override\n    public UpdateBlockEntityMessage decode(ByteBuf buffer) throws IOException {\n        BlockVector pos = GlowBufUtils.readBlockPosition(buffer);\n        int action = buffer.readByte();\n        CompoundTag nbt = GlowBufUtils.readCompound(buffer);\n        return new UpdateBlockEntityMessage(pos.getBlockX(), pos.getBlockY(), pos.getBlockZ(),\n            action, nbt);\n    }\n\n    @Override\n    public ByteBuf encode(ByteBuf buf, UpdateBlockEntityMessage message) throws IOException {\n        GlowBufUtils.writeBlockPosition(buf, message.getX(), message.getY(), message.getZ());\n        buf.writeByte(message.getAction());\n        GlowBufUtils.writeCompound(buf, message.getNbt());\n        return buf;\n    }\n}\n",
    "package co.colector.model.request;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport co.colector.ColectorApplication;\nimport co.colector.R;\nimport co.colector.model.IdInputValue;\nimport co.colector.model.IdValue;\nimport co.colector.model.Survey;\nimport co.colector.model.AnswerValue;\nimport co.colector.session.AppSession;\nimport co.colector.utils.NetworkUtils;\n\n/**\n * Created by dherrera on 11/10/15.\n */\npublic class SendSurveyRequest {\n\n    private String colector_id;\n    private String form_id;\n    private String longitud;\n    private String latitud;\n    private String horaini;\n    private String horafin;\n    private List<IdInputValue> responses;\n\n\n    public SendSurveyRequest(Survey survey) {\n        this.colector_id = String.valueOf(AppSession.getInstance().getUser().getColector_id());\n        this.form_id = String.valueOf(survey.getForm_id());\n        this.longitud = survey.getInstanceLongitude();\n        this.latitud = survey.getInstanceLatitude();\n        this.horaini = survey.getInstanceHoraIni();\n        this.horafin = survey.getInstanceHoraFin();\n        this.setResponsesData(survey.getInstanceAnswers());\n    }\n\n    public List<IdInputValue> getResponses() {\n        return responses;\n    }\n\n    public void setResponses(List<IdInputValue> responses) {\n        this.responses = responses;\n    }\n\n    private void setResponsesData(List<IdValue> responsesData) {\n        responses = new ArrayList<>();\n        for (IdValue item : responsesData) {\n            switch (item.getmType()) {\n                case 6:\n                case 14:\n                case 16:\n                    for (AnswerValue answerValue : item.getValue())\n                    if (!answerValue.getValue().equals(\"\")) {\n                        int lastIndex = answerValue.getValue().length();\n                        int slashIndex = answerValue.getValue().lastIndexOf(\"/\");\n                        responses.add(new IdInputValue(String.valueOf(item.getId()), ColectorApplication.getInstance().getString(R.string.image_name_format,\n                                NetworkUtils.getAndroidID(ColectorApplication.getInstance()),\n                                answerValue.getValue().substring((slashIndex + 1), lastIndex))));\n                    }\n                    break;\n                default:\n                    for (AnswerValue answerValue : item.getValue())\n                        responses.add(new IdInputValue(String.valueOf(item.getId()), answerValue.getValue()));\n            }\n\n        }\n    }\n}\n\n",
    "package com.team2502.robot2017.command.autonomous;\n\nimport edu.wpi.first.wpilibj.command.CommandGroup;\n\npublic class ShinyFollow extends CommandGroup\n{\n    /**\n     * Does a follow\n     */\n    public ShinyFollow() { addSequential(new AutoVisionCommand(200, 0.3)); }\n}",
    "package br.com.caelum.rest.server;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class SimpleAction implements Action {\n\n\tpublic String getUri() {\n\t\treturn uri;\n\t}\n\n\tpublic String getRel() {\n\t\treturn rel;\n\t}\n\n\tprivate final String uri;\n\tprivate final String rel;\n\n\tpublic SimpleAction(String rel, String uri) {\n\t\tthis.rel = rel;\n\t\tthis.uri = uri;\n\t}\n\t\n\tpublic SimpleAction(String rel, HttpServletRequest request, String uri) {\n\t\tthis.rel = rel;\n\t\tthis.uri  = \"http://restful-server.appspot.com\" + uri;\n\t\t// this.uri = \"http://\" + request.getServerName() + \":\" + request.getServerPort() + request.getContextPath() + uri;\n\t\t\n\t}\n\n}\n",
    "package com.ms.meizinewsapplication.features.meizi.model;\n\nimport android.content.Context;\n\nimport com.ms.meizinewsapplication.features.base.pojo.ImgItem;\nimport com.ms.retrofitlibrary.web.MyOkHttpClient;\n\nimport org.loader.model.OnModelListener;\n\nimport java.util.List;\n\nimport rx.Observable;\nimport rx.Subscription;\n\n/**\n * Created by \u555f\u6210 on 2016/3/15.\n */\npublic class DbGroupBreastModel extends DbGroupModel {\n\n    private String pager_offset;\n\n    public Subscription loadWeb(Context context, OnModelListener<List<ImgItem>> listener, String pager_offset) {\n        this.pager_offset = pager_offset;\n        return loadWeb(context, listener);\n\n    }\n\n    @Override\n    protected Subscription reSubscription(Context context, OnModelListener<List<ImgItem>> listener) {\n        Observable<String> dbGroupBreast = getDbGroup().RxDbGroupBreast(\n                MyOkHttpClient.getCacheControl(context),\n                pager_offset\n        );\n\n        return rxDbGroup(dbGroupBreast, listener);\n    }\n}\n",
    "package com.syncano.android.lib.modules.users;\n\nimport com.google.gson.annotations.Expose;\nimport com.google.gson.annotations.SerializedName;\nimport com.syncano.android.lib.modules.Params;\nimport com.syncano.android.lib.modules.Response;\n\n/**\n * Params to create new user.\n */\npublic class ParamsUserNew extends Params {\n\t/** Name of user */\n\t@Expose\n\t@SerializedName(value = \"user_name\")\n\tprivate String userName;\n\t/** Nickname of user */\n\t@Expose\n\tprivate String nick;\n\t/** Avatar base64 for user */\n\t@Expose\n\tprivate String avatar;\n\t/** User's password. */\n\t@Expose\n\t@SerializedName(value = \"password\")\n\tprivate String password;\n\t\n\t/**\n\t * @param userName\n\t *            User name defining user. Can be <code>null</code>.\n\t */\n\tpublic ParamsUserNew(String userName) {\n\t\tsetUserName(userName);\n\t}\n\n\t@Override\n\tpublic String getMethodName() {\n\t\treturn \"user.new\";\n\t}\n\n\tpublic Response instantiateResponse() {\n\t\treturn new ResponseUserNew();\n\t}\n\n\t/**\n\t * @return user name\n\t */\n\tpublic String getUserName() {\n\t\treturn userName;\n\t}\n\n\t/**\n\t * Sets user name\n\t * \n\t * @param user_name\n\t *            user name\n\t */\n\tpublic void setUserName(String userName) {\n\t\tthis.userName = userName;\n\t}\n\n\t/**\n\t * @return user nickname\n\t */\n\tpublic String getNick() {\n\t\treturn nick;\n\t}\n\n\t/**\n\t * Sets user nickname\n\t * \n\t * @param nick\n\t *            nickname\n\t */\n\tpublic void setNick(String nick) {\n\t\tthis.nick = nick;\n\t}\n\n\t/**\n\t * @return avatar base64\n\t */\n\tpublic String getAvatar() {\n\t\treturn avatar;\n\t}\n\n\t/**\n\t * Sets avatar base64\n\t * \n\t * @param avatar\n\t *            avatar base64\n\t */\n\tpublic void setAvatar(String avatar) {\n\t\tthis.avatar = avatar;\n\t}\n\n\t/**\n\t * @return password\n\t */\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\t/**\n\t * @param Sets\n\t *            user password\n\t */\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\n}",
    "/*******************************************************************************\n *  The MIT License (MIT)\n *\n *  Copyright (c) 2015 - 2019  Dr. Marc M\u00fcltin (V2G Clarity)\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n *******************************************************************************/\npackage com.v2gclarity.risev2g.evcc.states;\n\nimport java.util.concurrent.TimeUnit;\n\nimport com.v2gclarity.risev2g.evcc.session.V2GCommunicationSessionEVCC;\nimport com.v2gclarity.risev2g.shared.enumerations.GlobalValues;\nimport com.v2gclarity.risev2g.shared.enumerations.V2GMessages;\nimport com.v2gclarity.risev2g.shared.messageHandling.ReactionToIncomingMessage;\nimport com.v2gclarity.risev2g.shared.messageHandling.TerminateSession;\nimport com.v2gclarity.risev2g.shared.misc.TimeRestrictions;\nimport com.v2gclarity.risev2g.shared.utils.SecurityUtils;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.AuthorizationReqType;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.AuthorizationResType;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.ChargeParameterDiscoveryReqType;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.EVSEProcessingType;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.PaymentOptionType;\nimport com.v2gclarity.risev2g.shared.v2gMessages.msgDef.V2GMessage;\n\npublic class WaitForAuthorizationRes extends ClientState {\n\n\tpublic WaitForAuthorizationRes(V2GCommunicationSessionEVCC commSessionContext) {\n\t\tsuper(commSessionContext);\n\t}\n\n\t@Override\n\tpublic ReactionToIncomingMessage processIncomingMessage(Object message) {\n\t\tif (isIncomingMessageValid(message, AuthorizationResType.class)) {\n\t\t\tV2GMessage v2gMessageRes = (V2GMessage) message;\n\t\t\tAuthorizationResType authorizationRes = \n\t\t\t\t\t(AuthorizationResType) v2gMessageRes.getBody().getBodyElement().getValue();\n\t\t\t\n\t\t\tif (authorizationRes.getEVSEProcessing() == null)\n\t\t\t\treturn new TerminateSession(\"EVSEProcessing parameter of AuthorizationR",
    "// Template Source: BaseEntityCollectionResponse.java.tt\n// ------------------------------------------------------------------------------\n// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.\n// ------------------------------------------------------------------------------\n\npackage com.microsoft.graph.requests;\nimport com.microsoft.graph.models.ContactFolder;\n\nimport com.microsoft.graph.http.BaseCollectionResponse;\n\n// **NOTE** This file was generated by a tool and any changes will be overwritten.\n\n/**\n * The class for the Contact Folder Collection Response.\n */\npublic class ContactFolderCollectionResponse extends BaseCollectionResponse<ContactFolder> {\n\n}\n",
    "package pricing;\n\nimport org.configureme.ConfigurationManager;\nimport org.configureme.Environment;\nimport org.configureme.GlobalEnvironment;\nimport org.configureme.environments.DynamicEnvironment;\n\npublic class ShowPrice {\n\tpublic static void main(String a[]){\n\t\tshowPrice();\n\t\tshowPriceIn(\"USA\", GlobalEnvironment.INSTANCE);\n\t\tshowPriceIn(\"United Kingdom\", new DynamicEnvironment(\"europe\", \"uk\"));\n\t\tshowPriceIn(\"Germany\", new DynamicEnvironment(\"europe\", \"de\"));\n\t\tshowPriceIn(\"Austria\", new DynamicEnvironment(\"europe\", \"at\"));\n\t}\n\t\n\tprivate static void showPriceIn(String description, Environment environment){\n\t\tPricing pricing = new Pricing();\n\t\tConfigurationManager.INSTANCE.configure(pricing, environment);\n\t\tSystem.out.println(\"Price in \"+description+\" is \"+pricing.getProductPrice());\n\t}\n\t\n\tprivate static void showPrice(){\n\t\tPricing pricing = new Pricing();\n\t\tConfigurationManager.INSTANCE.configure(pricing);\n\t\tSystem.out.println(\"Please pay \"+pricing.getProductPrice());\n\t}\n}\n",
    "/*\n * This file is part of Sponge, licensed under the MIT License (MIT).\n *\n * Copyright (c) SpongePowered <https://www.spongepowered.org>\n * Copyright (c) contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage org.spongepowered.common.data.manipulator.block;\n\nimport static org.spongepowered.api.data.DataQuery.of;\n\nimport org.spongepowered.api.data.DataContainer;\nimport org.spongepowered.api.data.DataQuery;\nimport org.spongepowered.api.data.MemoryDataContainer;\nimport org.spongepowered.api.data.manipulator.block.SignaledOutputData;\nimport org.spongepowered.common.data.manipulator.AbstractIntData;\n\npublic class SpongeSignaledOutputData extends AbstractIntData<SignaledOutputData> implements SignaledOutputData {\n\n    public static final DataQuery OUTPUT_SIGNAL_STRENGTH = of(\"OutputSignalStrength\");\n\n    public SpongeSignaledOutputData() {\n        super(SignaledOutputData.class, 0, 0, 15);\n    }\n\n    @Override\n    public int getOutputSignal() {\n        return this.getValue();\n    }\n\n    @Override\n    public SignaledOutputData setOutputSignal(int signal) {\n        return this.setValue(signal);\n    }\n\n    @Override\n    public SignaledOutputData copy() {\n        return new SpongeSignaledOutputData().setValue(this.getValue());\n    }\n\n    @Override\n    public DataContainer toContainer() {\n        return new MemoryDataContainer().set(OUTPUT_SIGNAL_STRENGTH, this.getValue());\n    }\n}\n",
    "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage config;\n\nimport interfaces.*;\nimport java.sql.*;\nimport java.util.logging.*;\nimport javax.swing.*;\n\n/**\n *\n * @author Luis G\n */\npublic class Connector {\n\n    public Connector() {\n\n    }\n\n    protected boolean getData(String query, Callback callback) {\n        ResultSet rs = null;\n        Connection conn = null;\n        Statement stmt = null;\n        boolean isNull = false;\n        try {\n            connect();\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/escuela\", \"root\", \"\");\n            stmt = conn.createStatement();\n            rs = stmt.executeQuery(query);\n            for (int i = 0; rs.next(); i++) {\n                callback.callback(rs, i);\n            }\n            stmt.close();\n            conn.close();\n        } catch (SQLException ex) {\n            Logger.getLogger(Connector.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return isNull;\n    }\n\n    protected ResultSet getData(String query) {\n        ResultSet rs = null;\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            connect();\n            conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/escuela\", \"root\", \"\");\n            stmt = conn.createStatement();\n            rs = stmt.executeQuery(query);\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        return rs;\n    }\n\n    protected int executeQuery(String query) {\n        int id = -1;\n        try {\n            connect();\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/escuela\", \"root\", \"\");\n            Statement stmt = conn.createStatement();\n            id = stmt.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);\n            ResultSet rs = stmt.getGeneratedKeys();\n            if (rs.next()) {\n                id = rs.getInt(1);\n            }\n            stmt.close();\n            conn.close();\n        } catch (SQLException e) {\n            Logger.getLogger(Connector.class.getName()).log(Level.SEVERE, null, e);\n            switch (e.getErrorCode()) {\n                case 1062:\n                    JOptionPane.showMessageDialog(null, \"Ese correo ya esta registrado\", \"error\", 0);\n                    break;\n                case 1054:\n                    JOptionPane.showMessageDialog(null, \"El registro no existe\", \"error\", 0);\n                    break;\n                default:\n                    JOptionPane.showMessageDialog(null, \"A ocurrido un error \" + e, \"error\", 0);\n                    System.out.println(e);\n                    break;\n            }\n        }\n        return id;\n    }\n\n    private void connect() {\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        } catch (Exception e) {\n        }\n    }\n\n}\n",
    "package org.apache.shiro.grails.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.apache.shiro.authz.Permission;\n\n@Target({ElementType.FIELD, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface PermissionRequired {\n    Class<? extends Permission> type();\n\n    /**\n     * The name of the role required to be granted this authorization.\n     */\n    String target() default \"*\";\n\n    String actions() default \"\";\n}\n",
    "package engine;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Point;\n\npublic class CircleShape extends Shape {\n\n    double radius; //radius of shape\n\n    public CircleShape(double rad, Vector2D v, double r, double d, Color c) {\n        super(v, r, d, c);\n        radius = rad;\n    }\n\n    @Override\n    public void calculateInertia() {\n        mass = radius * radius * Math.PI * density;\n        inertia = radius * radius * mass;\n    }\n\n    @Override\n    public void paint(Graphics2D g) {\n        super.paint(g);\n        vector.readyPoint();\n        g.fillOval((int) (x - radius), (int) (y - radius), (int) radius * 2, (int) radius * 2);\n        g.drawOval((int) (x - radius), (int) (y - radius), (int) radius * 2, (int) radius * 2);\n        g.setColor(Color.BLACK);\n        g.drawLine((int) (x), (int) (y), (int) (x + Math.cos(rotation) * radius), (int) (y + Math.sin(rotation) * radius));\n    }\n\n    @Override\n    public boolean contains(Point.Double p) {\n        return p.distanceSq(x, y) < radius * radius;\n    }\n\n}\n",
    "// This file is automatically generated.\n\npackage adila.db;\n\n/*\n * Alcatel POP 2 (5)\n *\n * DEVICE: alto5\n * MODEL: 7043K\n */\nfinal class alto5_7043k {\n    public static final String DATA = \"Alcatel|POP 2 (5)|\";\n}\n",
    "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nclass ProteinTranslator {\n  private static final Integer CODON_LENGTH = 3;\n  private static final Map<String, String> CODON_TO_PROTEIN =\n      Map.ofEntries(\n          Map.entry(\"AUG\", \"Methionine\"),\n          Map.entry(\"UUU\", \"Phenylalanine\"),\n          Map.entry(\"UUC\", \"Phenylalanine\"),\n          Map.entry(\"UUA\", \"Leucine\"),\n          Map.entry(\"UUG\", \"Leucine\"),\n          Map.entry(\"UCU\", \"Serine\"),\n          Map.entry(\"UCC\", \"Serine\"),\n          Map.entry(\"UCA\", \"Serine\"),\n          Map.entry(\"UCG\", \"Serine\"),\n          Map.entry(\"UAU\", \"Tyrosine\"),\n          Map.entry(\"UAC\", \"Tyrosine\"),\n          Map.entry(\"UGU\", \"Cysteine\"),\n          Map.entry(\"UGC\", \"Cysteine\"),\n          Map.entry(\"UGG\", \"Tryptophan\"));\n  private static final Set<String> STOP_CODONS = Set.of(\"UAA\", \"UAG\", \"UGA\");\n\n  public List<String> translate(final String rnaSequence) {\n    final List<String> codons = splitIntoCodons(rnaSequence);\n    List<String> proteins = new ArrayList<>();\n    for (String codon : codons) {\n      if (STOP_CODONS.contains(codon)) {\n        return proteins;\n      }\n      proteins.add(translateCodon(codon));\n    }\n    ;\n    return proteins;\n  }\n\n  private static List<String> splitIntoCodons(final String rnaSequence) {\n    final List<String> codons = new ArrayList<>();\n    for (int i = 0; i < rnaSequence.length(); i += CODON_LENGTH) {\n      codons.add(rnaSequence.substring(i, Math.min(rnaSequence.length(), i + CODON_LENGTH)));\n    }\n    return codons;\n  }\n\n  private static String translateCodon(final String codon) {\n    return CODON_TO_PROTEIN.get(codon);\n  }\n}\n",
    "package com.github.kolandroid.kol.model.elements.basic;\n\nimport com.github.kolandroid.kol.model.elements.interfaces.ModelGroup;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class BasicGroup<E> implements ModelGroup<E> {\n    /**\n     * Autogenerated by eclipse.\n     */\n    private static final long serialVersionUID = 356357357356695L;\n\n    private final ArrayList<E> items;\n    private final String name;\n\n    public BasicGroup(String name) {\n        this(name, new ArrayList<E>());\n    }\n\n    public BasicGroup(String name, ArrayList<E> items) {\n        this.name = name;\n        this.items = items;\n    }\n\n    @Override\n    public int size() {\n        return items.size();\n    }\n\n    @Override\n    public E get(int index) {\n        return items.get(index);\n    }\n\n    @Override\n    public void set(int index, E value) {\n        items.set(index, value);\n    }\n\n    @Override\n    public void remove(int index) {\n        items.remove(index);\n    }\n\n    public void add(E item) {\n        items.add(item);\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public Iterator<E> iterator() {\n        return items.iterator();\n    }\n}\n",
    "package org.winterblade.minecraft.harmony.api.questing;\n\nimport org.winterblade.minecraft.scripting.api.IScriptObjectDeserializer;\nimport org.winterblade.minecraft.scripting.api.ScriptObjectDeserializer;\n\n/**\n * Created by Matt on 5/29/2016.\n */\npublic enum QuestStatus {\n    INVALID, ACTIVE, LOCKED, COMPLETE, CLOSED;\n\n    @ScriptObjectDeserializer(deserializes = QuestStatus.class)\n    public static class Deserializer implements IScriptObjectDeserializer {\n\n        @Override\n        public Object Deserialize(Object input) {\n            if(!String.class.isAssignableFrom(input.getClass())) return null;\n            return QuestStatus.valueOf(input.toString().toUpperCase());\n        }\n    }\n}\n",
    "package leetcode11_20;\n\n/**Given a linked list, remove the nth node from the end of list and return its head.\n For example, Given linked list: 1->2->3->4->5, and n = 2.\n After removing the second node from the end, the linked list becomes 1->2->3->5.\n Note: Given n will always be valid. Try to do this in one pass.\n */\npublic class RemoveNthFromEnd {\n\n    // Definition for singly-linked list.\n    public static class ListNode {\n        int val;\n        ListNode next;\n        ListNode(int x) { val = x; }\n    }\n\n    //one pass\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode slow = dummy, fast = dummy;\n        //Move fast in front so that the gap between slow and fast becomes n\n        for(int i=1; i<=n+1; i++) { //TODO \u6ce8\u610f\u8fb9\u754c\n            fast = fast.next;\n        }\n        while(fast != null) {//Move fast to the end, maintaining the gap\n            slow = slow.next;\n            fast = fast.next;\n        }\n        slow.next = slow.next.next;//Skip the desired node\n        return dummy.next;\n    }\n\n    //two pass\n    public ListNode removeNthFromEnd1(ListNode head, int n) {\n        int length = 0;\n        ListNode temp = head;\n        while (temp != null){\n            length++;\n            temp = temp.next;\n        }\n        if (n == length) return head.next;\n        temp = head;\n        for (int i = 2; i <= length - n; i++){  //TODO \u5faa\u73af\u6761\u4ef6\u6781\u6613\u51fa\u9519\n            temp = temp.next;\n        }\n        temp.next = temp.next.next;\n        return head;\n    }\n\n}\n",
    "package org.kohsuke.github;\n\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport static java.lang.String.*;\n\n/**\n * Release in a github repository.\n *\n * @see GHRepository#getReleases() GHRepository#getReleases()\n * @see GHRepository#listReleases() () GHRepository#listReleases()\n * @see GHRepository#createRelease(String) GHRepository#createRelease(String)\n */\npublic class GHRelease extends GHObject {\n    GHRepository owner;\n\n    private String html_url;\n    private String assets_url;\n    private List<GHAsset> assets;\n    private String upload_url;\n    private String tag_name;\n    private String target_commitish;\n    private String name;\n    private String body;\n    private boolean draft;\n    private boolean prerelease;\n    private Date published_at;\n    private String tarball_url;\n    private String zipball_url;\n    private String discussion_url;\n\n    /**\n     * Gets discussion url. Only present if a discussion relating to the release exists\n     *\n     * @return the discussion url\n     */\n    public String getDiscussionUrl() {\n        return discussion_url;\n    }\n\n    /**\n     * Gets assets url.\n     *\n     * @return the assets url\n     */\n    public String getAssetsUrl() {\n        return assets_url;\n    }\n\n    /**\n     * Gets body.\n     *\n     * @return the body\n     */\n    public String getBody() {\n        return body;\n    }\n\n    /**\n     * Is draft boolean.\n     *\n     * @return the boolean\n     */\n    public boolean isDraft() {\n        return draft;\n    }\n\n    /**\n     * Sets draft.\n     *\n     * @param draft\n     *            the draft\n     * @return the draft\n     * @throws IOException\n     *             the io exception\n     * @deprecated Use {@link #update()}\n     */\n    @Deprecated\n    public GHRelease setDraft(boolean draft) throws IOException {\n        return update().draft(draft).update();\n    }\n\n    public URL getHtmlUrl() {\n        return GitHubClient.parseURL(html_url);\n    }\n\n    /**\n     * Gets name.\n     *\n     * @return the name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Sets name.\n     *\n     * @param name\n     *            the name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Gets owner.\n     *\n     * @return the owner\n     */\n    @SuppressFBWarnings(value = { \"EI_EXPOSE_REP\" }, justification = \"Expected behavior\")\n    public GHRepository getOwner() {\n        return owner;\n    }\n\n    /**\n     * Sets owner.\n     *\n     * @param owner\n     *            the owner\n     * @deprecated Do not use this method. It was added due to incomplete understanding of Jackson binding.\n     */\n    @Deprecated\n    public void setOwner(GHRepository owner) {\n        throw new RuntimeException(\"Do not use this method",
    "package com.lynx.service;\n\nimport java.util.Collection;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.stereotype.Service;\n\nimport com.lynx.domain.User;\nimport com.lynx.repository.UserRepository;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class UserService {\n\n\t@Autowired\n\tprivate UserRepository userRepository;\n\n\tpublic Optional<User> getUserById(String id) {\n\t\tlog.debug(\"Getting user={}\", id);\n\t\treturn Optional.ofNullable(userRepository.findOne(id));\n\t}\n\n\tpublic Optional<User> getUserByEmail(String email) {\n\t\tlog.debug(\"Getting user by email={}\", email.replaceFirst(\"@.*\", \"@***\"));\n\t\treturn userRepository.findOneByEmail(email);\n\t}\n\n\tpublic Collection<User> getAllUsers() {\n\t\tlog.debug(\"Getting all users\");\n\t\treturn userRepository.findAll(new Sort(\"email\"));\n\t}\n\n\tpublic User create(User user) {\n\t\treturn userRepository.save(user);\n\t}\n\n}\n",
    "//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 \n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n// Any modifications to this file will be lost upon recompilation of the source schema. \n// Generated on: 2016.09.02 at 01:00:06 PM UYT \n//\n\n\npackage dgi.classes.respuestas.reporte;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for RSAKeyValueType complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType name=\"RSAKeyValueType\">\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;sequence>\n *         &lt;element name=\"Modulus\" type=\"{http://www.w3.org/2000/09/xmldsig#}CryptoBinary\"/>\n *         &lt;element name=\"Exponent\" type=\"{http://www.w3.org/2000/09/xmldsig#}CryptoBinary\"/>\n *       &lt;/sequence>\n *     &lt;/restriction>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"RSAKeyValueType\", propOrder = {\n    \"modulus\",\n    \"exponent\"\n})\npublic class RSAKeyValueType {\n\n    @XmlElement(name = \"Modulus\", required = true)\n    protected byte[] modulus;\n    @XmlElement(name = \"Exponent\", required = true)\n    protected byte[] exponent;\n\n    /**\n     * Gets the value of the modulus property.\n     * \n     * @return\n     *     possible object is\n     *     byte[]\n     */\n    public byte[] getModulus() {\n        return modulus;\n    }\n\n    /**\n     * Sets the value of the modulus property.\n     * \n     * @param value\n     *     allowed object is\n     *     byte[]\n     */\n    public void setModulus(byte[] value) {\n        this.modulus = value;\n    }\n\n    /**\n     * Gets the value of the exponent property.\n     * \n     * @return\n     *     possible object is\n     *     byte[]\n     */\n    public byte[] getExponent() {\n        return exponent;\n    }\n\n    /**\n     * Sets the value of the exponent property.\n     * \n     * @param value\n     *     allowed object is\n     *     byte[]\n     */\n    public void setExponent(byte[] value) {\n        this.exponent = value;\n    }\n\n}\n",
    "package cn.jzvd.demo;\n\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AbsListView;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.bumptech.glide.Glide;\n\nimport cn.jzvd.Jzvd;\nimport cn.jzvd.JzvdStd;\n\n/**\n * Created by Nathen\n * On 2016/05/23 21:34\n */\npublic class ActivityListViewMultiHolder extends AppCompatActivity {\n    ListView listView;\n    VideoListAdapter mAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_listview_normal);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setDisplayShowTitleEnabled(true);\n        getSupportActionBar().setDisplayUseLogoEnabled(false);\n        getSupportActionBar().setTitle(\"MultiHolderListView\");\n\n\n        listView = findViewById(R.id.listview);\n        mAdapter = new VideoListAdapter(this);\n        listView.setAdapter(mAdapter);\n\n        listView.setOnScrollListener(new AbsListView.OnScrollListener() {\n            @Override\n            public void onScrollStateChanged(AbsListView view, int scrollState) {\n\n            }\n\n            @Override\n            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\n                if (Jzvd.CURRENT_JZVD == null) return;\n                int lastVisibleItem = firstVisibleItem + visibleItemCount;\n                int currentPlayPosition = Jzvd.CURRENT_JZVD.positionInList;\n//                Log.e(TAG, \"onScrollReleaseAllVideos: \" +\n//                        currentPlayPosition + \" \" + firstVisibleItem + \" \" + currentPlayPosition + \" \" + lastVisibleItem);\n                if (currentPlayPosition >= 0) {\n                    if ((currentPlayPosition < firstVisibleItem || currentPlayPosition > (lastVisibleItem - 1))) {\n                        if (Jzvd.CURRENT_JZVD.screen != Jzvd.SCREEN_FULLSCREEN) {\n                            Jzvd.releaseAllVideos();//\u4e3a\u4ec0\u4e48\u6700\u540e\u4e00\u4e2a\u89c6\u9891\u6a2a\u5c4f\u4f1a\u8c03\u7528\u8fd9\u4e2a\uff0c\u5176\u4ed6\u5730\u65b9\u4e0d\u4f1a\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (Jzvd.backPress()) {\n            return;\n        }\n        super.onBackPressed();\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        Jzvd.releaseAllVideos();\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                finish();\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    public class VideoListAdapter extends BaseAdapter {\n\n        ",
    "package com.yngvark.communicate_through_named_pipes.input;\n\nimport org.slf4j.Logger;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\nimport static org.slf4j.LoggerFactory.getLogger;\n\npublic class InputFileReader {\n    private final Logger logger = getLogger(getClass());\n    private final BufferedReader bufferedReader;\n\n    private boolean run = true;\n    private boolean streamClosed = false;\n\n    public InputFileReader(BufferedReader bufferedReader) {\n        this.bufferedReader = bufferedReader;\n    }\n\n    /**\n     * @throws IORuntimeException If an {@link java.io.IOException} occurs.\n     */\n    public void consume(MessageListener messageListener) throws RuntimeException {\n        logger.debug(\"Consume: start.\");\n\n        try {\n            tryToConsume(messageListener);\n        } catch (IOException e) {\n            throw new IORuntimeException(e);\n        }\n\n        logger.debug(\"\");\n        logger.debug(\"Consume: done.\");\n    }\n\n    private void tryToConsume(MessageListener messageListener) throws IOException {\n        String msg = null;\n        while (run) {\n            msg = bufferedReader.readLine();\n            if (msg == null)\n                break;\n\n            logger.trace(\"<<< From other side: \" + msg);\n            messageListener.messageReceived(msg);\n        }\n\n        if (msg == null) {\n            logger.debug(\"Consume file stream was closed from other side.\");\n        }\n\n        bufferedReader.close();\n    }\n\n    public synchronized void closeStream() {\n        logger.debug(\"Stopping consuming input file...\");\n        if (streamClosed) {\n            logger.info(\"Already stopped.\");\n            return;\n        }\n\n        run = false;\n        try {\n            logger.trace(\"Closing buffered reader.\");\n            bufferedReader.close();\n            streamClosed = true;\n        } catch (IOException e) {\n            logger.error(\"Caught exception when closing stream: {}\", e);\n        }\n\n        logger.debug(\"Stopping consuming input file... done\");\n    }\n}\n",
    "package com.yunpian.sdk.model;\n\n/**\n * Created by bingone on 15/11/8.\n */\npublic class VoiceSend extends BaseInfo {\n\n}\n",
    "package com.ipvans.flickrgallery.ui.main;\n\nimport android.util.Log;\n\nimport com.ipvans.flickrgallery.data.SchedulerProvider;\nimport com.ipvans.flickrgallery.di.PerActivity;\nimport com.ipvans.flickrgallery.domain.FeedInteractor;\nimport com.ipvans.flickrgallery.domain.UpdateEvent;\n\nimport java.util.concurrent.TimeUnit;\n\nimport javax.inject.Inject;\n\nimport io.reactivex.Observable;\nimport io.reactivex.disposables.CompositeDisposable;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.subjects.BehaviorSubject;\nimport io.reactivex.subjects.PublishSubject;\n\nimport static com.ipvans.flickrgallery.ui.main.MainViewState.*;\n\n@PerActivity\npublic class MainPresenterImpl implements MainPresenter<MainViewState> {\n\n    private final FeedInteractor interactor;\n    private final SchedulerProvider schedulers;\n\n    private BehaviorSubject<MainViewState> stateSubject = BehaviorSubject.createDefault(empty());\n    private PublishSubject<UpdateEvent> searchSubject = PublishSubject.create();\n\n    private Disposable disposable = new CompositeDisposable();\n\n    @Inject\n    public MainPresenterImpl(FeedInteractor interactor, SchedulerProvider schedulers) {\n        this.interactor = interactor;\n        this.schedulers = schedulers;\n    }\n\n    @Override\n    public void onAttach() {\n        Observable.combineLatest(searchSubject\n                        .debounce(150, TimeUnit.MILLISECONDS, schedulers.io())\n                        .doOnNext(interactor::getFeed),\n                interactor.observe(),\n                (tags, feed) -> new MainViewState(feed.isLoading(),\n                        feed.getError(), feed.getData(), tags.getTags()))\n                .withLatestFrom(stateSubject,\n                        (newState, oldState) -> new MainViewState(\n                                newState.isLoading(), newState.getError(),\n                                newState.getData() != null ? newState.getData() : oldState.getData(),\n                                newState.getTags()\n                        ))\n                .observeOn(schedulers.io())\n                .subscribeWith(stateSubject)\n                .onSubscribe(disposable);\n    }\n\n    @Override\n    public void onDetach() {\n        disposable.dispose();\n    }\n\n    @Override\n    public void restoreState(MainViewState data) {\n        stateSubject.onNext(data);\n    }\n\n    @Override\n    public Observable<MainViewState> observe() {\n        return stateSubject;\n    }\n\n    @Override\n    public MainViewState getLatestState() {\n        return stateSubject.getValue();\n    }\n\n    @Override\n    public void search(String tags, boolean force) {\n        searchSubject.onNext(new UpdateEvent(tags, force));\n    }\n}\n",
    "package aaron.org.anote.viewbinder;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class DynamicActivity extends Activity {\n    @Override\n    public void onCreate(Bundle savedInstance) {\n        super.onCreate(savedInstance);\n        Layout.start(this);\n    }\n}\n",
    "/*\n * Copyright (c) 2005 Dizan Vasquez.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\npackage net.jenet;\n\nimport java.nio.ByteBuffer;\n\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.commons.lang.builder.ToStringStyle;\n\n/**\n * Wraps information to be sent through JeNet.\n * @author Dizan Vasquez\n */\npublic class Packet implements IBufferable {\n\n        /**\n         * Indicates that this packet is reliable\n         */\n        public static final int FLAG_RELIABLE = 1;\n\n        /**\n         * Indicates that the packet should be processed no \n         * matter its order relative to other packets.\n         */\n        public static final int FLAG_UNSEQUENCED = 2;\n\n        protected int referenceCount;\n\n        protected int flags;\n\n        protected ByteBuffer data;\n\n        protected int dataLength;\n\n        private Packet() {\n                super();\n        }\n\n        /**\n         * Creates a new Packet.\n         * The constructor allocates a new packet and allocates a\n         * buffer of <code>dataLength</code> bytes for it.\n         * \n         * @param dataLength\n         *                      The size in bytes of this packet.\n         * @param flags\n         *                      An byte inidicating the how to handle this packet.\n         */\n        public Packet( int dataLength, int flags ) {\n                data = ByteBuffer.allocateDirect( dataLength );\n                this.dataLength = dataLength;\n                this.flags = flags;\n        }\n        \n        /**\n         * Copies this packet's data into the given buffer.\n         * @param buffer\n         *              Destination buffer\n         */\n        public void toBuffer( ByteBuffer buffer ) {\n                data.flip();\n                for ( int i = 0; i < dataLength; i++ ) {\n                        buffer.put( data.get() );\n                }\n        }\n\n        /**\n         * Copies part of this packet's data into the given buffer.\n     ",
    "package com.aspose.cloud.sdk.cells.model;\n\npublic enum ValidFormatsForDocumentEnum {\n\tcsv, \n\txlsx, \n\txlsm, \n\txltx,\t\n\txltm,\t\n\ttext, \n\thtml,\n\tpdf, \n\tods, \n\txls, \n\tspreadsheetml, \n\txlsb, \n\txps, \n\ttiff,\n\tjpeg, \n\tpng, \n\temf, \n\tbmp, \n\tgif \n}\n",
    "package ch.hesso.master.caldynam;\n\nimport android.app.Fragment;\nimport android.app.FragmentManager;\nimport android.app.FragmentTransaction;\nimport android.graphics.Outline;\nimport android.os.Bundle;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.ViewOutlineProvider;\nimport android.view.animation.Animation;\nimport android.view.animation.Transformation;\nimport android.widget.Toast;\n\nimport ch.hesso.master.caldynam.ui.fragment.FoodAddFragment;\nimport ch.hesso.master.caldynam.ui.fragment.FoodCatalogFragment;\nimport ch.hesso.master.caldynam.ui.fragment.FoodViewFragment;\nimport ch.hesso.master.caldynam.ui.fragment.LoggingFragment;\nimport ch.hesso.master.caldynam.ui.fragment.NavigationDrawerFragment;\nimport ch.hesso.master.caldynam.ui.fragment.SummaryFragment;\nimport ch.hesso.master.caldynam.ui.fragment.WeightMeasurementFragment;\nimport me.drakeet.materialdialog.MaterialDialog;\n\npublic class MainActivity extends ActionBarActivity implements\n        NavigationDrawerFragment.NavigationDrawerCallbacks,\n        SummaryFragment.OnFragmentInteractionListener,\n        WeightMeasurementFragment.OnFragmentInteractionListener,\n        LoggingFragment.OnFragmentInteractionListener,\n        FoodCatalogFragment.OnFragmentInteractionListener,\n        FoodAddFragment.OnFragmentInteractionListener,\n        FoodViewFragment.OnFragmentInteractionListener {\n\n    private Fragment fragment = null;\n\n    /**\n     * Fragment managing the behaviors, interactions and presentation of the navigation drawer.\n     */\n    private NavigationDrawerFragment mNavigationDrawerFragment;\n\n    /**\n     * Used to store the last screen title. For use in {@link #updateToolbar()}.\n     */\n    private CharSequence mTitle;\n\n    private Toolbar mToolbar;\n\n    private View mFabButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Handle Toolbar\n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setHomeButtonEnabled(true);\n\n\n        // Handle different Drawer States :D\n//        mDrawerLayout.setDrawerListener(mActionBarDrawerToggle);\n\n        // Fab Button\n        mFabButton = findViewById(R.id.fab_button);\n        mFabButton.setOnClickListener(fabClickListener);\n\n        mFabButton.setOutlineProvider(new ViewOutlineProvider() {\n            @Override\n            public void getOutline(View view, Outline outline) {\n                int size = getResources().getDimensionPixelSize(R.dimen.fab_size);\n                outline.setOval(0, 0, size, size);\n           ",
    "/**\n * The MIT License\n * Copyright (c) 2003 David G Jones\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage info.dgjones.abora.white.edgeregion;\n\nimport java.io.PrintWriter;\n\nimport info.dgjones.abora.white.rcvr.Rcvr;\nimport info.dgjones.abora.white.rcvr.Xmtr;\nimport info.dgjones.abora.white.spaces.basic.Position;\nimport info.dgjones.abora.white.xpp.basic.Heaper;\n\n/**\n * Clients of EdgeManager define concrete subclasses of this, which are then used by the\n * EdgeManager code\n */\npublic abstract class TransitionEdge extends Heaper {\n\t/*\n\tudanax-top.st:63348:\n\tHeaper subclass: #TransitionEdge\n\t\tinstanceVariableNames: ''\n\t\tclassVariableNames: ''\n\t\tpoolDictionaries: ''\n\t\tcategory: 'Xanadu-EdgeRegion'!\n\t*/\n\t/*\n\tudanax-top.st:63352:\n\tTransitionEdge comment:\n\t'Clients of EdgeManager define concrete subclasses of this, which are then used by the EdgeManager code'!\n\t*/\n\t/*\n\tudanax-top.st:63354:\n\t(TransitionEdge getOrMakeCxxClassDescription)\n\t\tattributes: ((Set new) add: #DEFERRED; add: #COPY; yourself)!\n\t*/\n\n\t/////////////////////////////////////////////\n\t// Constructors\n\t\n\tprotected TransitionEdge() {\n\t\tsuper();\n\t}\n\n\tpublic TransitionEdge ceiling(TransitionEdge other) {\n\t\tif (other.isGE(this)) {\n\t\t\treturn other;\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t\t/*\n\t\tudanax-top.st:63359:TransitionEdge methodsFor: 'accessing'!\n\t\t{TransitionEdge} ceiling: other {TransitionEdge}\n\t\t\t(other isGE: self)\n\t\t\t\tifTrue: [^other]\n\t\t\t\tifFalse: [^self]!\n\t\t*/\n\t}\n\n\tpublic TransitionEdge floor(TransitionEdge other) {\n\t\tif (isGE(other)) {\n\t\t\treturn other;\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t\t/*\n\t\tudanax-top.st:63365:TransitionEdge methodsFor: 'accessing'!\n\t\t{TransitionEdge} floor: other {TransitionEdge}\n\t\t\t(self isGE: other)\n\t\t\t\tifTrue: [^other]\n\t\t\t\tifFalse: [^self]!\n\t\t*/\n\t}\n\n\tpublic int actualHashForEqual() {\n\t\treturn System.identityHashCode(this);\n//\t\treturn Heaper.takeOop();\n\t\t/*\n\t\tudanax-top.st:63373:TransitionEdge methodsFor: 'testing'!\n\t\t{UInt32} actualHashForEqual\n\t\t\t^",
    "/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n */\n\npackage com.microsoft.azure.management.resources.implementation;\n\nimport com.microsoft.azure.management.resources.ResourceGroupProperties;\nimport java.util.Map;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n/**\n * Resource group information.\n */\npublic class ResourceGroupInner {\n    /**\n     * The ID of the resource group.\n     */\n    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String id;\n\n    /**\n     * The name of the resource group.\n     */\n    private String name;\n\n    /**\n     * The properties property.\n     */\n    private ResourceGroupProperties properties;\n\n    /**\n     * The location of the resource group. It cannot be changed after the\n     * resource group has been created. It muct be one of the supported Azure\n     * locations.\n     */\n    @JsonProperty(required = true)\n    private String location;\n\n    /**\n     * The ID of the resource that manages this resource group.\n     */\n    private String managedBy;\n\n    /**\n     * The tags attached to the resource group.\n     */\n    private Map<String, String> tags;\n\n    /**\n     * Get the id value.\n     *\n     * @return the id value\n     */\n    public String id() {\n        return this.id;\n    }\n\n    /**\n     * Get the name value.\n     *\n     * @return the name value\n     */\n    public String name() {\n        return this.name;\n    }\n\n    /**\n     * Set the name value.\n     *\n     * @param name the name value to set\n     * @return the ResourceGroupInner object itself.\n     */\n    public ResourceGroupInner withName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    /**\n     * Get the properties value.\n     *\n     * @return the properties value\n     */\n    public ResourceGroupProperties properties() {\n        return this.properties;\n    }\n\n    /**\n     * Set the properties value.\n     *\n     * @param properties the properties value to set\n     * @return the ResourceGroupInner object itself.\n     */\n    public ResourceGroupInner withProperties(ResourceGroupProperties properties) {\n        this.properties = properties;\n        return this;\n    }\n\n    /**\n     * Get the location value.\n     *\n     * @return the location value\n     */\n    public String location() {\n        return this.location;\n    }\n\n    /**\n     * Set the location value.\n     *\n     * @param location the location value to set\n     * @return the ResourceGroupInner object itself.\n     */\n    public ResourceGroupInner withLocation(String location) {\n        this.location = location;\n        return this;\n    }\n\n    /**\n     * Get the managedBy value.\n     *\n     * @return the managedBy value\n     */\n    public String managedBy() {\n        return this.managedBy;\n    }\n\n    /**\n     * Set the managedBy value.\n     *\n     * @param managedBy the managedBy val",
    "package uk.gov.dvsa.ui.pages.vehicleinformation;\n\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport uk.gov.dvsa.domain.model.vehicle.Make;\nimport uk.gov.dvsa.domain.navigation.PageNavigator;\nimport uk.gov.dvsa.framework.config.webdriver.MotAppDriver;\nimport uk.gov.dvsa.helper.FormDataHelper;\nimport uk.gov.dvsa.helper.PageInteractionHelper;\nimport uk.gov.dvsa.ui.pages.Page;\n\npublic class VehicleMakePage extends Page {\n\n    private static final String PAGE_TITLE = \"What is the vehicle's make?\";\n    public static final String PATH = \"/create-vehicle/make\";\n\n    @FindBy(id = \"vehicleMake\") private WebElement vehicleMakeDropdown;\n    @FindBy(className = \"button\") private WebElement continueButton;\n\n    public VehicleMakePage(MotAppDriver driver) {\n        super(driver);\n        selfVerify();\n    }\n\n    @Override\n    protected boolean selfVerify() {\n        return PageInteractionHelper.verifyTitle(this.getTitle(), PAGE_TITLE);\n    }\n\n    public VehicleMakePage selectMake(Make make){\n        FormDataHelper.selectFromDropDownByValue(vehicleMakeDropdown, make.getId().toString());\n        vehicleMakeDropdown.sendKeys(Keys.TAB);\n        return this;\n    }\n\n    public VehicleModelPage continueToVehicleModelPage() {\n        continueButton.click();\n        return new VehicleModelPage(driver);\n    }\n\n    public VehicleModelPage updateVehicleMake(Make make) {\n        FormDataHelper.selectFromDropDownByValue(vehicleMakeDropdown, make.getId().toString());\n        vehicleMakeDropdown.sendKeys(Keys.TAB);\n        return continueToVehicleModelPage();\n    }\n}\n",
    "package io.prajesh.config;\n\nimport io.prajesh.domain.HelloWorld;\nimport io.prajesh.service.HelloWorldService;\nimport io.prajesh.service.HelloWorldServiceImpl;\nimport io.prajesh.service.factory.HelloWorldFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n/**\n * @author Prajesh Ananthan\n *         Created on 16/7/2017.\n */\n@Configuration\npublic class HelloConfig {\n\n  @Bean\n  public HelloWorldFactory helloWorldFactory() {\n    return new HelloWorldFactory();\n  }\n\n  @Bean\n  public HelloWorldService helloWorldService() {\n    return new HelloWorldServiceImpl();\n  }\n\n  @Bean\n  @Profile(\"English\")\n  public HelloWorld helloWorldEn(HelloWorldFactory factory) {\n    return factory.getHelloWorldFactory(\"en\");\n  }\n\n  @Bean\n  @Profile(\"Malay\")\n  public HelloWorld helloWorldMy(HelloWorldFactory factory) {\n    return factory.getHelloWorldFactory(\"my\");\n  }\n}\n",
    "package sql.fredy.sqltools;\n\n/**\n   XLSExport exports the result of a query into a XLS-file. To do this it is\n   using HSSF from the Apache POI Project: http://jakarta.apache.org/poi\n \n   Version 1.0 Date 7. aug. 2003 Author Fredy Fischer\n \n   XLSExport is part of the Admin-Suite  \n \n   Once instantiated there are the following steps to go to get a XLS-file out\n   of a query\n \n   XLSExport xe = new XLSExport(java.sql.Connection con)\n   xe.setQuery(java.lang.String query) please set herewith the the query to get\n   its results as XLS-file\n \n   int xe.createXLS(java.lang.String fileName) this will then create the\n   XLS-File. If this file already exists, it will be overwritten!\n \n   it returns the number of rows written to the File\n  \n   2015-11-16 Creating an additional Worksheet containing the SQL-Query\n \n \n   Admin is a Tool around SQL to do basic jobs for DB-Administrations, like: -\n   create/ drop tables - create indices - perform sql-statements - simple form -\n   a guided query and a other usefull things in DB-arena\n \n   Copyright (c) 2017 Fredy Fischer, sql@hulmen.ch\n    \n   Permission is hereby granted, free of charge, to any person obtaining a copy \n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n  \n   The above copyright notice and this permission notice shall be included in\n   all copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n */\nimport sql.fredy.share.t_connect;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\nimport java.sql.*;\nimport java.util.logging.*;\nimport java.util.Date;\n\nimport org.apache.poi.xssf.usermodel.*;\nimport org.apache.poi.hssf.record.*;\nimport org.apache.poi.hssf.model.*;\nimport org.apache.poi.hssf.usermodel.*;\nimport org.apache.poi.hssf.util.*;\n\nimport java.util.ArrayList;\n\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellStyle;\nimport org.apache.poi.ss.usermodel.CreationHelper;\nimport org.apache.poi.ss.usermodel.Font;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.xssf.streaming.SXSSFS",
    "/*\r\n * Copyright (c) 2015. Vin @ vinexs.com (MIT License)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\npackage com.vinexs.view;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.graphics.Canvas;\r\nimport android.util.AttributeSet;\r\nimport android.view.MotionEvent;\r\nimport android.view.ScaleGestureDetector;\r\nimport android.widget.LinearLayout;\r\n\r\n@SuppressWarnings(\"unused\")\r\npublic class ScalableLinearLayout extends LinearLayout {\r\n\r\n    private ScaleGestureDetector scaleDetector;\r\n    private float scaleFactor = 1.f;\r\n\r\n    private float maxScaleFactor = 1.5f;\r\n    private float minScaleFactor = 0.5f;\r\n\r\n    public ScalableLinearLayout(Context context) {\r\n        super(context);\r\n        scaleDetector = new ScaleGestureDetector(context, new ScaleListener());\r\n    }\r\n\r\n    public ScalableLinearLayout(Context context, AttributeSet attrs) {\r\n        super(context, attrs);\r\n        scaleDetector = new ScaleGestureDetector(context, new ScaleListener());\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    @Override\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        // Let the ScaleGestureDetector inspect all events.\r\n        scaleDetector.onTouchEvent(event);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void dispatchDraw(Canvas canvas) {\r\n\r\n        canvas.save();\r\n        canvas.scale(scaleFactor, scaleFactor);\r\n        super.dispatchDraw(canvas);\r\n        canvas.restore();\r\n    }\r\n\r\n    public ScalableLinearLayout setMaxScale(float scale) {\r\n        maxScaleFactor = scale;\r\n        return this;\r\n    }\r\n\r\n    public ScalableLinearLayout setMinScale(float scale) {\r\n        minScaleFactor = scale;\r\n        return this;\r\n    }\r\n\r\n    public ScaleGestureDetector getScaleGestureDetector() {\r\n        return scaleDetector;\r\n    }\r\n\r\n    private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\r\n        @Override\r\n     ",
    "/*\n * Copyright (c) 2016-2017 Mozilla Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\npackage nu.validator.xml;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.DTDHandler;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.ErrorHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXNotRecognizedException;\nimport org.xml.sax.SAXNotSupportedException;\nimport org.xml.sax.XMLReader;\n\npublic final class UseCountingXMLReaderWrapper\n        implements XMLReader, ContentHandler {\n\n    private final XMLReader wrappedReader;\n\n    private ContentHandler contentHandler;\n\n    private ErrorHandler errorHandler;\n\n    private HttpServletRequest request;\n\n    private StringBuilder documentContent;\n\n    private boolean inBody;\n\n    private boolean loggedLinkWithCharset;\n\n    private boolean loggedScriptWithCharset;\n\n    private boolean loggedStyleInBody;\n\n    private boolean loggedRelAlternate;\n\n    private boolean loggedRelAuthor;\n\n    private boolean loggedRelBookmark;\n\n    private boolean loggedRelCanonical;\n\n    private boolean loggedRelDnsPrefetch;\n\n    private boolean loggedRelExternal;\n\n    private boolean loggedRelHelp;\n\n    private boolean loggedRelIcon;\n\n    private boolean loggedRelLicense;\n\n    private boolean loggedRelNext;\n\n    private boolean loggedRelNofollow;\n\n    private boolean loggedRelNoopener;\n\n    private boolean loggedRelNoreferrer;\n\n    private boolean loggedRelPingback;\n\n    private boolean loggedRelPreconnect;\n\n    private boolean loggedRelPrefetch;\n\n    private boolean loggedRelPreload;\n\n    private boolean loggedRelPrerender;\n\n    private boolean loggedRelPrev;\n\n    private boolean loggedRelSearch;\n\n    private boolean loggedRelServiceworker;\n\n    private boolean loggedRelStyleshe",
    "/*\n * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n *\n * Copyright (c) SpongePowered <https://www.spongepowered.org>\n * Copyright (c) contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage org.spongepowered.api.data.types;\n\nimport org.spongepowered.api.CatalogType;\nimport org.spongepowered.api.util.annotation.CatalogedBy;\n\n/**\n * Represents a type of instrument.\n */\n@CatalogedBy(InstrumentTypes.class)\npublic interface InstrumentType extends CatalogType {\n\n}\n",
    "package components.diagram.edit.commands;\n\nimport org.eclipse.core.commands.ExecutionException;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.gmf.runtime.common.core.command.CommandResult;\nimport org.eclipse.gmf.runtime.common.core.command.ICommand;\nimport org.eclipse.gmf.runtime.emf.type.core.IElementType;\nimport org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;\nimport org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;\nimport org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;\nimport org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;\n\nimport components.Component;\nimport components.ComponentsFactory;\nimport components.Connection;\nimport components.Port;\nimport components.diagram.edit.policies.ComponentModelBaseItemSemanticEditPolicy;\n\n/**\n * @generated\n */\npublic class ConnectionCreateCommand extends EditElementCommand {\n\n\t/**\n\t* @generated\n\t*/\n\tprivate final EObject source;\n\n\t/**\n\t* @generated\n\t*/\n\tprivate final EObject target;\n\n\t/**\n\t* @generated\n\t*/\n\tprivate final Component container;\n\n\t/**\n\t* @generated\n\t*/\n\tpublic ConnectionCreateCommand(CreateRelationshipRequest request, EObject source, EObject target) {\n\t\tsuper(request.getLabel(), null, request);\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tcontainer = deduceContainer(source, target);\n\t}\n\n\t/**\n\t* @generated\n\t*/\n\tpublic boolean canExecute() {\n\t\tif (source == null && target == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (source != null && false == source instanceof Port) {\n\t\t\treturn false;\n\t\t}\n\t\tif (target != null && false == target instanceof Port) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getSource() == null) {\n\t\t\treturn true; // link creation is in progress; source is not defined yet\n\t\t}\n\t\t// target may be null here but it's possible to check constraint\n\t\tif (getContainer() == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ComponentModelBaseItemSemanticEditPolicy.getLinkConstraints().canCreateConnection_4001(getContainer(),\n\t\t\t\tgetSource(), getTarget());\n\t}\n\n\t/**\n\t* @generated\n\t*/\n\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n\t\tif (!canExecute()) {\n\t\t\tthrow new ExecutionException(\"Invalid arguments in create link command\"); //$NON-NLS-1$\n\t\t}\n\n\t\tConnection newElement = ComponentsFactory.eINSTANCE.createConnection();\n\t\tgetContainer().getConnections().add(newElement);\n\t\tnewElement.getTarget().add(getSource());\n\t\tnewElement.getTarget().add(getTarget());\n\t\tdoConfigure(newElement, monitor, info);\n\t\t((CreateElementRequest) getRequest()).setNewElement(newElement);\n\t\treturn CommandResult.newOKCommandResult(newElement);\n\n\t}\n\n\t/**\n\t* @generated\n\t*/\n\tprotected void doConfigure(Connection newElement, IProgressMonitor monitor, IAdaptable info)\n\t\t\tthrows ExecutionException {\n\t\tIElementType elementType = ((CreateElementRequest) getRequest()).getElementType();\n\t\tConfigureRequest configureRe",
    "package edu.gatech.oad.antlab.pkg1;\r\n\r\n\r\nimport edu.cs2335.antlab.pkg3.*;\r\nimport edu.gatech.oad.antlab.person.*;\r\nimport edu.gatech.oad.antlab.pkg2.*;\r\n\r\n\r\n/**\r\n * CS2335 Ant Lab\r\n *\r\n * Prints out a simple message gathered from all of the other classes\r\n * in the package structure\r\n */\r\n public class AntLabMain {\r\n    \r\n    /**antlab11.java message class*/\r\n    private AntLab11 ant11;\r\n    \r\n    /**antlab12.java message class*/\r\n    private AntLab12 ant12;\r\n    \r\n    /**antlab21.java message class*/\r\n    private AntLab21 ant21;\r\n    \r\n    /**antlab22.java message class*/\r\n    private AntLab22 ant22;\r\n    \r\n    /**antlab31 java message class which is contained in a jar resource file*/\r\n    private AntLab31 ant31;\r\n    \r\n    \r\n    \r\n    /**\r\n     * the constructor that intializes all the helper classes\r\n     */\r\n    public AntLabMain () {\r\n        \r\n        ant11 = new AntLab11();\r\n        ant12 = new AntLab12();\r\n        ant21 = new AntLab21();\r\n        ant22 = new AntLab22();\r\n        ant31 = new AntLab31();\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * gathers a string from all the other classes and prints the message\r\n     * out to the console     \r\n     * \r\n     */\r\n    public void printOutMessage() {\r\n        \r\n        String toPrint = \r\n            ant11.getMessage() + ant12.getMessage() + ant21.getMessage()\r\n          + ant22.getMessage() + ant31.getMessage();\r\n\t\t  //Person1 replace P1 with your name\r\n\t\t  //and gburdell1 with your gt id\r\n\t\t  Person1 p1 = new Person1(\"Pranov\");\r\n\t\t  toPrint += p1.toString(\"pduggasani3\");\r\n\t\t  //Person2 replace P2 with your name\r\n\t\t  //and gburdell with your gt id\r\n\t\t  Person2 p2 = new Person2(\"Austin Dang\");\r\n\t\t  toPrint += p2.toString(\"adang31\");\r\n\t\t  //Person3 replace P3 with your name\r\n\t\t  //and gburdell3 with your gt id\r\n\t\t  Person3 p3 = new Person3(\"Jay Patel\");\r\n\t\t  toPrint += p3.toString(\"jpatel345\");\r\n          //Person4 replace P4 with your name\r\n          //and gburdell4 with your gt id\r\n          Person4 p4 = new Person4(\"Jin Chung\");\r\n          toPrint += p4.toString(\"jchung89\");\r\n          //Person5 replace P4 with your name\r\n          //and gburdell5 with your gt id\r\n          Person5 p5 = new Person5(\"Zachary Hussin\");\r\n          toPrint += p5.toString(\"zhussin3\");\r\n\t\t  \r\n        System.out.println(toPrint);\r\n        \r\n        \r\n    }\r\n     \r\n    \r\n    /**\r\n     * entry point for the program\r\n     */\r\n     public static void main(String[] args) {\r\n        \r\n        new AntLabMain().printOutMessage();\r\n        \r\n     } \r\n    \r\n    \r\n    \r\n    \r\n } ",
    "package net.alloyggp.tournament.internal.admin;\n\nimport net.alloyggp.escaperope.Delimiters;\nimport net.alloyggp.escaperope.RopeDelimiter;\nimport net.alloyggp.escaperope.rope.Rope;\nimport net.alloyggp.escaperope.rope.ropify.SubclassWeaver;\nimport net.alloyggp.escaperope.rope.ropify.Weaver;\nimport net.alloyggp.tournament.api.TAdminAction;\n\npublic class InternalAdminActions {\n    private InternalAdminActions() {\n        //Not instantiable\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    public static final Weaver<TAdminAction> WEAVER = SubclassWeaver.builder(TAdminAction.class)\n            .add(ReplaceGameAction.class, \"ReplaceGame\", ReplaceGameAction.WEAVER)\n            .build();\n\n    public static RopeDelimiter getStandardDelimiter() {\n        return Delimiters.getJsonArrayRopeDelimiter();\n    }\n\n    public static TAdminAction fromPersistedString(String persistedString) {\n        Rope rope = getStandardDelimiter().undelimit(persistedString);\n        return WEAVER.fromRope(rope);\n    }\n\n    public static String toPersistedString(TAdminAction adminAction) {\n        Rope rope = WEAVER.toRope(adminAction);\n        return getStandardDelimiter().delimit(rope);\n    }\n}\n",
    "package com.agileEAP.workflow.definition;\n\n\n/** \n \u6d3b\u52a8\u7c7b\u578b\n \n*/\npublic enum ActivityType\n{\n\t/** \n\t \u5f00\u59cb\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u5f00\u59cb\u6d3b\u52a8\")]\n\tStartActivity(1),\n\n\t/** \n\t \u4eba\u5de5\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u4eba\u5de5\u6d3b\u52a8\")]\n\tManualActivity(2),\n\n\t/** \n\t \u8def\u7531\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u8def\u7531\u6d3b\u52a8\")]\n\tRouterActivity(3),\n\n\t/** \n\t \u5b50\u6d41\u7a0b\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u5b50\u6d41\u7a0b\u6d3b\u52a8\")]\n\tSubflowActivity(4),\n\t/** \n\t \u81ea\u52a8\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u81ea\u52a8\u6d3b\u52a8\")]\n\tAutoActivity(5),\n\n\t/** \n\t \u7ed3\u675f\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u7ed3\u675f\u6d3b\u52a8\")]\n\tEndActivity(6),\n\n\t/** \n\t \u5904\u7406\u6d3b\u52a8\n\t \n\t*/\n//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:\n\t//[Remark(\"\u5904\u7406\u6d3b\u52a8\")]\n\tProcessActivity(7);\n\n\tprivate int intValue;\n\tprivate static java.util.HashMap<Integer, ActivityType> mappings;\n\tprivate synchronized static java.util.HashMap<Integer, ActivityType> getMappings()\n\t{\n\t\tif (mappings == null)\n\t\t{\n\t\t\tmappings = new java.util.HashMap<Integer, ActivityType>();\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tprivate ActivityType(int value)\n\t{\n\t\tintValue = value;\n\t\tActivityType.getMappings().put(value, this);\n\t}\n\n\tpublic int getValue()\n\t{\n\t\treturn intValue;\n\t}\n\n\tpublic static ActivityType forValue(int value)\n\t{\n\t\treturn getMappings().get(value);\n\t}\n}",
    "package com.asayama.rps.simulator;\n\npublic enum Hand {\n\t\n\tROCK, PAPER, SCISSORS;\n}\n",
    "package foodtruck.linxup;\n\nimport java.util.List;\n\nimport com.google.common.base.MoreObjects;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\n\nimport org.joda.time.DateTime;\n\nimport foodtruck.model.Location;\n\n/**\n * @author aviolette\n * @since 11/1/16\n */\npublic class Trip {\n  private Location start;\n  private Location end;\n  private DateTime startTime;\n  private DateTime endTime;\n  private List<Position> positions;\n\n  private Trip(Builder builder) {\n    this.start = builder.start;\n    this.end = builder.end;\n    this.startTime = builder.startTime;\n    this.endTime = builder.endTime;\n    this.positions = ImmutableList.copyOf(builder.positions);\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static Builder builder(Trip instance) {\n    return new Builder(instance);\n  }\n\n  public String getName() {\n    return start.getShortenedName() + \" to \" + end.getShortenedName();\n  }\n\n  public Location getStart() {\n    return start;\n  }\n\n  public Location getEnd() {\n    return end;\n  }\n\n  public DateTime getStartTime() {\n    return startTime;\n  }\n\n  public DateTime getEndTime() {\n    return endTime;\n  }\n\n  public List<Position> getPositions() {\n    return positions;\n  }\n\n  @Override\n  public String toString() {\n    return MoreObjects.toStringHelper(this)\n//        .add(\"start\", start)\n//        .add(\"end\", end)\n        .add(\"startTime\", startTime)\n        .add(\"endTime\", endTime)\n        .toString();\n  }\n\n  public static class Builder {\n    private Location start;\n    private Location end;\n    private DateTime startTime;\n    private DateTime endTime;\n    private List<Position> positions = Lists.newLinkedList();\n\n    public Builder() {\n    }\n\n    public Builder(Trip instance) {\n      this.start = instance.start;\n      this.end = instance.end;\n      this.startTime = instance.startTime;\n      this.endTime = instance.endTime;\n      this.positions = instance.positions;\n    }\n\n    public Builder start(Location start) {\n      this.start = start;\n      return this;\n    }\n\n    public Builder end(Location end) {\n      this.end = end;\n      return this;\n    }\n\n    public Builder startTime(DateTime startTime) {\n      this.startTime = startTime;\n      return this;\n    }\n\n    public Builder endTime(DateTime endTime) {\n      this.endTime = endTime;\n      return this;\n    }\n\n    public Trip build() {\n      return new Trip(this);\n    }\n\n    public DateTime getStartTime() {\n      return startTime;\n    }\n\n    public DateTime getEndTime() {\n      return endTime;\n    }\n\n    public Builder addPosition(Position position) {\n      positions.add(position);\n      return this;\n    }\n\n    @Override\n    public String toString() {\n      return MoreObjects.toStringHelper(this)\n          .add(\"start\", start.getShortenedName())\n          .add(\"end\", end.getShortenedName())\n//          .add(\"start\", start)\n//          .add(\"end\", end)\n          .add(\"startTime\", startTime)\n          .add(\"endTime\", endTime)\n          .toSt",
    "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for\n// license information.\n//\n// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0\n// Changes may cause incorrect behavior and will be lost if the code is\n// regenerated.\n\n/**\n * This package contains the classes for AutoRestParameterGroupingTestService.\n * Test Infrastructure for AutoRest.\n */\npackage fixtures.azureparametergrouping;\n",
    "package net.lightstone.net.codec;\n\nimport java.io.IOException;\n\nimport net.lightstone.msg.Message;\n\nimport org.jboss.netty.buffer.ChannelBuffer;\n\npublic abstract class MessageCodec<T extends Message> {\n\n\tprivate final Class<T> clazz;\n\tprivate final int opcode;\n\n\tpublic MessageCodec(Class<T> clazz, int opcode) {\n\t\tthis.clazz = clazz;\n\t\tthis.opcode = opcode;\n\t}\n\n\tpublic final Class<T> getType() {\n\t\treturn clazz;\n\t}\n\n\tpublic final int getOpcode() {\n\t\treturn opcode;\n\t}\n\n\tpublic abstract ChannelBuffer encode(T message) throws IOException;\n\n\tpublic abstract T decode(ChannelBuffer buffer) throws IOException;\n\n}\n\n",
    "package tests_dominio;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport dominio.Asesino;\nimport dominio.Hechicero;\nimport dominio.Humano;\n\npublic class TestAsesino {\n\n\t@Test\n\tpublic void testRobar(){ }\n\t\n\t@Test\n\tpublic void testCritico(){\n\t\tHumano h = new Humano(\"Nicolas\",new Asesino(),1);\n\t\tHumano h2 = new Humano(\"Lautaro\",new Hechicero(),2);\n\t\t\n\t\tAssert.assertEquals(105, h2.getSalud());\n\t\tif\t(h.habilidadCasta1(h2))\n\t\t\tAssert.assertTrue(93==h2.getSalud());\n\t\telse\n\t\t\tAssert.assertEquals(105, h2.getSalud());\n\t}\n\t\n\t@Test\n\tpublic void testProbEvasion(){\n\t\tHumano h = new Humano(\"Nico\",100, 100, 25, 20, 30, new Asesino(0.2, 0.3, 1.5), 0, 1, 1);\n\t\t\n\t\tAssert.assertTrue(0.3==h.getCasta().getProbabilidadEvitarDa\u00f1o());\n\t\th.habilidadCasta2(null);\n\t\tAssert.assertEquals(0.45, h.getCasta().getProbabilidadEvitarDa\u00f1o(), 0.01);\n\t\th.habilidadCasta2(null);\n\t\tAssert.assertTrue(0.5==h.getCasta().getProbabilidadEvitarDa\u00f1o());\n\t}\n}\n",
    "// LICENSE\npackage com.forgedui.editor.edit;\n\nimport java.beans.PropertyChangeEvent;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.eclipse.draw2d.geometry.Rectangle;\nimport org.eclipse.gef.commands.Command;\nimport org.eclipse.gef.requests.CreateRequest;\n\nimport com.forgedui.editor.GUIEditorPlugin;\nimport com.forgedui.editor.edit.command.AddToTableViewElementCommand;\nimport com.forgedui.editor.edit.policy.ContainerEditPolicy;\nimport com.forgedui.editor.figures.TableViewFigure;\nimport com.forgedui.model.titanium.SearchBar;\nimport com.forgedui.model.titanium.TableView;\nimport com.forgedui.model.titanium.TableViewRow;\nimport com.forgedui.model.titanium.TableViewSection;\nimport com.forgedui.model.titanium.TitaniumUIBoundedElement;\nimport com.forgedui.model.titanium.TitaniumUIElement;\n\n/**\n * @author Dmitry {dmitry.grimm@gmail.com}\n *\n */\npublic class TableViewEditPart extends TitaniumContainerEditPart<TableView> {\n\t\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Override\n\tpublic List<?> getModelChildren_() {\n\t\tList list = new ArrayList(super.getModelChildren_());\n\t\tTableView model = (TableView)getModel();\n\t\tif (model.getHeaderView() != null){\n\t\t\tlist.add(model.getHeaderView());\n\t\t}\n\t\tif (model.getFooterView() != null){\n\t\t\tlist.add(model.getFooterView());\n\t\t}\n\t\tif ((model.getSearchHidden() == null\n\t\t\t\t|| !model.getSearchHidden())\n\t\t\t\t&& model.getSearch() != null){\n\t\t\tlist.add(model.getSearch());\n\t\t}\n\t\treturn list;\n\t}\n\t\n\t/**\n\t * Making sure to refresh things visual.\n\t */\n\t@Override\n\tpublic void propertyChange(PropertyChangeEvent evt) {\n\t\tfinal String propName = evt.getPropertyName();\n\t\tif (TableView.PROP_HEADER_VIEW.equals(propName)\n\t\t\t\t|| TableView.PROP_FOOTER_VIEW.equals(propName)\n\t\t\t\t|| TableView.PROP_SEARCH_VIEW.equals(propName)\n\t\t\t\t|| TableView.PROP_SEARCH_VIEW_HIDDEN.equals(propName)\n\t\t\t\t|| TableView.PROP_MIN_ROW_HEIGHT.equals(propName)\n\t\t\t\t|| TableView.PROP_MAX_ROW_HEIGHT.equals(propName)\n\t\t\t\t) {\n\t\t\trefresh();\n\t\t} else {\n\t\t\tsuper.propertyChange(evt);\n\t\t}\n\t}\n\t\n\t@Override\n\tprotected void createEditPolicies() {\n\t\tsuper.createEditPolicies();\n\t\tinstallEditPolicy(ContainerEditPolicy.KEY, new TableViewEditPolicy());\n\t}\n\n\t@Override\n\tprotected void refreshVisuals() {\n\t\tTableView model = (TableView)getModel();\n\t\tTableViewFigure figure = (TableViewFigure)getFigure();\n\n\t\tfigure.setHeaderTitle(model.getHeaderTitle());\n\t\tfigure.setFooterTitle(model.getFooterTitle());\n\t\t\n\t\tfigure.setHasHeaderView(model.getHeaderView() != null);\n\t\tfigure.setHasFooterView(model.getFooterView() != null);\n\t\t\n\t\tsuper.refreshVisuals();\n\t}\n\t\n}\n\nclass TableViewEditPolicy extends ContainerEditPolicy {\n\t\n\tprotected Command getCreateCommand(CreateRequest request) {\n\t\t// And then passed those to the validate facility.\n\t\tObject newObject = request.getNewObject();\n\t\tObject container = getHost().getModel();\n\t\t\n\t\tif (!GUIEditorPlugin.getComponentValidator().validate(newObject, container))\n\t\t\treturn null;\n\t\t\n\t\tif (!(newObject instanceof TableViewRow) && \n\t\t\t\t!(newObject inst",
    "package com.daviancorp.android.data.database;\n\nimport android.database.Cursor;\nimport android.database.CursorWrapper;\n\nimport com.daviancorp.android.data.classes.Location;\n\n/**\n * A convenience class to wrap a cursor that returns rows from the \"locations\"\n * table. The {@link getLocation()} method will give you a Location instance\n * representing the current row.\n */\npublic class LocationCursor extends CursorWrapper {\n\n\tpublic LocationCursor(Cursor c) {\n\t\tsuper(c);\n\t}\n\n\t/**\n\t * Returns a Location object configured for the current row, or null if the\n\t * current row is invalid.\n\t */\n\tpublic Location getLocation() {\n\t\tif (isBeforeFirst() || isAfterLast())\n\t\t\treturn null;\n\t\t\n\t\tLocation location = new Location();\n\n\t\tlong locationId = getLong(getColumnIndex(S.COLUMN_LOCATIONS_ID));\n\t\tString name = getString(getColumnIndex(S.COLUMN_LOCATIONS_NAME));\n\t\tString fileLocation = getString(getColumnIndex(S.COLUMN_LOCATIONS_MAP));\n\n\t\tlocation.setId(locationId);\n\t\tlocation.setName(name);\n\t\tlocation.setFileLocation(fileLocation);\n\n\t\treturn location;\n\t}\n}",
    "package bp.details;\r\n\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JSpinner;\r\nimport javax.swing.SpinnerModel;\r\nimport javax.swing.SpinnerNumberModel;\r\nimport javax.swing.event.ChangeEvent;\r\nimport javax.swing.event.ChangeListener;\r\n\r\nimport bp.model.data.Gateway;\r\nimport bp.model.util.BPKeyWords;\r\nimport bp.model.util.Controller;\r\n\r\npublic class GatewayDetails extends ElementDetails {\r\n\r\n    /**\r\n     * \r\n     */\r\n    private static final long serialVersionUID = -2243209273015769935L;\r\n\r\n    public static final String MIN_INPUT = \"Minimal input:\";\r\n\r\n    private Gateway gateway = (Gateway) getElement();\r\n\r\n    private JLabel minInputLb;\r\n    private JSpinner minInputSp;\r\n\r\n    public GatewayDetails(Gateway element) {\r\n        super(element);\r\n    }\r\n\r\n    @Override\r\n    protected void initComponents() {\r\n        super.initComponents();\r\n\r\n        this.minInputLb = new JLabel(MIN_INPUT);\r\n        final SpinnerModel sm = new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1);\r\n        this.minInputSp = new JSpinner(sm);\r\n        \r\n        // Set the texts if available\r\n        gateway = (Gateway) getElement();\r\n        if (gateway.getMinInput() != null)\r\n        \tminInputSp.setValue(gateway.getMinInput());\r\n    }\r\n\r\n    @Override\r\n    protected void layoutComponents() {\r\n        super.layoutComponents();\r\n\r\n        createAdvanced();\r\n\r\n        getAdvanced().add(this.minInputLb);\r\n        getAdvanced().add(this.minInputSp);\r\n    }\r\n\r\n    @Override\r\n    protected void addActions() {\r\n        super.addActions();\r\n\r\n        this.minInputSp.addChangeListener(new ChangeListener() {\r\n\r\n            @Override\r\n            public void stateChanged(final ChangeEvent arg0) {\r\n                GatewayDetails.this.gateway.updateMinInput((Integer) GatewayDetails.this.minInputSp.getValue(),\r\n                        Controller.DETAILS);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void dataAttributeChanged(final BPKeyWords keyWord, final Object value) {\r\n        super.dataAttributeChanged(keyWord, value);\r\n        if (value != null) {\r\n            if (keyWord == BPKeyWords.MIN_INPUT) {\r\n                this.minInputSp.setValue(value);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n",
    "package com.cmput402w2016.t1.webapi.handler;\n\nimport com.cmput402w2016.t1.data.Segment;\nimport com.cmput402w2016.t1.webapi.Helper;\nimport com.cmput402w2016.t1.webapi.WebApi;\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\n\nimport java.util.Map;\n\n/**\n * Handler for the /segment webservice route\n */\npublic class SegmentHandler implements HttpHandler {\n    /**\n     * Handle the web request to the server\n     *\n     * @param httpExchange HttpExchange object containing the request\n     */\n    @Override\n    public void handle(HttpExchange httpExchange) {\n        // Get & parse query\n        try {\n            String requestMethod = httpExchange.getRequestMethod();\n            if (requestMethod.equalsIgnoreCase(\"GET\")) {\n                String query = httpExchange.getRequestURI().getRawQuery();\n                Map<String, String> stringStringMap = Helper.queryToMap(query);\n                if (stringStringMap.containsKey(\"geohash\")) {\n                    String geohash = stringStringMap.get(\"geohash\");\n                    String neighbors = Segment.getClosestSegmentFromGeohash(geohash, WebApi.get_segment_table());\n                    Helper.requestResponse(httpExchange, 200, neighbors);\n                    httpExchange.close();\n                    return;\n                } else if (stringStringMap.containsKey(\"lat\") && stringStringMap.containsKey(\"lon\")) {\n                    String lat = stringStringMap.get(\"lat\");\n                    String lon = stringStringMap.get(\"lon\");\n                    String neighbors = Segment.getClosestSegmentFromLatLon(lat, lon, WebApi.get_segment_table());\n                    Helper.requestResponse(httpExchange, 200, neighbors);\n                    httpExchange.close();\n                    return;\n                }\n            }\n            Helper.malformedRequestResponse(httpExchange, 400, \"Invalid query to the segment api\");\n            httpExchange.close();\n        } catch (Exception e) {\n            // Wasn't returned earlier, something must be wrong\n            e.printStackTrace();\n            Helper.malformedRequestResponse(httpExchange, 400, e.getMessage());\n            httpExchange.close();\n        }\n    }\n}\n",
    "package com.swfarm.biz.chain.bo;\r\n\r\nimport java.io.Serializable;\r\nimport java.sql.Timestamp;\r\nimport java.util.Random;\r\n\r\nimport com.swfarm.pub.framework.FormNumberCache;\r\n\r\npublic class JobExecutionState implements Serializable {\r\n\r\n\tprivate Long id;\r\n\r\n\tprivate String jobName;\r\n\r\n\tprivate String jobInstanceName;\r\n\r\n\tprivate String saleChannel;\r\n\r\n\tprivate String accountNumber;\r\n\r\n\tprivate Timestamp executionTime = new Timestamp(System.currentTimeMillis());\r\n\r\n\tpublic Long getId() {\r\n\t\treturn id;\r\n\t}\r\n\r\n\tpublic void setId(Long id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\tpublic String getJobName() {\r\n\t\treturn jobName;\r\n\t}\r\n\r\n\tpublic void setJobName(String jobName) {\r\n\t\tthis.jobName = jobName;\r\n\t}\r\n\r\n\tpublic String getJobInstanceName() {\r\n\t\treturn jobInstanceName;\r\n\t}\r\n\r\n\tpublic void setJobInstanceName(String jobInstanceName) {\r\n\t\tthis.jobInstanceName = jobInstanceName;\r\n\t}\r\n\r\n\tpublic String getSaleChannel() {\r\n\t\treturn saleChannel;\r\n\t}\r\n\r\n\tpublic void setSaleChannel(String saleChannel) {\r\n\t\tthis.saleChannel = saleChannel;\r\n\t}\r\n\r\n\tpublic String getAccountNumber() {\r\n\t\treturn accountNumber;\r\n\t}\r\n\r\n\tpublic void setAccountNumber(String accountNumber) {\r\n\t\tthis.accountNumber = accountNumber;\r\n\t}\r\n\r\n\tpublic Timestamp getExecutionTime() {\r\n\t\treturn executionTime;\r\n\t}\r\n\r\n\tpublic void setExecutionTime(Timestamp executionTime) {\r\n\t\tthis.executionTime = executionTime;\r\n\t}\r\n\r\n\tpublic String generateJobInstanceName() {\r\n\t\tStringBuffer jobInstanceNameBuffer = new StringBuffer();\r\n\t\tjobInstanceNameBuffer.append(this.jobName);\r\n\t\tjobInstanceNameBuffer.append(System.currentTimeMillis());\r\n\t\tRandom random = new Random();\r\n\t\tint i1 = FormNumberCache.getRandomInteger(1, 9, random);\r\n\t\tint i2 = FormNumberCache.getRandomInteger(1, 9, random);\r\n\t\tint i3 = FormNumberCache.getRandomInteger(1, 9, random);\r\n\t\tint i4 = FormNumberCache.getRandomInteger(1, 9, random);\r\n\t\tjobInstanceNameBuffer.append(i1);\r\n\t\tjobInstanceNameBuffer.append(i2);\r\n\t\tjobInstanceNameBuffer.append(i3);\r\n\t\tjobInstanceNameBuffer.append(i4);\r\n\t\treturn jobInstanceNameBuffer.toString();\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t}\r\n}",
    "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// Code generated by Microsoft (R) AutoRest Code Generator.\n\npackage com.azure.resourcemanager.avs.implementation;\n\nimport com.azure.core.http.rest.PagedIterable;\nimport com.azure.core.http.rest.Response;\nimport com.azure.core.http.rest.SimpleResponse;\nimport com.azure.core.util.Context;\nimport com.azure.core.util.logging.ClientLogger;\nimport com.azure.resourcemanager.avs.fluent.PlacementPoliciesClient;\nimport com.azure.resourcemanager.avs.fluent.models.PlacementPolicyInner;\nimport com.azure.resourcemanager.avs.models.PlacementPolicies;\nimport com.azure.resourcemanager.avs.models.PlacementPolicy;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\npublic final class PlacementPoliciesImpl implements PlacementPolicies {\n    @JsonIgnore private final ClientLogger logger = new ClientLogger(PlacementPoliciesImpl.class);\n\n    private final PlacementPoliciesClient innerClient;\n\n    private final com.azure.resourcemanager.avs.AvsManager serviceManager;\n\n    public PlacementPoliciesImpl(\n        PlacementPoliciesClient innerClient, com.azure.resourcemanager.avs.AvsManager serviceManager) {\n        this.innerClient = innerClient;\n        this.serviceManager = serviceManager;\n    }\n\n    public PagedIterable<PlacementPolicy> list(String resourceGroupName, String privateCloudName, String clusterName) {\n        PagedIterable<PlacementPolicyInner> inner =\n            this.serviceClient().list(resourceGroupName, privateCloudName, clusterName);\n        return Utils.mapPage(inner, inner1 -> new PlacementPolicyImpl(inner1, this.manager()));\n    }\n\n    public PagedIterable<PlacementPolicy> list(\n        String resourceGroupName, String privateCloudName, String clusterName, Context context) {\n        PagedIterable<PlacementPolicyInner> inner =\n            this.serviceClient().list(resourceGroupName, privateCloudName, clusterName, context);\n        return Utils.mapPage(inner, inner1 -> new PlacementPolicyImpl(inner1, this.manager()));\n    }\n\n    public PlacementPolicy get(\n        String resourceGroupName, String privateCloudName, String clusterName, String placementPolicyName) {\n        PlacementPolicyInner inner =\n            this.serviceClient().get(resourceGroupName, privateCloudName, clusterName, placementPolicyName);\n        if (inner != null) {\n            return new PlacementPolicyImpl(inner, this.manager());\n        } else {\n            return null;\n        }\n    }\n\n    public Response<PlacementPolicy> getWithResponse(\n        String resourceGroupName,\n        String privateCloudName,\n        String clusterName,\n        String placementPolicyName,\n        Context context) {\n        Response<PlacementPolicyInner> inner =\n            this\n                .serviceClient()\n                .getWithResponse(resourceGroupName, privateCloudName, clusterName, placementPolicyName, context);\n        if (inner != null) {\n            return new SimpleResponse<>(\n              ",
    "/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n */\n\npackage org.webodf;\n\nimport android.os.Bundle;\nimport org.apache.cordova.*;\n\npublic class WebODF extends CordovaActivity \n{\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        super.init();\n        // Set by <content src=\"index.html\" /> in config.xml\n        super.loadUrl(Config.getStartUrl());\n        //super.loadUrl(\"file:///android_asset/www/index.html\");\n    }\n}\n\n",
    "/*\n * This file is part of jGui API, licensed under the MIT License (MIT).\n *\n * Copyright (c) 2016 johni0702 <https://github.com/johni0702>\n * Copyright (c) contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage de.johni0702.minecraft.gui.element;\n\nimport de.johni0702.minecraft.gui.GuiRenderer;\nimport de.johni0702.minecraft.gui.RenderInfo;\nimport de.johni0702.minecraft.gui.container.GuiContainer;\nimport de.johni0702.minecraft.gui.utils.lwjgl.Dimension;\nimport de.johni0702.minecraft.gui.utils.lwjgl.Point;\nimport de.johni0702.minecraft.gui.utils.lwjgl.ReadableDimension;\nimport de.johni0702.minecraft.gui.versions.MCVer;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.util.Identifier;\n\npublic abstract class AbstractGuiElement<T extends AbstractGuiElement<T>> implements GuiElement<T> {\n    protected static final Identifier TEXTURE = new Identifier(\"jgui\", \"gui.png\");\n\n\n    private final MinecraftClient minecraft = MCVer.getMinecraft();\n\n    private GuiContainer container;\n\n    private GuiElement tooltip;\n\n    private boolean enabled = true;\n\n    protected Dimension minSize, maxSize;\n\n    /**\n     * The last size this element was render at layer 0.\n     * May be {@code null} when this element has not yet been rendered.\n     */\n    private ReadableDimension lastSize;\n\n    public AbstractGuiElement() {\n    }\n\n    public AbstractGuiElement(GuiContainer container) {\n        container.addElements(null, this);\n    }\n\n    protected abstract T getThis();\n\n    @Override\n    public void layout(ReadableDimension size, RenderInfo renderInfo) {\n        if (size == null) {\n            if (getContainer() == null) {\n                throw new RuntimeException(\"Any top containers must implement layout(null, ...) themselves!\");\n            }\n            getContainer().layout(size, renderInfo.layer(renderInfo.layer + getLayer()));\n            return;\n        }\n        if (renderInfo.layer == 0) {\n            lastSize = size;\n   ",
    "/*\n * Jermit\n *\n * The MIT License (MIT)\n *\n * Copyright (C) 2018 Kevin Lamonte\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n * @author Kevin Lamonte [kevin.lamonte@gmail.com]\n * @version 1\n */\npackage jermit.protocol.zmodem;\n\n/**\n * ZEofHeader represents the end of a file.\n */\nclass ZEofHeader extends Header {\n\n    // ------------------------------------------------------------------------\n    // Constructors -----------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    /**\n     * Public constructor.\n     */\n    public ZEofHeader() {\n        this(0);\n    }\n\n    /**\n     * Public constructor.\n     *\n     * @param data the data field for this header\n     */\n    public ZEofHeader(final int data) {\n        super(Type.ZEOF, (byte) 0x0B, \"ZEOF\", data);\n    }\n\n    // ------------------------------------------------------------------------\n    // Header -----------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    // ------------------------------------------------------------------------\n    // ZEofHeader -------------------------------------------------------------\n    // ------------------------------------------------------------------------\n\n    /**\n     * Get the file size value.\n     *\n     * @return the value\n     */\n    public int getFileSize() {\n        return data;\n    }\n\n}\n",
    "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class FormLoader {\n\t\n\tpublic static String connectionString = \"jdbc:hsqldb:file:db-data/teamsandplayers\";\n\tstatic Connection con;\n\n\tpublic static void main(String[] args) throws Exception {\n\t\ttry {\n\t\t\tClass.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n\t\t} catch (ClassNotFoundException e) {\n\t\t\tthrow e;\n\t\t}\n\t\t\n\t\t\n\t\tMainTeamForm form = new MainTeamForm();\n\t\tform.setVisible(true);\n\t\t\n\t\ttry {\n\t\t\t// will create DB if does not exist\n\t\t\t// \"SA\" is default user with hypersql\n\t\t\tcon = DriverManager.getConnection(connectionString, \"SA\", \"\");\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t        \n\t\t} catch (SQLException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tcon.close();\n\t\t\tSystem.out.println(\"Program complete\");\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\n\n}\n",
    "package com.zimbra.cs.versioncheck;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Date;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport com.zimbra.common.util.ZimbraLog;\nimport com.zimbra.common.account.Key;\nimport com.zimbra.common.account.Key.ServerBy;\nimport com.zimbra.common.service.ServiceException;\nimport com.zimbra.common.soap.AdminConstants;\nimport com.zimbra.common.soap.SoapFaultException;\nimport com.zimbra.common.soap.SoapTransport;\nimport com.zimbra.common.util.CliUtil;\nimport com.zimbra.cs.account.Config;\nimport com.zimbra.cs.account.Provisioning;\nimport com.zimbra.cs.account.Server;\nimport com.zimbra.cs.client.LmcSession;\nimport com.zimbra.cs.client.soap.LmcSoapClientException;\nimport com.zimbra.cs.client.soap.LmcVersionCheckRequest;\nimport com.zimbra.cs.client.soap.LmcVersionCheckResponse;\nimport com.zimbra.cs.util.BuildInfo;\nimport com.zimbra.cs.util.SoapCLI;\nimport com.zimbra.common.util.DateUtil;\n/**\n * @author Greg Solovyev\n */\npublic class VersionCheckUtil extends SoapCLI {\n    private static final String OPT_CHECK_VERSION = \"c\";\n    private static final String OPT_MANUAL_CHECK_VERSION = \"m\";\n    private static final String SHOW_LAST_STATUS = \"r\";\n    \n    protected VersionCheckUtil() throws ServiceException {\n        super();\n    }\n    \n    public static void main(String[] args) {\n        CliUtil.toolSetup();\n        SoapTransport.setDefaultUserAgent(\"zmcheckversion\", BuildInfo.VERSION);\n        VersionCheckUtil util = null;\n        try {\n            util = new VersionCheckUtil();\n        } catch (ServiceException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n\n        try {\n            util.setupCommandLineOptions();\n            CommandLine cl = null;\n            try {\n                cl = util.getCommandLine(args);\n            } catch (ParseException e) {\n                System.out.println(e.getMessage());\n                util.usage();\n                System.exit(1);\n            }\n            \n            if (cl == null) {\n                System.exit(1);\n            }\n            \n            if (cl.hasOption(OPT_CHECK_VERSION)) {\n            \t//check schedule\n        \t\tProvisioning prov = Provisioning.getInstance();\n        \t\tConfig config;\n        \t\tconfig = prov.getConfig();\n            \tString updaterServerId = config.getAttr(Provisioning.A_zimbraVersionCheckServer);\n            \t\n                if (updaterServerId != null) {\n                    Server server = prov.get(Key.ServerBy.id, updaterServerId);\n                    if (server != null) {\n                    \tServer localServer = prov.getLocalServer();\n                    \tif (localServer!=null) { \n                    \t\tif(!localServer.getId().equalsIgnoreCase(server.getId())) {\n                    \t\t\tSystem.out.println(\"Wrong server\");\n                    \t\t\tSystem.exit(0);\n         ",
    "package br.ufrj.g2matricula.domain;\n\nimport org.springframework.data.elasticsearch.annotations.Document;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.*;\nimport java.io.Serializable;\nimport java.util.Objects;\n\nimport br.ufrj.g2matricula.domain.enumeration.MatriculaStatus;\n\n/**\n * A Matricula.\n */\n@Entity\n@Table(name = \"matricula\")\n@Document(indexName = \"matricula\")\npublic class Matricula implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @NotNull\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"status\", nullable = false)\n    private MatriculaStatus status;\n\n    @ManyToOne\n    private Aluno dreAluno;\n\n    @ManyToOne\n    private Curso curso;\n\n    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public MatriculaStatus getStatus() {\n        return status;\n    }\n\n    public Matricula status(MatriculaStatus status) {\n        this.status = status;\n        return this;\n    }\n\n    public void setStatus(MatriculaStatus status) {\n        this.status = status;\n    }\n\n    public Aluno getDreAluno() {\n        return dreAluno;\n    }\n\n    public Matricula dreAluno(Aluno aluno) {\n        this.dreAluno = aluno;\n        return this;\n    }\n\n    public void setDreAluno(Aluno aluno) {\n        this.dreAluno = aluno;\n    }\n\n    public Curso getCurso() {\n        return curso;\n    }\n\n    public Matricula curso(Curso curso) {\n        this.curso = curso;\n        return this;\n    }\n\n    public void setCurso(Curso curso) {\n        this.curso = curso;\n    }\n    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        Matricula matricula = (Matricula) o;\n        if (matricula.getId() == null || getId() == null) {\n            return false;\n        }\n        return Objects.equals(getId(), matricula.getId());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(getId());\n    }\n\n    @Override\n    public String toString() {\n        return \"Matricula{\" +\n            \"id=\" + getId() +\n            \", status='\" + getStatus() + \"'\" +\n            \"}\";\n    }\n}\n",
    "package com.thilko.springdoc;\n\n@SuppressWarnings(\"all\")\npublic class CredentialsCode {\n    Integer age;\n    double anotherValue;\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public double getAnotherValue() {\n        return anotherValue;\n    }\n\n    public void setAnotherValue(double anotherValue) {\n        this.anotherValue = anotherValue;\n    }\n}\n",
    "package fr.lteconsulting.pomexplorer.commands;\n\nimport fr.lteconsulting.pomexplorer.AppFactory;\nimport fr.lteconsulting.pomexplorer.Client;\nimport fr.lteconsulting.pomexplorer.Log;\n\npublic class HelpCommand\n{\n\t@Help( \"gives this message\" )\n\tpublic void main( Client client, Log log )\n\t{\n\t\tlog.html( AppFactory.get().commands().help() );\n\t}\n}\n",
    "/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n */\n\npackage com.microsoft.azure.management.network.v2020_04_01;\n\nimport java.util.Map;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n/**\n * Tags object for patch operations.\n */\npublic class TagsObject {\n    /**\n     * Resource tags.\n     */\n    @JsonProperty(value = \"tags\")\n    private Map<String, String> tags;\n\n    /**\n     * Get resource tags.\n     *\n     * @return the tags value\n     */\n    public Map<String, String> tags() {\n        return this.tags;\n    }\n\n    /**\n     * Set resource tags.\n     *\n     * @param tags the tags value to set\n     * @return the TagsObject object itself.\n     */\n    public TagsObject withTags(Map<String, String> tags) {\n        this.tags = tags;\n        return this;\n    }\n\n}\n",
    "/*\n * This file is part of Sponge, licensed under the MIT License (MIT).\n *\n * Copyright (c) SpongePowered <https://www.spongepowered.org>\n * Copyright (c) contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage org.spongepowered.common.mixin.core.server.network;\n\nimport net.minecraft.network.NetworkManager;\nimport net.minecraft.network.login.server.S00PacketDisconnect;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.server.management.ServerConfigurationManager;\nimport net.minecraft.server.network.NetHandlerLoginServer;\nimport net.minecraft.util.ChatComponentTranslation;\nimport net.minecraft.util.IChatComponent;\nimport org.apache.logging.log4j.Logger;\nimport org.spongepowered.api.event.cause.NamedCause;\nimport org.spongepowered.api.profile.GameProfile;\nimport org.spongepowered.api.event.SpongeEventFactory;\nimport org.spongepowered.api.event.cause.Cause;\nimport org.spongepowered.api.event.network.ClientConnectionEvent;\nimport org.spongepowered.api.network.RemoteConnection;\nimport org.spongepowered.api.text.Text;\nimport org.spongepowered.asm.lib.Opcodes;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.Redirect;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\nimport org.spongepowered.common.SpongeImpl;\nimport org.spongepowered.common.interfaces.IMixinNetHandlerLoginServer;\nimport org.spongepowered.common.text.SpongeTexts;\n\nimport java.net.SocketAddress;\nimport java.util.Optional;\n\n@Mixin(NetHandlerLoginServer.class)\npublic abstract class MixinNetHandlerLoginServer implements IMixinNetHandlerLoginServer {\n\n    @Shadow private static Logger logger;\n    @Shadow public NetworkManager networkManager;\n    @Shadow private MinecraftServer server;\n    @Shadow private com.mojang.authlib.GameProfile loginGameProfile;\n\n",
    "// This file is automatically generated.\n\npackage adila.db;\n\n/*\n * Motorola Cliq-XT\n *\n * DEVICE: zeppelin\n * MODEL: MB501\n */\nfinal class zeppelin_mb501 {\n    public static final String DATA = \"Motorola|Cliq-XT|\";\n}\n",
    "package util;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\n/**\n * Taken from\n * http://www.javaworld.com/article/2077578/learn-java/java-tip-76--an-alternative-to-the-deep-copy-technique.html\n * \n * @author David Miller (maybe)\n */\npublic class ObjectCloner\n{\n\t// so that nobody can accidentally create an ObjectCloner object\n\tprivate ObjectCloner() {\n\t}\n\n\t// returns a deep copy of an object\n\tstatic public Object deepCopy(Object oldObj) throws Exception\n\t{\n\t\tObjectOutputStream oos = null;\n\t\tObjectInputStream ois = null;\n\t\ttry\n\t\t{\n\t\t\tByteArrayOutputStream bos =\n\t\t\t\t\tnew ByteArrayOutputStream(); // A\n\t\t\toos = new ObjectOutputStream(bos); // B\n\t\t\t// serialize and pass the object\n\t\t\toos.writeObject(oldObj); // C\n\t\t\toos.flush(); // D\n\t\t\tByteArrayInputStream bin =\n\t\t\t\t\tnew ByteArrayInputStream(bos.toByteArray()); // E\n\t\t\tois = new ObjectInputStream(bin); // F\n\t\t\t// return the new object\n\t\t\treturn ois.readObject(); // G\n\t\t} catch (Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"Exception in ObjectCloner = \" + e);\n\t\t\tthrow (e);\n\t\t} finally\n\t\t{\n\t\t\toos.close();\n\t\t\tois.close();\n\t\t}\n\t}\n\n}",
    "import java.awt.*;\r\n\r\npublic class ListFonts\r\n{\r\n   public static void main(String[] args)\r\n   {\r\n      String[] fontNames = GraphicsEnvironment\r\n         .getLocalGraphicsEnvironment()\r\n         .getAvailableFontFamilyNames();\r\n\r\n      for (int i = 0; i < fontNames.length; i++)\r\n         System.out.println(fontNames[i]);\r\n   }\r\n}\r\n\r\n",
    "package boun.swe573.accessbadger;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class ABHelloWorld {\n\n\t@RequestMapping(\"/welcome\")\n\tpublic String helloWorld() {\n\n\t\tString message = \"<br><div style='text-align:center;'>\"\n\t\t\t\t+ \"<h3>********** Hello World **********</div><br><br>\";\n\n\t\treturn message;\n\t}\n}\n",
    "package gradebookdata;\n\n/**\n * Represents one row of the course table in the GradeBook database\n * \n * @author Eric Carlton\n * \n */\npublic class Course {\n\n\tprivate String name;\n\tprivate int weight;\n\tprivate int ID;\n\n\t/**\n\t * Create a course with all fields filled\n\t * \n\t * @param name\n\t *            name of course\n\t * @param weight\n\t *            credit hours ( or weight ) of course\n\t * @param ID\n\t *            course_ID in course table\n\t */\n\tpublic Course(String name, int weight, int ID) {\n\t\tthis.name = name;\n\t\tthis.weight = weight;\n\t\tthis.ID = ID;\n\t}\n\n\t/**\n\t * Create a generic course\n\t */\n\tpublic Course() {\n\t\tthis(\"no name\", 0, -1);\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic Integer getWeight() {\n\t\treturn weight;\n\t}\n\n\tpublic Integer getID() {\n\t\treturn ID;\n\t}\n\n\t/**\n\t * Returns a string formatted as:\n\t * course_name\n\t * course_weight hour(s)\n\t */\n\t@Override\n\tpublic String toString() {\n\t\tString result = name + \"\\n\" + weight;\n\t\tif (weight == 1)\n\t\t\tresult = result + \" hour\";\n\t\telse\n\t\t\tresult = result + \" hours\";\n\t\treturn result;\n\t}\n\n}\n",
    "package com.orbital.lead.controller.Activity;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.app.DatePickerDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.DatePicker;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport com.orbital.lead.R;\nimport com.orbital.lead.controller.RecyclerViewAdapter.RecyclerDividerItemDecoration;\nimport com.orbital.lead.controller.RecyclerViewAdapter.RecyclerProjectListAdapter;\nimport com.orbital.lead.controller.RecyclerViewAdapter.RecyclerTagListAdapter;\nimport com.orbital.lead.model.Constant;\nimport com.orbital.lead.model.EnumDialogEditJournalType;\nimport com.orbital.lead.model.EnumOpenPictureActivityType;\nimport com.orbital.lead.model.Journal;\nimport com.orbital.lead.model.Project;\nimport com.orbital.lead.model.ProjectList;\nimport com.orbital.lead.model.Tag;\nimport com.orbital.lead.model.TagList;\n\npublic class AddNewSpecificJournalActivity extends BaseActivity {\n\n    private final String TAG = this.getClass().getSimpleName();\n\n    private View mToolbarView;\n    private TextView mToolbarTitle;\n    private TextView mTextJournalDate;\n    private TextView mTextTag;\n    private TextView mTextProject;\n    private EditText mEditTextTitle;\n    private EditText mEditTextContent;\n    private AlertDialog mDialogSave;\n\n    private Journal newJournal;\n    private TagList newTagList;\n    private ProjectList newProjectList;\n    private Project newProject;\n\n\n    private DatePickerDialog datePickerDialog;\n    private DatePickerDialog.OnDateSetListener datePickerListener;\n    private RecyclerView mRecyclerViewTagList;\n    private RecyclerView mRecyclerViewProjectList;\n    private RecyclerView.Adapter mRecyclerDialogTagAdapter;\n    private RecyclerView.Adapter mRecyclerDialogProjectAdapter;\n\n    //private String newJournalID;\n    //private String newAlbumID;\n\n    private int mYear;\n    private int mMonth;\n    private int mDay;\n\n    private boolean toggleRefresh = false;\n    private boolean isSaved = false;\n    private boolean discard = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        getLayoutInflater().inflate(R.layout.activity_add_new_specific_journal, getBaseFrameLayout());\n\n        this.initToolbar();\n        this.initToolbarTitle();\n        this.setToolbarTitle(Constant.TITLE_ADD_NEW_JOURNAL);\n        this.pushToolbarToActionbar();\n        this.restoreCustomActionbar();\n        this.restoreDrawerHeaderValues();\n\n        this.initJournalReceiver();\n        this.retrieveNewJournalAlbumID();\n\n        this.initNewJournal();\n        this.in",
    "/*\r\n * (C) Copyright 2015 Richard Greenlees\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\r\n * and associated documentation files (the \"Software\"), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n *  1) The above copyright notice and this permission notice shall be included\r\n *     in all copies or substantial portions of the Software.\r\n *\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\npackage com.jumi.scene.objects;\r\n\r\n/**\r\n *\r\n * @author RGreenlees\r\n */\r\npublic class JUMISkinDeformer {\r\n    \r\n    String name;\r\n\r\n    public JUMISubDeformer[] deformers = new JUMISubDeformer[0];\r\n    \r\n    public JUMISkinDeformer(String inName) {\r\n        name = inName;\r\n    }\r\n    \r\n    public String toString() {\r\n        String result = \"Skin Deformer \" + name + \":\";\r\n        for (int i = 0; i < deformers.length; i++) {\r\n            result = result + \"\\n\\t\" + deformers[i].name;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    public JUMISubDeformer getSubDeformerByIndex(int index) {\r\n        if (index >= deformers.length) {\r\n            return null;\r\n        }\r\n        return deformers[index];\r\n    }\r\n    \r\n    public JUMISubDeformer getSubDeformerByName(String inName) {\r\n        for (JUMISubDeformer a : deformers) {\r\n            if (a.name.equals(inName)) {\r\n                return a;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n}\r\n",
    "public class Solution {\n    public int lengthOfLongestSubstringTwoDistinct(String s) {\n        int[] map = new int[128];\n        int count = 0, start = 0, end = 0, d = 0;\n        while (end < s.length()) {\n            if (map[s.charAt(end++)]++ == 0) count++;\n            while (count > 2) if(map[s.charAt(start++)]-- == 1) count--;\n            d = Math.max(d, end - start);\n        }\n        return d;\n    }\n}\n",
    "/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 MrInformatic.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage game.saver.remote.gamemaps;\n\nimport game.saver.GameData;\nimport game.saver.Quarry;\nimport game.saver.gamemaps.GameDoubleMap;\nimport game.saver.gamemaps.GameFloatMap;\nimport game.saver.remote.RemoteClassMap;\nimport game.saver.remote.Remoteable;\nimport java.util.LinkedList;\nimport java.util.Map;\n\n/**\n *\n * @author MrInformatic\n */\npublic class RemoteGameDoubleMap<T extends GameData> extends GameDoubleMap<T> implements Remoteable{\n    private int id;\n    private Quarry quarry;\n    private RemoteClassMap remoteClassMap;\n    \n    public RemoteGameDoubleMap(Quarry quarry,RemoteClassMap remoteClassMap){\n        this.quarry = quarry;\n        this.remoteClassMap = remoteClassMap;\n    }\n    \n    @Override\n    public T put(Double key, T value) {\n        LinkedList<GameData> gameDatas = getUnaddedGameData(value);\n        T type = super.put(key,value);\n        sendPut(key, value, gameDatas);\n        return type;\n    }\n    \n    @Override\n    public T remove(Object key) {\n        quarry.writeByte((byte)1);\n        quarry.writeDouble((Double)key);\n        return super.remove(key);\n    }\n\n    @Override\n    public void putAll(Map<? extends Double, ? extends T> m) {\n        LinkedList<GameData>[] gameDatases = new LinkedList[m.size()];\n        int i=0;\n        for(T ms : m.values()){\n            gameDatases[i] = getUnaddedGameData(ms);\n            i++;\n        }\n        super.putAll(m);\n        i=0;\n        for(Map.Entry<? extends Double, ? extends T> ms : m.entrySet()){\n            sendPut(ms.getKey(),ms.getValue(),gameDatases[i]);\n            i++;\n        }\n    }\n\n    @Override\n    public void clear() {\n        quarry.writeByte((byte)2);\n        super.clear();\n    }\n    \n    private void sendPut(Double key,T value,LinkedList<GameData> unaddedGameData){\n        for(GameData gameData : unaddedGameData){\n            remoteClassMap.add",
    "package com.example;\n\nimport java.util.Set;\n\nimport javax.servlet.ServletContainerInitializer;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRegistration;\n\nimport org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\nimport org.springframework.web.servlet.DispatcherServlet;\n\npublic class ServletContainerInitializerImpl implements ServletContainerInitializer {\n\n    @Override\n    public void onStartup(final Set<Class<?>> c, final ServletContext ctx) throws ServletException {\n\n        final AnnotationConfigWebApplicationContext wac = new AnnotationConfigWebApplicationContext();\n        wac.register(MvcConfig.class);\n        wac.refresh();\n\n        final DispatcherServlet servlet = new DispatcherServlet(wac);\n        final ServletRegistration.Dynamic reg = ctx.addServlet(\"dispatcher\", servlet);\n        reg.addMapping(\"/*\");\n    }\n}\n",
    "package org.blendee.jdbc;\n\n/**\n * \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3092\u6301\u3064 SQL \u6587\u3068\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306b\u30bb\u30c3\u30c8\u3059\u308b\u5024\u3092\u6301\u3064\u3082\u306e\u3092\u8868\u3059\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\u3002\n * @author \u5343\u8449 \u54f2\u55e3\n */\npublic interface ComposedSQL extends ChainPreparedStatementComplementer {\n\n\t/**\n\t * \u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6301\u3064 SQL \u6587\u3092\u8fd4\u3057\u307e\u3059\u3002\n\t * @return SQL \u6587\n\t */\n\tString sql();\n\n\t/**\n\t * {@link PreparedStatementComplementer} \u3092\u5165\u308c\u66ff\u3048\u305f\u65b0\u3057\u3044 {@link ComposedSQL} \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\t * @param complementer \u5165\u308c\u66ff\u3048\u308b {@link PreparedStatementComplementer}\n\t * @return \u540c\u3058 SQL \u3092\u6301\u3064\u3001\u5225\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\t */\n\tdefault ComposedSQL reproduce(PreparedStatementComplementer complementer) {\n\t\tvar sql = sql();\n\t\treturn new ComposedSQL() {\n\n\t\t\t@Override\n\t\t\tpublic String sql() {\n\t\t\t\treturn sql;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int complement(int done, BPreparedStatement statement) {\n\t\t\t\tcomplementer.complement(statement);\n\t\t\t\treturn Integer.MIN_VALUE;\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * {@link ChainPreparedStatementComplementer} \u3092\u5165\u308c\u66ff\u3048\u305f\u65b0\u3057\u3044 {@link ComposedSQL} \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\t * @param complementer \u5165\u308c\u66ff\u3048\u308b {@link ChainPreparedStatementComplementer}\n\t * @return \u540c\u3058 SQL \u3092\u6301\u3064\u3001\u5225\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\t */\n\tdefault ComposedSQL reproduce(ChainPreparedStatementComplementer complementer) {\n\t\tvar sql = sql();\n\t\treturn new ComposedSQL() {\n\n\t\t\t@Override\n\t\t\tpublic String sql() {\n\t\t\t\treturn sql;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int complement(int done, BPreparedStatement statement) {\n\t\t\t\treturn complementer.complement(done, statement);\n\t\t\t}\n\t\t};\n\t}\n}\n",
    "package com.github.sixro.minihabits.core.infrastructure.domain;\r\n\r\nimport java.util.*;\r\n\r\nimport com.badlogic.gdx.Preferences;\r\nimport com.github.sixro.minihabits.core.domain.*;\r\n\r\npublic class PreferencesBasedRepository implements Repository {\r\n\r\n\tprivate final Preferences prefs;\r\n\t\r\n\tpublic PreferencesBasedRepository(Preferences prefs) {\r\n\t\tsuper();\r\n\t\tthis.prefs = prefs;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Set<MiniHabit> findAll() {\r\n\t\tString text = prefs.getString(\"mini_habits\");\r\n\t\tif (text == null || text.trim().isEmpty())\r\n\t\t\treturn new LinkedHashSet<MiniHabit>();\r\n\t\treturn newMiniHabits(text);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void add(MiniHabit miniHabit) {\r\n\t\tSet<MiniHabit> list = findAll();\r\n\t\tlist.add(miniHabit);\r\n\t\t\r\n\t\tprefs.putString(\"mini_habits\", asString(list));\r\n\t\tprefs.flush();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void update(Collection<MiniHabit> list) {\r\n\t\tSet<MiniHabit> currentList = findAll();\r\n\t\tcurrentList.removeAll(list);\r\n\t\tcurrentList.addAll(list);\r\n\t\t\r\n\t\tprefs.putString(\"mini_habits\", asString(currentList));\r\n\t\tprefs.flush();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updateProgressDate(DateAtMidnight aDate) {\r\n\t\tprefs.putLong(\"last_feedback_timestamp\", aDate.getTime());\r\n\t\tprefs.flush();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic DateAtMidnight lastFeedbackDate() {\r\n\t\tlong timestamp = prefs.getLong(\"last_feedback_timestamp\");\r\n\t\tif (timestamp == 0L)\r\n\t\t\treturn null;\r\n\t\treturn DateAtMidnight.from(timestamp);\r\n\t}\r\n\r\n\tprivate Set<MiniHabit> newMiniHabits(String text) {\r\n\t\tString[] parts = text.split(\",\");\r\n\t\tSet<MiniHabit> ret = new LinkedHashSet<MiniHabit>();\r\n\t\tfor (String part: parts)\r\n\t\t\tret.add(newMiniHabit(part));\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tprivate MiniHabit newMiniHabit(String part) {\r\n\t\tint indexOfColon = part.indexOf(':');\r\n\t\tString label = part.substring(0, indexOfColon);\r\n\t\tInteger daysInProgress = Integer.parseInt(part.substring(indexOfColon +1));\r\n\t\tMiniHabit habit = new MiniHabit(label, daysInProgress);\r\n\t\treturn habit;\r\n\t}\r\n\r\n\tprivate String asString(Collection<MiniHabit> list) {\r\n\t\tStringBuilder b = new StringBuilder();\r\n\t\tint i = 0;\r\n\t\tfor (MiniHabit each: list) {\r\n\t\t\tb.append(each.label() + \":\" + each.daysInProgress());\r\n\t\t\tif (i < list.size()-1)\r\n\t\t\t\tb.append(',');\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn b.toString();\r\n\t}\r\n\r\n}\r\n",
    "// John Meyer\n// CSE 271 F\n// Dr. Angel Bravo\n\nimport java.util.Scanner;\nimport java.io.*;\n\n/**\n * Copies a file with line numbers prefixed to every line\n */\npublic class Lab2InputOutput {\n    public static void main(String[] args) throws Exception {\n        // Define variables\n        Scanner keyboardReader = new Scanner(System.in);\n        String inputFileName;\n        String outputFileName;\n        // Check arguments\n        if (args.length == 0) {\n            System.out.println(\"Usage: java Lab2InputOutput /path/to/file\");\n            return;\n        }\n        inputFileName = args[0];\n        // Find input file\n        File inputFile = new File(inputFileName);\n        Scanner fileInput = new Scanner(inputFile);\n\n        // Get output file name\n        System.out.print(\"Output File Name: \");\n        outputFileName = keyboardReader.next();\n        File outputFile = new File(outputFileName);\n\n        // Start copying\n        PrintWriter fileOutput = new PrintWriter(outputFile);\n        String lineContent;\n        for (int lineNumber = 1; fileInput.hasNext(); lineNumber++) {\n            lineContent = fileInput.nextLine();\n            fileOutput.printf(\"/* %d */ %s%n\", lineNumber, lineContent);\n        }\n        fileInput.close();\n        fileOutput.close();\n    } // end method main\n} // end class Lab2InputOutput\n",
    "\npackage generated.zcsclient.mail;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for messagePartHitInfo complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType name=\"messagePartHitInfo\">\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;sequence>\n *         &lt;element name=\"e\" type=\"{urn:zimbraMail}emailInfo\" minOccurs=\"0\"/>\n *         &lt;element name=\"su\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/>\n *       &lt;/sequence>\n *       &lt;attribute name=\"id\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"sf\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"s\" type=\"{http://www.w3.org/2001/XMLSchema}long\" />\n *       &lt;attribute name=\"d\" type=\"{http://www.w3.org/2001/XMLSchema}long\" />\n *       &lt;attribute name=\"cid\" type=\"{http://www.w3.org/2001/XMLSchema}int\" />\n *       &lt;attribute name=\"mid\" type=\"{http://www.w3.org/2001/XMLSchema}int\" />\n *       &lt;attribute name=\"ct\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"name\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *       &lt;attribute name=\"part\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n *     &lt;/restriction>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"messagePartHitInfo\", propOrder = {\n    \"e\",\n    \"su\"\n})\npublic class testMessagePartHitInfo {\n\n    protected testEmailInfo e;\n    protected String su;\n    @XmlAttribute(name = \"id\")\n    protected String id;\n    @XmlAttribute(name = \"sf\")\n    protected String sf;\n    @XmlAttribute(name = \"s\")\n    protected Long s;\n    @XmlAttribute(name = \"d\")\n    protected Long d;\n    @XmlAttribute(name = \"cid\")\n    protected Integer cid;\n    @XmlAttribute(name = \"mid\")\n    protected Integer mid;\n    @XmlAttribute(name = \"ct\")\n    protected String ct;\n    @XmlAttribute(name = \"name\")\n    protected String name;\n    @XmlAttribute(name = \"part\")\n    protected String part;\n\n    /**\n     * Gets the value of the e property.\n     * \n     * @return\n     *     possible object is\n     *     {@link testEmailInfo }\n     *     \n     */\n    public testEmailInfo getE() {\n        return e;\n    }\n\n    /**\n     * Sets the value of the e property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link testEmailInfo }\n     *     \n     */\n    public void setE(testEmailInfo value) {\n        this.e = value;\n    }\n\n    /**\n     * Gets the value of the su property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getSu() {\n        return su;\n    }\n\n    /**\n     * Sets ",
    "package bits;\n\n/**\n * Created by krzysztofkaczor on 3/10/15.\n */\npublic class ExclusiveOrOperator implements BinaryOperator\n{\n    @Override\n    public BitArray combine(BitArray operand1, BitArray operand2) {\n        if(operand1.size() != operand2.size()) {\n            throw new IllegalArgumentException(\"ExclusiveOrOperator operands must have same size\");\n        }\n\n        int size = operand1.size();\n        BitArray result = new BitArray(size);\n\n        for (int i = 0;i < size;i++) {\n            boolean a = operand1.get(i);\n            boolean b = operand2.get(i);\n\n            result.set(i, a != b );\n        }\n\n        return result;\n    }\n}\n",
    "package net.comfreeze.lib;\n\nimport android.app.AlarmManager;\nimport android.app.Application;\nimport android.app.NotificationManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.Signature;\nimport android.content.res.Resources;\nimport android.location.LocationManager;\nimport android.media.AudioManager;\nimport android.support.v4.content.LocalBroadcastManager;\nimport android.util.Log;\n\nimport net.comfreeze.lib.audio.SoundManager;\n\nimport java.io.File;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Calendar;\nimport java.util.TimeZone;\n\nabstract public class CFZApplication extends Application {\n    public static final String TAG = \"CFZApplication\";\n    public static final String PACKAGE = \"com.rastermedia\";\n    public static final String KEY_DEBUG = \"debug\";\n    public static final String KEY_SYNC_PREFEX = \"sync_\";\n\n    public static SharedPreferences preferences = null;\n\n    protected static Context context = null;\n\n    protected static CFZApplication instance;\n\n    public static LocalBroadcastManager broadcast;\n\n    public static boolean silent = true;\n\n    @Override\n    public void onCreate() {\n        if (!silent)\n            Log.d(TAG, \"Initializing\");\n        instance = this;\n        setContext();\n        setPreferences();\n        broadcast = LocalBroadcastManager.getInstance(context);\n        super.onCreate();\n    }\n\n    @Override\n    public void onLowMemory() {\n        if (!silent)\n            Log.d(TAG, \"Low memory!\");\n        super.onLowMemory();\n    }\n\n    @Override\n    public void onTerminate() {\n        unsetContext();\n        if (!silent)\n            Log.d(TAG, \"Terminating\");\n        super.onTerminate();\n    }\n\n    abstract public void setPreferences();\n\n    abstract public void setContext();\n\n    abstract public void unsetContext();\n\n    abstract public String getProductionKey();\n\n    public static CFZApplication getInstance(Class<?> className) {\n        // log(\"Returning current application instance\");\n        if (instance == null) {\n            synchronized (className) {\n                if (instance == null)\n                    try {\n                        instance = (CFZApplication) className.newInstance();\n                    } catch (IllegalAccessException e) {\n                        e.printStackTrace();\n                    } catch (InstantiationException e) {\n                        e.printStackTrace();\n                    }\n            }\n        }\n        return instance;\n    }\n\n    public void clearApplicationData() {\n        File cache = getCacheDir();\n        File appDir = new File(cache.getParent());\n        if (appDir.exists()) {\n            String[] children = appDir.list();\n            for (String dir : children) {\n                if (!dir.equals(\"lib\")) {\n                    deleteDir(new File(ap",
    "package com.example.mesh;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.QueryParam;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/\")\n@Consumes(MediaType.APPLICATION_JSON)\n@Produces(MediaType.APPLICATION_JSON)\npublic class EndpointControlResource {\n\n    /**\n     * @see <a href=\"https://relay.bluejeans.com/docs/mesh.html#capabilities\">https://relay.bluejeans.com/docs/mesh.html#capabilities</a>\n     */\n    @GET\n    @Path(\"{ipAddress}/capabilities\")\n    public Map<String, Boolean> capabilities(@PathParam(\"ipAddress\") final String ipAddress,\n            @QueryParam(\"port\") final Integer port,\n            @QueryParam(\"name\") final String name) {\n        System.out.println(\"Received capabilities request\");\n        System.out.println(\"  ipAddress = \" + ipAddress);\n        System.out.println(\"  port = \" + port);\n        System.out.println(\"  name = \" + name);\n\n        final Map<String, Boolean> capabilities = new HashMap<>();\n        capabilities.put(\"JOIN\", true);\n        capabilities.put(\"HANGUP\", true);\n        capabilities.put(\"STATUS\", true);\n        capabilities.put(\"MUTEMICROPHONE\", true);\n        return capabilities;\n    }\n\n    /**\n     * @see <a href=\"https://relay.bluejeans.com/docs/mesh.html#status\">https://relay.bluejeans.com/docs/mesh.html#status</a>\n     */\n    @GET\n    @Path(\"{ipAddress}/status\")\n    public Map<String, Boolean> status(@PathParam(\"ipAddress\") final String ipAddress, @QueryParam(\"port\") final Integer port,\n            @QueryParam(\"name\") final String name) {\n        System.out.println(\"Received status request\");\n        System.out.println(\"  ipAddress = \" + ipAddress);\n        System.out.println(\"  port = \" + port);\n        System.out.println(\"  name = \" + name);\n\n        final Map<String, Boolean> status = new HashMap<>();\n        status.put(\"callActive\", false);\n        status.put(\"microphoneMuted\", false);\n        return status;\n    }\n\n    /**\n     * @see <a href=\"https://relay.bluejeans.com/docs/mesh.html#join\">https://relay.bluejeans.com/docs/mesh.html#join</a>\n     */\n    @POST\n    @Path(\"{ipAddress}/join\")\n    public void join(@PathParam(\"ipAddress\") final String ipAddress, @QueryParam(\"dialString\") final String dialString,\n            @QueryParam(\"meetingId\") final String meetingId, @QueryParam(\"passcode\") final String passcode,\n            @QueryParam(\"bridgeAddress\") final String bridgeAddress, final Endpoint endpoint) {\n        System.out.println(\"Received join request\");\n        System.out.println(\"  ipAddress = \" + ipAddress);\n        System.out.println(\"  dialString = \" + dialString);\n        System.out.println(\"  meetingId = \" + meetingId);\n        System.out.println(\"  passcode = \" + passcode);\n        System.out.println(\"  bridgeAddress = \" + bridgeAddress);\n        System.out.println(\"  endpoint = \" + endpoint);\n    }\n\n    /**\n  ",
    "/*\n * Encog(tm) Core v3.1 - Java Version\n * http://www.heatonresearch.com/encog/\n * http://code.google.com/p/encog-java/\n \n * Copyright 2008-2012 Heaton Research, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *   \n * For more information on Heaton Research copyrights, licenses \n * and trademarks visit:\n * http://www.heatonresearch.com/copyright\n */\npackage org.encog.plugin.system;\n\nimport org.encog.EncogError;\nimport org.encog.engine.network.activation.ActivationFunction;\nimport org.encog.ml.MLMethod;\nimport org.encog.ml.data.MLDataSet;\nimport org.encog.ml.factory.MLTrainFactory;\nimport org.encog.ml.factory.train.AnnealFactory;\nimport org.encog.ml.factory.train.BackPropFactory;\nimport org.encog.ml.factory.train.ClusterSOMFactory;\nimport org.encog.ml.factory.train.GeneticFactory;\nimport org.encog.ml.factory.train.LMAFactory;\nimport org.encog.ml.factory.train.ManhattanFactory;\nimport org.encog.ml.factory.train.NeighborhoodSOMFactory;\nimport org.encog.ml.factory.train.NelderMeadFactory;\nimport org.encog.ml.factory.train.PNNTrainFactory;\nimport org.encog.ml.factory.train.PSOFactory;\nimport org.encog.ml.factory.train.QuickPropFactory;\nimport org.encog.ml.factory.train.RBFSVDFactory;\nimport org.encog.ml.factory.train.RPROPFactory;\nimport org.encog.ml.factory.train.SCGFactory;\nimport org.encog.ml.factory.train.SVMFactory;\nimport org.encog.ml.factory.train.SVMSearchFactory;\nimport org.encog.ml.factory.train.TrainBayesianFactory;\nimport org.encog.ml.train.MLTrain;\nimport org.encog.plugin.EncogPluginBase;\nimport org.encog.plugin.EncogPluginService1;\n\npublic class SystemTrainingPlugin implements EncogPluginService1 {\n\t\n\t/**\n\t * The factory for K2\n\t */\n\tprivate final TrainBayesianFactory bayesianFactory = new TrainBayesianFactory();\n\t\n\t/**\n\t * The factory for backprop.\n\t */\n\tprivate final BackPropFactory backpropFactory = new BackPropFactory();\n\t\n\t/**\n\t * The factory for LMA.\n\t */\n\tprivate final LMAFactory lmaFactory = new LMAFactory();\n\t\n\t/**\n\t * The factory for RPROP.\n\t */\n\tprivate final RPROPFactory rpropFactory = new RPROPFactory();\n\t\n\t/**\n\t * THe factory for basic SVM.\n\t */\n\tprivate final SVMFactory svmFactory = new SVMFactory();\n\t\n\t/**\n\t * The factory for SVM-Search.\n\t */\n\tprivate final SVMSearchFactory svmSearchFactory = new SVMSearchFactory();\n\t\n\t/**\n\t * The factory for SCG.\n\t */\n\tprivate final SCGFactory scgFactory = new SCGFactory();\n\t\n\t/**\n\t * The factory for simulated annealing.\n\t */\n\tprivate final AnnealFactory annealFactory = new Anneal",
    "package controllers;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.List;\nimport java.util.Date;\n\nimport models.Usuario;\nimport play.Play;\nimport play.mvc.*;\nimport play.data.validation.*;\nimport play.libs.*;\nimport play.utils.*;\n\npublic class Secure extends Controller {\n\n    @Before(unless={\"login\", \"authenticate\", \"logout\"})\n    static void checkAccess() throws Throwable {\n        // Authent\n        if(!session.contains(\"username\")) {\n            flash.put(\"url\", \"GET\".equals(request.method) ? request.url : Play.ctxPath + \"/\"); // seems a good default\n            login();\n        }\n        // Checks\n        Check check = getActionAnnotation(Check.class);\n        if(check != null) {\n            check(check);\n        }\n        check = getControllerInheritedAnnotation(Check.class);\n        if(check != null) {\n            check(check);\n        }\n    }\n\n    private static void check(Check check) throws Throwable {\n        for(String profile : check.value()) {\n            boolean hasProfile = (Boolean)Security.invoke(\"check\", profile);\n            if(!hasProfile) {\n                Security.invoke(\"onCheckFailed\", profile);\n            }\n        }\n    }\n\n    // ~~~ Login\n\n    public static void login() throws Throwable {\n        Http.Cookie remember = request.cookies.get(\"rememberme\");\n        if(remember != null) {\n            int firstIndex = remember.value.indexOf(\"-\");\n            int lastIndex = remember.value.lastIndexOf(\"-\");\n            if (lastIndex > firstIndex) {\n                String sign = remember.value.substring(0, firstIndex);\n                String restOfCookie = remember.value.substring(firstIndex + 1);\n                String username = remember.value.substring(firstIndex + 1, lastIndex);\n                String time = remember.value.substring(lastIndex + 1);\n                Date expirationDate = new Date(Long.parseLong(time)); // surround with try/catch?\n                Date now = new Date();\n                if (expirationDate == null || expirationDate.before(now)) {\n                    logout();\n                }\n                if(Crypto.sign(restOfCookie).equals(sign)) {\n                    session.put(\"username\", username);\n                    redirectToOriginalURL();\n                }\n            }\n        }\n        flash.keep(\"url\");\n        render();\n    }\n\n    public static void authenticate(@Required String username, String password, boolean remember) throws Throwable {\n    \t\n    \t// Check tokens\n        //Boolean allowed = false;\n    \t\n    \tUsuario usuario = Usuario.find(\"usuario = ? and clave = ?\", username, password).first();\n    \t\n    \tif(usuario != null){\n    \t\t//session.put(\"nombreCompleto\", usuario.nombreCompleto);\n    \t\t//session.put(\"idUsuario\", usuario.id);\n    \t\t//if(usuario.tienda != null){\n    \t\t\t//session.put(\"idTienda\", usuario.id);\n    \t\t//}\n    \t\t//allowed = true;\n    \t} else {\n    \t\tflash.keep(\"url\");\n            flash.error(\"secure.error\");\n            params.flash();\n            lo",
    "/**\n * \n */\npackage org.edtoktay.dynamic.compiler;\n\n/**\n * @author deniz.toktay\n *\n */\npublic interface ExampleInterface {\n\tvoid addObject(String arg1, String arg2);\n\tObject getObject(String arg1);\n}\n",
    "package org.squirrel;\n\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.Timer;\n\nimport org.squirrel.managers.PrisonerControllor;\nimport org.squirrel.managers.inputManager;\nimport org.squirrel.objects.Player;\nimport org.squirrel.ui.Hud;\nimport org.squirrel.world.World;\n\npublic class Game extends JPanel implements ActionListener{\n\n\tprivate static final long serialVersionUID = -8805039320208612585L;\n\tpublic static String name = JOptionPane.showInputDialog(null,\"What is your name?\",\"Welcome to Prison Survival\", JOptionPane.QUESTION_MESSAGE);\n\tTimer gameLoop;\n\tPlayer player;\n\tPrisonerControllor prict;\n\tHud hud;\n\tWorld world1;\n\t\n\tpublic Game(){\n\t\tsetFocusable(true);\n\t\t\n\t\tgameLoop = new Timer(10, this);\n\t\tgameLoop.start();\n\t\t\n\t\tplayer = new Player(300, 300);\n\t\tprict = new PrisonerControllor();\n\t\thud = new Hud();\n\t\tworld1 = new World();\n\t\taddKeyListener(new inputManager(player));\n\t}\n\t\n\tpublic void paint(Graphics g){\n\t\tsuper.paint(g);\n\t\tGraphics2D g2d = (Graphics2D) g;\n\n\t\t//Camera\n\t\tint offsetMaxX = 1600 - 800;\n\t\tint offsetMaxY = 1200 - 600;\n\t\tint offsetMinX = 0;\n\t\tint offsetMinY = 0;\n\t\t\n\t\tint camX = player.getxPos() - 800 /2;\n\t\tint camY = player.getyPos() - 600 /2;\n\t\t\n\t\t//if (camX > offsetMaxX){\n\t\t//    camX = offsetMaxX;\n\t\t//}\n\t\t//else if (camX < offsetMinX){\n\t\t//    camX = offsetMinX;\n\t\t//}\t\t\n\t\t//if (camY > offsetMaxY){\n\t\t//    camY = offsetMaxY;\n\t\t//}\n\t\t//else if (camY < offsetMinY){\n\t\t//    camY = offsetMinY;\n\t\t//}\n\n\t\tg2d.translate(-camX, -camY);\n\t\t// Render everything\n\t\tworld1.draw(g2d);\n\t\thud.draw(g2d);\n\t\tprict.draw(g2d);\n\t\tplayer.draw(g2d);\n\t\tg.translate(camX, camY);\n\t\t\n\t}\n\t@Override\n\tpublic void actionPerformed(ActionEvent e) {\n\t\ttry {\n\t\t\tplayer.update();\n\t\t\thud.update();\n\t\t\tprict.update();\n\t\t\tworld1.update();\n\t\t\trepaint();\n\t\t} catch (Exception e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\n\t}\n\n}\n",
    "package com.xeiam.xchange.cryptotrade.dto;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.ObjectCodec;\nimport com.fasterxml.jackson.databind.DeserializationContext;\nimport com.fasterxml.jackson.databind.JsonDeserializer;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.xeiam.xchange.cryptotrade.dto.CryptoTradeOrderType.CryptTradeOrderTypeDeserializer;\n\n@JsonDeserialize(using = CryptTradeOrderTypeDeserializer.class)\npublic enum CryptoTradeOrderType {\n\n  Buy, Sell;\n\n  static class CryptTradeOrderTypeDeserializer extends JsonDeserializer<CryptoTradeOrderType> {\n\n    @Override\n    public CryptoTradeOrderType deserialize(final JsonParser jsonParser, final DeserializationContext ctxt) throws IOException, JsonProcessingException {\n\n      final ObjectCodec oc = jsonParser.getCodec();\n      final JsonNode node = oc.readTree(jsonParser);\n      final String orderType = node.asText();\n      return CryptoTradeOrderType.valueOf(orderType);\n    }\n  }\n}\n",
    "package com.github.aureliano.evtbridge.output.file;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Set;\n\nimport org.junit.Test;\n\nimport com.github.aureliano.evtbridge.annotation.validation.NotNull;\nimport com.github.aureliano.evtbridge.annotation.validation.apply.ConstraintViolation;\nimport com.github.aureliano.evtbridge.annotation.validation.apply.ObjectValidator;\nimport com.github.aureliano.evtbridge.core.config.OutputConfigTypes;\n\npublic class FileOutputConfigTest {\n\t\n\tObjectValidator validator = ObjectValidator.instance();\n\n\t@Test\n\tpublic void testGetDefaults() {\n\t\tFileOutputConfig c = new FileOutputConfig();\n\t\tassertNull(c.getFile());\n\t\tassertEquals(\"UTF-8\", c.getEncoding());\n\t\tassertFalse(c.isAppend());\n\t\tassertTrue(c.isUseBuffer());\n\t}\n\t\n\t@Test\n\tpublic void testConfiguration() {\n\t\tFileOutputConfig c = new FileOutputConfig()\n\t\t\t.withAppend(true)\n\t\t\t.withEncoding(\"ISO-8859-1\")\n\t\t\t.withFile(\"/there/is/not/file\");\n\t\t\n\t\tassertEquals(\"/there/is/not/file\", c.getFile().getPath());\n\t\tassertEquals(\"ISO-8859-1\", c.getEncoding());\n\t\tassertTrue(c.isAppend());\n\t}\n\t\n\t@Test\n\tpublic void testClone() {\n\t\tFileOutputConfig c1 = new FileOutputConfig()\n\t\t\t.withAppend(true)\n\t\t\t.withUseBuffer(false)\n\t\t\t.withEncoding(\"ISO-8859-1\")\n\t\t\t.withFile(\"/there/is/not/file\")\n\t\t\t.putMetadata(\"test\", \"my test\");\n\t\t\n\t\tFileOutputConfig c2 = c1.clone();\n\t\tassertEquals(c1.getFile(), c2.getFile());\n\t\tassertEquals(c1.getEncoding(), c2.getEncoding());\n\t\tassertEquals(c1.isAppend(), c2.isAppend());\n\t\tassertEquals(c1.isUseBuffer(), c2.isUseBuffer());\n\t\tassertEquals(c1.getMetadata(\"test\"), c2.getMetadata(\"test\"));\n\t}\n\t\n\t@Test\n\tpublic void testOutputType() {\n\t\tassertEquals(OutputConfigTypes.FILE_OUTPUT.name(), new FileOutputConfig().id());\n\t}\n\t\n\t@Test\n\tpublic void testValidation() {\n\t\tFileOutputConfig c = this.createValidConfiguration();\n\t\tassertTrue(this.validator.validate(c).isEmpty());\n\t\t\n\t\tthis._testValidateFile();\n\t}\n\t\n\tprivate void _testValidateFile() {\n\t\tFileOutputConfig c = new FileOutputConfig();\n\t\tSet<ConstraintViolation> violations = this.validator.validate(c);\n\t\tassertTrue(violations.size() == 1);\n\t\tassertEquals(NotNull.class, violations.iterator().next().getValidator());\n\t}\n\n\tprivate FileOutputConfig createValidConfiguration() {\n\t\treturn new FileOutputConfig().withFile(\"/path/to/file\");\n\t}\n}",
    "// THIS CODE IS MACHINE-GENERATED, DO NOT EDIT!\n\npackage fallk.jfunktion;\n\n/**\n * Represents a predicate (boolean-valued function) of a {@code float}-valued and a generic argument.\n * This is the primitive type specialization of\n * {@link java.util.function.BiPredicate} for {@code float}/{@code char}.\n *\n * @see java.util.function.BiPredicate\n */\n@FunctionalInterface\npublic interface FloatObjectPredicate<E> {\n\n    /**\n     * Evaluates this predicate on the given arguments.\n     *\n     * @param v1 the {@code float} argument\n     * @param v2 the generic argument\n     * @return {@code true} if the input arguments match the predicate,\n     * otherwise {@code false}\n     */\n    boolean apply(float v1, E v2);\n}\n",
    "package com.carbon108.tilde;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\nimport java.util.Collection;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * @author K Moroz\n * @version 1.0\n */\npublic class PrimaryModelFactoryTest {\n\n\tprivate PrimaryModelFactory factory;\n\n\t@Before\n\tpublic void setUp() {\n\t\tfactory = new PrimaryModelFactory();\n\t}\n\n\t@Rule\n\tpublic final ExpectedException exception = ExpectedException.none();\n\n\t@Test\n\tpublic void getIDsGetsAllValidModelIDs() {\n\t\tCollection<String> factoryIDs = factory.getIDs();\n\t\tassertEquals(2, factoryIDs.size());\n\t\tassertEquals(true, factoryIDs.contains(ModelID.LINEAR));\n\t\tassertEquals(true, factoryIDs.contains(ModelID.CONSTANT));\n\n\t\t// check immutability\n\t\texception.expect(UnsupportedOperationException.class);\n\t\tfactoryIDs.add(\"someString\");\n\t}\n\n\t@Test\n\tpublic void makeValidModelIDGetsModel() {\n\t\tTildeModel model1 = factory.make(ModelID.LINEAR);\n\t\tTildeModel model2 = factory.make(ModelID.CONSTANT);\n\t\tassertEquals(ModelID.LINEAR, model1.getID());\n\t\tassertEquals(ModelID.CONSTANT, model2.getID());\n\t}\n\n\t@Test\n\tpublic void makeInvalidIDGetsNullModel() {\n\t\tTildeModel m1null = factory.make(null);\n\t\tTildeModel m1blank = factory.make(\"\");\n\t\tTildeModel m2invalid = factory.make(\"invalidModelID\");\n\t\tassertTrue(m1null.isNullModel());\n\t\tassertTrue(m1blank.isNullModel());\n\t\tassertTrue(m2invalid.isNullModel());\n\t}\n\n\t@Test\n\tpublic void makeAll() {\n\t\tCollection<TildeModel> models = factory.makeAll();\n\t\tassertEquals(2, models.size());\n\t\tassertEquals(true, models.contains(new LinearModel()));\n\t\tassertEquals(true, models.contains(new ConstantModel()));\n\t}\n\n}\n",
    "/**\n * @copyright Copyright (C) DocuSign, Inc.  All rights reserved.\n *\n * This source code is intended only as a supplement to DocuSign SDK\n * and/or on-line documentation.\n * \n * This sample is designed to demonstrate DocuSign features and is not intended\n * for production use. Code and policy for a production application must be\n * developed to meet the specific data and security requirements of the\n * application.\n *\n * THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY\n * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A\n * PARTICULAR PURPOSE.\n */\npackage net.docusign.sample;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.GregorianCalendar;\nimport java.util.List;\nimport java.util.UUID;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.xml.datatype.DatatypeConfigurationException;\nimport javax.xml.datatype.DatatypeFactory;\n\nimport net.docusign.api_3_0.APIServiceSoap;\nimport net.docusign.api_3_0.ArrayOfString2;\nimport net.docusign.api_3_0.EnvelopePDF;\nimport net.docusign.api_3_0.EnvelopeStatusFilter;\nimport net.docusign.api_3_0.FilteredEnvelopeStatuses;\nimport net.docusign.api_3_0.RequestRecipientTokenAuthenticationAssertion;\nimport net.docusign.api_3_0.RequestRecipientTokenAuthenticationAssertionAuthenticationMethod;\nimport net.docusign.api_3_0.RequestRecipientTokenClientURLs;\n\n/**\n * Servlet implementation class GetStatusAndDocs\n */\npublic class GetStatusAndDocs extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n       \n    /**\n     * @see HttpServlet#HttpServlet()\n     */\n    public GetStatusAndDocs() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n\t/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\trequest.getSession().setAttribute(Utils.SESSION_EMBEDTOKEN, \"\");\n\n\t\tHttpSession session = request.getSession();\n\n        // Make sure we're logged in\n\t\tif (session.getAttribute(Utils.SESSION_LOGGEDIN) == null ||\n\t\t\t\tsession.getAttribute(Utils.SESSION_LOGGEDIN).equals(false)) {\n\t\t\t\tresponse.sendRedirect(Utils.CONTROLLER_LOGIN);\n\t\t}\n\t\telse {\n\t\t\n\t\t    // Do we have envelope IDs in this session?\n\t\t\tif (session.getAttribute(Utils.SESSION_ENVELOPEIDS) != null) {\n\t\t\t\tAPIServiceSoap api = Utils.getAPI(request);\n\t\t\t\t\n\t\t\t\t// Grab all the envelope IDs in this session\n\t\t\t\tArrayOfString2 envIDs = new ArrayOfString2();\n\t\t\t\tenvIDs.getEnvelopeId().addAll((List<String>) session.getAttribute(Utils.SESSION_ENVELOPEIDS));\n\t\t\t\t\n\t\t\t\t// Create a filter so we only retrieve these envelope statuses\n\t\t\t\tEnvelopeStatusF",
    "package com.pablodomingos.classes.rps.servicos;\r\n\r\nimport java.io.IOException;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\nimport com.pablodomingos.classes.FabricaDeObjetosFake;\r\n\r\npublic class LoteRpsConsultaTest {\r\n\r\n  @Test\r\n  public void xmlDeveSerGeradoCorretamente() throws IOException{\r\n    String xmlTest = IOUtils.toString(getClass().getClassLoader().getResourceAsStream(\"loteRPSConsulta.xml\"));\r\n    LoteRpsConsulta consultaLote = new LoteRpsConsulta(\"AP1057893n16X103sfhF4RPm\", FabricaDeObjetosFake.getRpsPrestador());\r\n    String xml = consultaLote.converterParaXml();\r\n    \r\n    Assert.assertEquals(xml, xmlTest);\r\n  }\r\n  \r\n}\r\n\r\n\r\n",
    "/**\n * Copyright 2017, 2018, 2019, 2020 Stephen Powis https://github.com/Crim/pardot-java-client\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n * Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage com.darksci.pardot.api.parser.user;\n\nimport com.darksci.pardot.api.parser.JacksonFactory;\nimport com.darksci.pardot.api.parser.ResponseParser;\nimport com.darksci.pardot.api.response.user.UserAbilitiesResponse;\n\nimport java.io.IOException;\n\n/**\n * Handles parsing UserAbilities API responses into POJOs.\n */\npublic class UserAbilitiesParser implements ResponseParser<UserAbilitiesResponse.Result> {\n\n    @Override\n    public UserAbilitiesResponse.Result parseResponse(final String responseStr) throws IOException {\n        return JacksonFactory.newInstance().readValue(responseStr, UserAbilitiesResponse.class).getResult();\n    }\n}\n",
    "package data_struct.in_class.d10_02;\n/**\n * A class to test basic 'Object' methods\n * \n * @author Eddie Gurnee\n * @version 10/02/13\n * @see TestingSam\n * \n */\npublic class Sam {\n\tpublic int mikesplan = 8;\n\t/**\n\t * No argument constructor for the Sam class\n\t * \n\t */\n\tpublic Sam() {\n\t\t\n\t}\n\t/**\n\t * Indicates if some other \"Sam\" object is equal to this one.\n\t * \n\t */\n\t\n\tpublic boolean equals(Sam otherObject) {\n\t\tif (otherObject == null) {\n\t\t\tSystem.out.println(\"check1\");\n\t\t\treturn false;\n\t\t}\n\t\telse if (this.getClass() != otherObject.getClass()) {\n\t\t\tSystem.out.println(\"check2\");\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"if this shows then fuck the police\");\n\t\t\tSam otherSam = (Sam)otherObject;\n\t\t\treturn this.mikesplan == otherSam.mikesplan;\n\t\t}\n\t}\n\tpublic int getMikesPlan() {\n\t\treturn mikesplan;\n\t}\n}",
    "/*\n * Hibernate, Relational Persistence for Idiomatic Java\n *\n * Copyright (c) 2011, Red Hat Inc. or third-party contributors as\n * indicated by the @author tags or express copyright attribution\n * statements applied by the authors.  All third-party contributions are\n * distributed under license by Red Hat Inc.\n *\n * This copyrighted material is made available to anyone wishing to use, modify,\n * copy, or redistribute it subject to the terms and conditions of the GNU\n * Lesser General Public License, as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution; if not, write to:\n * Free Software Foundation, Inc.\n * 51 Franklin Street, Fifth Floor\n * Boston, MA  02110-1301  USA\n */\npackage org.hibernate.test.annotations.cascade;\n\nimport java.util.HashSet;\n\nimport org.junit.Test;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\nimport org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n\nimport static org.junit.Assert.fail;\n\n/**\n * @author Jeff Schnitzer\n * @author Gail Badner\n */\n@SuppressWarnings(\"unchecked\")\npublic class NonNullableCircularDependencyCascadeTest extends BaseCoreFunctionalTestCase {\n\t@Test\n\tpublic void testIdClassInSuperclass() throws Exception {\n\t\tSession s = openSession();\n\t\tTransaction tx = s.beginTransaction();\n\t\tParent p = new Parent();\n\t\tp.setChildren( new HashSet<Child>() );\n\n\t\tChild ch = new Child(p);\n\t\tp.getChildren().add(ch);\n\t\tp.setDefaultChild(ch);\n\n\t\ttry {\n\t\t\ts.persist(p);\n\t\t\ts.flush();\n\t\t\tfail( \"should have failed because of transient entities have non-nullable, circular dependency.\" );\n\t\t}\n\t\tcatch ( HibernateException ex) {\n\t\t\t// expected\n\t\t}\n\t\ttx.rollback();\n\t\ts.close();\n\t}\n\n\t@Override\n\tprotected Class[] getAnnotatedClasses() {\n\t\treturn new Class[]{\n\t\t\t\tChild.class,\n\t\t\t\tParent.class\n\t\t};\n\t}\n}\n",
    "package softuni.io;\n\n\nimport org.springframework.stereotype.Component;\n\nimport java.io.*;\n\n@Component\npublic class FileParser {\n    public String readFile(String path) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        try (InputStream is = this.getClass().getResourceAsStream(path);\n             BufferedReader bfr = new BufferedReader(new InputStreamReader(is))) {\n\n            String line = bfr.readLine();\n            while (line != null) {\n                stringBuilder.append(line);\n                line = bfr.readLine();\n            }\n        }\n\n        return stringBuilder.toString();\n    }\n\n    public void writeFile(String path, String content) throws IOException {\n        File file = new File(System.getProperty(\"user.dir\") + File.separator + path);\n        if (!file.exists()) {\n\n                file.createNewFile();\n\n        }\n        try (OutputStream os = new FileOutputStream(System.getProperty(\"user.dir\")+ File.separator + path);\n             BufferedWriter bfw = new BufferedWriter(new OutputStreamWriter(os))) {\n\n            bfw.write(content);\n        }\n    }\n}\n",
    "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage de.comci.bigbib;\n\nimport com.mongodb.BasicDBObject;\nimport com.mongodb.DBObject;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport org.bson.types.ObjectId;\nimport org.codehaus.jackson.annotate.JsonProperty;\nimport org.jbibtex.BibTeXEntry;\nimport org.jbibtex.Key;\nimport org.jbibtex.StringValue;\nimport org.jbibtex.Value;\n\n/**\n *\n * @author Sebastian\n */\n@XmlRootElement()\n@XmlAccessorType(XmlAccessType.NONE)\npublic class PeristentBibTexEntry extends BibTeXEntry {\n\n    private ObjectId id;\n    \n    public PeristentBibTexEntry(Key type, Key key) {\n        super(type, key);\n    }\n    \n    static Map<String, Key> keyMapping = new HashMap<String, Key>();\n    static {\n        keyMapping.put(\"address\", BibTeXEntry.KEY_ADDRESS);\n        keyMapping.put(\"annote\", BibTeXEntry.KEY_ANNOTE);\n        keyMapping.put(\"author\", BibTeXEntry.KEY_AUTHOR);\n        keyMapping.put(\"booktitle\", BibTeXEntry.KEY_BOOKTITLE);\n        keyMapping.put(\"chapter\", BibTeXEntry.KEY_CHAPTER);\n        keyMapping.put(\"crossref\", BibTeXEntry.KEY_CROSSREF);\n        keyMapping.put(\"doi\", BibTeXEntry.KEY_DOI);\n        keyMapping.put(\"edition\", BibTeXEntry.KEY_EDITION);\n        keyMapping.put(\"editor\", BibTeXEntry.KEY_EDITOR);\n        keyMapping.put(\"eprint\", BibTeXEntry.KEY_EPRINT);\n        keyMapping.put(\"howpublished\", BibTeXEntry.KEY_HOWPUBLISHED);\n        keyMapping.put(\"institution\", BibTeXEntry.KEY_INSTITUTION);\n        keyMapping.put(\"journal\", BibTeXEntry.KEY_JOURNAL);\n        keyMapping.put(\"key\", BibTeXEntry.KEY_KEY);\n        keyMapping.put(\"month\", BibTeXEntry.KEY_MONTH);\n        keyMapping.put(\"note\", BibTeXEntry.KEY_NOTE);\n        keyMapping.put(\"number\", BibTeXEntry.KEY_NUMBER);\n        keyMapping.put(\"organization\", BibTeXEntry.KEY_ORGANIZATION);\n        keyMapping.put(\"pages\", BibTeXEntry.KEY_PAGES);\n        keyMapping.put(\"publisher\", BibTeXEntry.KEY_PUBLISHER);\n        keyMapping.put(\"school\", BibTeXEntry.KEY_SCHOOL);\n        keyMapping.put(\"series\", BibTeXEntry.KEY_SERIES);\n        keyMapping.put(\"title\", BibTeXEntry.KEY_TITLE);\n        keyMapping.put(\"type\", BibTeXEntry.KEY_TYPE);\n        keyMapping.put(\"url\", BibTeXEntry.KEY_URL);\n        keyMapping.put(\"volume\", BibTeXEntry.KEY_VOLUME);\n        keyMapping.put(\"year\", BibTeXEntry.KEY_YEAR);\n    }\n    \n    public PeristentBibTexEntry(DBObject persistentObject) {\n        super(\n            new Key((String) persistentObject.get(\"type\")), \n            new Key((String) persistentObject.get(\"key\"))\n        );\n        BasicDBObject fields = (BasicDBObject) persistentObject.get(\"fields\");\n        id =  (ObjectId) persistentObject.get(\"_id\");\n        for (String key : fields.keySet()) {\n            if (",
    "/*\n *  This file was autogenerated by the GPUdb schema processor.\n *\n *  DO NOT EDIT DIRECTLY.\n */\npackage com.gpudb.protocol;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.apache.avro.Schema;\nimport org.apache.avro.SchemaBuilder;\nimport org.apache.avro.generic.GenericData;\nimport org.apache.avro.generic.IndexedRecord;\n\n\n/**\n * A set of parameters for {@link\n * com.gpudb.GPUdb#filterByValue(FilterByValueRequest)}.\n * <p>\n * Calculates which objects from a table has a particular value for a\n * particular column. The input parameters provide a way to specify either a\n * String\n * or a Double valued column and a desired value for the column on which the\n * filter\n * is performed. The operation is synchronous, meaning that a response will not\n * be\n * returned until all the objects are fully available. The response payload\n * provides the count of the resulting set. A new result view which satisfies\n * the\n * input filter restriction specification is also created with a view name\n * passed\n * in as part of the input payload.  Although this functionality can also be\n * accomplished with the standard filter function, it is more efficient.\n */\npublic class FilterByValueRequest implements IndexedRecord {\n    private static final Schema schema$ = SchemaBuilder\n            .record(\"FilterByValueRequest\")\n            .namespace(\"com.gpudb\")\n            .fields()\n                .name(\"tableName\").type().stringType().noDefault()\n                .name(\"viewName\").type().stringType().noDefault()\n                .name(\"isString\").type().booleanType().noDefault()\n                .name(\"value\").type().doubleType().noDefault()\n                .name(\"valueStr\").type().stringType().noDefault()\n                .name(\"columnName\").type().stringType().noDefault()\n                .name(\"options\").type().map().values().stringType().noDefault()\n            .endRecord();\n\n\n    /**\n     * This method supports the Avro framework and is not intended to be called\n     * directly by the user.\n     * \n     * @return  the schema for the class.\n     * \n     */\n    public static Schema getClassSchema() {\n        return schema$;\n    }\n\n\n    /**\n     * Optional parameters.\n     * <ul>\n     *         <li> {@link\n     * com.gpudb.protocol.FilterByValueRequest.Options#COLLECTION_NAME\n     * COLLECTION_NAME}: [DEPRECATED--please specify the containing schema for\n     * the view as part of {@code viewName} and use {@link\n     * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to create the schema\n     * if non-existent]  Name of a schema for the newly created view. If the\n     * schema is non-existent, it will be automatically created.\n     * </ul>\n     * The default value is an empty {@link Map}.\n     * A set of string constants for the parameter {@code options}.\n     */\n    public static final class Options {\n\n        /**\n         * [DEPRECATED--please specify the containing schema for the view as\n         * part of {@code viewName} and use {@link\n         * com.gp",
    "/*\n * Copyright 2017 Max Schafer, Ammar Mahdi, Riley Dixon, Steven Weikai Lu, Jiaxiong Yang\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage com.example.lit.habit;\n\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport android.util.Base64;\nimport android.util.Log;\n\nimport com.example.lit.exception.BitmapTooLargeException;\nimport com.example.lit.exception.HabitFormatException;\nimport com.example.lit.saving.Saveable;\nimport com.example.lit.exception.HabitFormatException;\nimport io.searchbox.annotations.JestId;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.Serializable;\nimport java.text.ParsePosition;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * This class is an abstract habit class\n * @author Steven Weikai Lu\n */\npublic abstract class Habit implements Habitable , Parcelable, Saveable {\n\n    private String title;\n    private SimpleDateFormat format;\n    private Date date;\n    public abstract String habitType();\n    private String user;\n    private String reason;\n    private int titleLength = 20;\n    private int reasonLength = 30;\n    private List<Calendar> calendars;\n    private List<Date> dates;\n    private String encodedImage;\n\n    @JestId\n    private String id;\n    private Bitmap image;\n\n    public String getID(){ return id ;}\n\n    public void setID(String id){ this.id = id ;}\n\n\n    public Habit(String title) throws HabitFormatException {\n        this.setTitle(title);\n        this.setDate(new Date());\n    }\n\n    public Habit(String title, Date date) throws HabitFormatException{\n        this.setTitle(title);\n        this.setDate(date);\n    }\n\n    public Habit(String title, Date date, String reason) throws HabitFormatException {\n        this.setTitle(title);\n        this.setDate(date);\n        this.setReason(reason);\n    }\n\n    /**\n     * This is the main constructor we are using i",
    "package org.vitrivr.cineast.core.util.audio.pitch.tracking;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.apache.commons.math3.stat.descriptive.SummaryStatistics;\nimport org.vitrivr.cineast.core.util.audio.pitch.Pitch;\n\n/**\n * This is a helper class for pitch tracking. It represents a pitch contour, that is, a candidate for a melody fragment. The contour has a fixed length and each slot in the sequence represents a specific timeframe (e.g. belonging to a FFT bin in the underlying STFT).\n * <p>\n * The intention behind this class is the simplification of comparison between different pitch contours, either on a frame-by-frame basis but also as an entity. In addition to the actual pitch information, the pitch contour class also provides access to pitch contour statistics related to salience and pitch frequency.\n *\n * @see PitchTracker\n */\npublic class PitchContour {\n\n  /**\n   * The minimum frequency in Hz on the (artifical) cent-scale.\n   */\n  private static final float CENT_SCALE_MINIMUM = 55.0f;\n\n  /**\n   * Entity that keeps track of salience related contour statistics.\n   */\n  private SummaryStatistics salienceStatistics = new SummaryStatistics();\n\n  /**\n   * Entity that keeps track of frequency related contour statistics.\n   */\n  private SummaryStatistics frequencyStatistics = new SummaryStatistics();\n\n  /**\n   * Sequence of pitches that form the PitchContour.\n   */\n  private final List<Pitch> contour = new LinkedList<>();\n\n  /**\n   * Indicates that the PitchContour statistics require recalculation.\n   */\n  private boolean dirty = true;\n\n  /**\n   * The start frame-index of the pitch-contour. Marks beginning in time.\n   */\n  private int start;\n\n  /**\n   * The end frame-index of the pitch-contour. Marks ending in time.\n   */\n  private int end;\n\n  /**\n   * Constructor for PitchContour.\n   *\n   * @param start Start-index of the contour.\n   * @param pitch Pitch that belongs to the start-index.\n   */\n  public PitchContour(int start, Pitch pitch) {\n    this.start = start;\n    this.end = start;\n    this.contour.add(pitch);\n  }\n\n  /**\n   * Sets the pitch at the given index if the index is within the bounds of the PitchContour.\n   *\n   * @param p Pitch to append.\n   */\n  public void append(Pitch p) {\n    this.contour.add(p);\n    this.end += 1;\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the pitch at the given index if the index is within the bounds of the PitchContour.\n   *\n   * @param p Pitch to append.\n   */\n  public void prepend(Pitch p) {\n    this.contour.add(0, p);\n    this.start -= 1;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns the pitch at the given index or null, if the index is out of bounds. Note that even if the index is within bounds, the Pitch can still be null.\n   *\n   * @param i Index for which to return a pitch.\n   */\n  public Pitch getPitch(int i) {\n    if (i >= this.start && i <= this.end) {\n      return this.contour.get(i - this.start);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Getter for start.\n   *\n   *",
    "package com.company;\n\nimport java.util.Scanner;\n\npublic class EvenPowersOf2 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int n = Integer.parseInt(scanner.nextLine());\n        int num = 1;\n\n        for (int i = 0; i <= n ; i+=2) {\n            System.out.println(num);\n            num *= 4;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2020 by Stefan Schubert under the MIT License (MIT).\n * See project LICENSE file for the detailed terms and conditions.\n */\n\npackage de.bluewhale.sabi.webclient.rest.exceptions;\n\n\nimport de.bluewhale.sabi.exception.ExceptionCode;\nimport de.bluewhale.sabi.exception.MessageCode;\nimport de.bluewhale.sabi.exception.TankExceptionCodes;\n\n/**\n * MessageCodes that may arise by using the Tank Restservice\n *\n * @author schubert\n */\npublic enum TankMessageCodes implements MessageCode {\n\n    NO_SUCH_TANK(TankExceptionCodes.TANK_NOT_FOUND_OR_DOES_NOT_BELONG_TO_USER);\n\n// ------------------------------ FIELDS ------------------------------\n\n    private TankExceptionCodes exceptionCode;\n\n// --------------------------- CONSTRUCTORS ---------------------------\n\n    TankMessageCodes() {\n        exceptionCode = null;\n    }\n\n    TankMessageCodes(TankExceptionCodes pExceptionCode) {\n        exceptionCode = pExceptionCode;\n    }\n\n// --------------------- GETTER / SETTER METHODS ---------------------\n\n    @Override\n    public ExceptionCode getExceptionCode() {\n        return exceptionCode;\n    }\n}\n",
    "package okeanos.data.services.entities;\n\nimport javax.measure.quantity.Power;\n\nimport org.jscience.physics.amount.Amount;\n\npublic interface Price {\n\tdouble getCostAtConsumption(Amount<Power> consumption);\n}\n",
    "package com.ruenzuo.weatherapp.adapters;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.TextView;\n\nimport com.ruenzuo.weatherapp.R;\nimport com.ruenzuo.weatherapp.models.City;\n\n/**\n * Created by ruenzuo on 08/05/14.\n */\npublic class CitiesAdapter extends ArrayAdapter<City> {\n\n    private int resourceId;\n\n    public CitiesAdapter(Context context, int resource) {\n        super(context, resource);\n        resourceId = resource;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        if (convertView == null) {\n            LayoutInflater inflater = ((Activity)getContext()).getLayoutInflater();\n            convertView = inflater.inflate(resourceId, null);\n        }\n        City country = getItem(position);\n        TextView txtViewCityName = (TextView) convertView.findViewById(R.id.txtViewCityName);\n        txtViewCityName.setText(country.getName());\n        return convertView;\n    }\n\n}",
    "package tehnut.resourceful.crops.compat;\n\nimport mcp.mobius.waila.api.*;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.ResourceLocation;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\nimport net.minecraftforge.items.ItemHandlerHelper;\nimport tehnut.resourceful.crops.block.tile.TileSeedContainer;\nimport tehnut.resourceful.crops.core.RegistrarResourcefulCrops;\nimport tehnut.resourceful.crops.core.data.Seed;\n\nimport javax.annotation.Nonnull;\nimport java.util.List;\n\n@WailaPlugin\npublic class CompatibilityWaila implements IWailaPlugin {\n\n    @Override\n    public void register(IWailaRegistrar registrar) {\n        final CropProvider cropProvider = new CropProvider();\n        registrar.registerStackProvider(cropProvider, TileSeedContainer.class);\n        registrar.registerNBTProvider(cropProvider, TileSeedContainer.class);\n    }\n\n    public static class CropProvider implements IWailaDataProvider {\n        @Nonnull\n        @Override\n        public ItemStack getWailaStack(IWailaDataAccessor accessor, IWailaConfigHandler config) {\n            Seed seed = RegistrarResourcefulCrops.SEEDS.getValue(new ResourceLocation(accessor.getNBTData().getString(\"seed\")));\n            if (seed == null)\n                return accessor.getStack();\n\n            if (seed.isNull())\n                return accessor.getStack();\n\n            if (seed.getOutputs().length == 0)\n                return accessor.getStack();\n\n            return ItemHandlerHelper.copyStackWithSize(seed.getOutputs()[0].getItem(), 1);\n        }\n\n        @Nonnull\n        @Override\n        public List<String> getWailaHead(ItemStack itemStack, List<String> currenttip, IWailaDataAccessor accessor, IWailaConfigHandler config) {\n            return currenttip;\n        }\n\n        @Nonnull\n        @Override\n        public List<String> getWailaBody(ItemStack itemStack, List<String> currenttip, IWailaDataAccessor accessor, IWailaConfigHandler config) {\n            return currenttip;\n        }\n\n        @Nonnull\n        @Override\n        public List<String> getWailaTail(ItemStack itemStack, List<String> currenttip, IWailaDataAccessor accessor, IWailaConfigHandler config) {\n            return currenttip;\n        }\n\n        @Nonnull\n        @Override\n        public NBTTagCompound getNBTData(EntityPlayerMP player, TileEntity te, NBTTagCompound tag, World world, BlockPos pos) {\n            tag.setString(\"seed\", ((TileSeedContainer) te).getSeedKey().toString());\n            return tag;\n        }\n    }\n}\n",
    "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang3.text;\n\nimport java.util.Map;\n\npublic abstract class StrLookup<V> {\n    public static StrLookup<?> noneLookup() {\n      return null;\n    }\n\n    public static StrLookup<String> systemPropertiesLookup() {\n      return null;\n    }\n\n    public static <V> StrLookup<V> mapLookup(final Map<String, V> map) {\n      return null;\n    }\n\n    public abstract String lookup(String key);\n\n}\n",
    "package com.rebuy.consul;\n\nimport com.ecwid.consul.v1.ConsulClient;\nimport com.ecwid.consul.v1.QueryParams;\nimport com.ecwid.consul.v1.Response;\nimport com.ecwid.consul.v1.agent.model.NewService;\nimport com.ecwid.consul.v1.catalog.model.CatalogService;\nimport com.rebuy.consul.exceptions.NoServiceFoundException;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class ConsulServiceTest\n{\n    private ConsulClient clientMock;\n\n    private ConsulService service;\n\n    private NewService serviceMock;\n\n    @Before\n    public void before()\n    {\n        clientMock = mock(ConsulClient.class);\n        serviceMock = mock(NewService.class);\n        when(serviceMock.getId()).thenReturn(\"42\");\n        service = new ConsulService(clientMock, serviceMock);\n    }\n\n    @Test\n    public void register_should_invoke_client()\n    {\n        when(clientMock.agentServiceRegister(Mockito.any())).thenReturn(null);\n\n        service.register();\n        Mockito.verify(clientMock).agentServiceRegister(serviceMock);\n    }\n\n    @Test\n    public void unregister_should_invoke_client()\n    {\n        service.unregister();\n        Mockito.verify(clientMock).agentServiceSetMaintenance(\"42\", true);\n    }\n\n    @Test(expected = NoServiceFoundException.class)\n    public void findService_should_throw_exception_if_no_services_are_found()\n    {\n        Response<List<CatalogService>> response = new Response<>(new ArrayList<>(), 1L, true, 1L);\n        when(clientMock.getCatalogService(Mockito.anyString(), Mockito.any(QueryParams.class))).thenReturn(response);\n\n        service.getRandomService(\"service\");\n        Mockito.verify(clientMock).getCatalogService(\"service\", Mockito.any(QueryParams.class));\n    }\n\n    @Test\n    public void findService_should_invoke_client()\n    {\n        List<CatalogService> services = new ArrayList<>();\n        services.add(mock(CatalogService.class));\n        Response<List<CatalogService>> response = new Response<>(services, 1L, true, 1L);\n        when(clientMock.getCatalogService(Mockito.anyString(), Mockito.any(QueryParams.class))).thenReturn(response);\n\n        service.getRandomService(\"service\");\n        Mockito.verify(clientMock).getCatalogService(Mockito.eq(\"service\"), Mockito.any(QueryParams.class));\n    }\n\n    @Test\n    public void findService_should_return_one_service()\n    {\n        List<CatalogService> services = new ArrayList<>();\n        CatalogService service1 = mock(CatalogService.class);\n        when(service1.getAddress()).thenReturn(\"192.168.0.1\");\n        services.add(service1);\n\n        CatalogService service2 = mock(CatalogService.class);\n        when(service2.getAddress()).thenReturn(\"192.168.0.2\");\n        services.add(service2)",
    "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage test.thread;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Administrator\n */\npublic class CallableAndFutureTest {\n\n    private final ExecutorService executor = Executors.newFixedThreadPool(2);\n\n    void start() throws Exception {\n        final Callable<List<Integer>> task = new Callable<List<Integer>>() {\n\n            public List<Integer> call() throws Exception {\n                // get obj\n                final List<Integer> list = new ArrayList<Integer>();\n                for (int i = 0; i < 100; i++) {\n                    Thread.sleep(50);\n                    list.add(i);\n                }\n                return list;\n            }\n        };\n        final Future<List<Integer>> future = executor.submit(task);\n\n        //do sthing others..\n        //example: due to show some data..\n\n        try {\n            final List<Integer> list = future.get(); //\u8fd9\u4e2a\u51fd\u6570\u8fd8\u53ef\u4ee5\u63a5\u53d7\u8d85\u65f6\u68c0\u6d4bhttp://www.javaeye.com/topic/671314\n            System.out.println(list);\n        } catch (final InterruptedException ex) {\n            Logger.getLogger(CallableAndFutureTest.class.getName()).log(Level.SEVERE, null, ex);\n            future.cancel(true);\n        } catch (final ExecutionException ex) {\n            Logger.getLogger(CallableAndFutureTest.class.getName()).log(Level.SEVERE, null, ex);\n            throw new ExecutionException(ex);\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    public static void main(final String args[]) {\n        try {\n            new CallableAndFutureTest().start();\n        } catch (final Exception ex) {\n            Logger.getLogger(CallableAndFutureTest.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n}\n",
    "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// Code generated by Microsoft (R) AutoRest Code Generator.\n\npackage com.azure.resourcemanager.eventhubs.generated;\n\nimport com.azure.core.util.Context;\n\n/** Samples for ConsumerGroups ListByEventHub. */\npublic final class ConsumerGroupsListByEventHubSamples {\n    /*\n     * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/examples/ConsumerGroup/EHConsumerGroupListByEventHub.json\n     */\n    /**\n     * Sample code: ConsumerGroupsListAll.\n     *\n     * @param azure The entry point for accessing resource management APIs in Azure.\n     */\n    public static void consumerGroupsListAll(com.azure.resourcemanager.AzureResourceManager azure) {\n        azure\n            .eventHubs()\n            .manager()\n            .serviceClient()\n            .getConsumerGroups()\n            .listByEventHub(\"ArunMonocle\", \"sdk-Namespace-2661\", \"sdk-EventHub-6681\", null, null, Context.NONE);\n    }\n}\n",
    "package net.talayhan.android.vibeproject.Controller;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.Toast;\n\nimport com.ipaulpro.afilechooser.utils.FileUtils;\n\nimport net.talayhan.android.vibeproject.R;\nimport net.talayhan.android.vibeproject.Util.Constants;\n\nimport java.io.File;\n\nimport butterknife.ButterKnife;\nimport butterknife.InjectView;\nimport cn.pedant.SweetAlert.SweetAlertDialog;\n\n\npublic class MainActivity extends Activity {\n\n    @InjectView(R.id.fileChooser_bt) Button mFileChooser_bt;\n    @InjectView(R.id.playBack_btn) Button mPlayback_bt;\n    @InjectView(R.id.chart_bt) Button mChart_bt;\n\n    private String videoPath;\n    private String vidAddress = \"https://archive.org/download/ksnn_compilation_master_the_internet/ksnn_compilation_master_the_internet_512kb.mp4\";\n    private SweetAlertDialog pDialog;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.inject(this);\n\n        mFileChooser_bt.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {        \n                /* Progress dialog */\n                pDialog = new SweetAlertDialog(MainActivity.this, SweetAlertDialog.NORMAL_TYPE);\n                pDialog.getProgressHelper().setBarColor(Color.parseColor(\"#A5DC86\"));\n                pDialog.setTitleText(\"Network Type\");\n                pDialog.setContentText(\"How would you like to watch video?\");\n                pDialog.setConfirmText(\"Local\");\n                pDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                    @Override\n                    public void onClick(SweetAlertDialog sweetAlertDialog) {\n                        // Local\n                        // Create the ACTION_GET_CONTENT Intent\n                        Intent getContentIntent = FileUtils.createGetContentIntent();\n\n                        Intent intent = Intent.createChooser(getContentIntent, \"Select a file\");\n                        startActivityForResult(intent, Constants.REQUEST_CHOOSER);\n\n                        sweetAlertDialog.dismissWithAnimation();\n                    }\n                });\n                pDialog.setCancelText(\"Internet\");\n                pDialog.setCancelClickListener(new SweetAlertDialog.OnSweetClickListener() {\n                    @Override\n                    public void onClick(SweetAlertDialog sweetAlertDialog) {\n                        \n                        /* check the device network state */\n                        if (!isOnline()){\n               ",
    "package org.xcolab.client.contest.pojo;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport org.xcolab.client.contest.pojo.tables.pojos.ContestCollectionCard;\n\n@JsonDeserialize(as = ContestCollectionCard.class)\npublic interface IContestCollectionCard {\n\n    Long getId();\n\n    void setId(Long id);\n\n    Long getParent();\n\n    void setParent(Long parent);\n\n    Long getBigOntologyTerm();\n\n    void setBigOntologyTerm(Long bigOntologyTerm);\n\n    Long getSmallOntologyTerm();\n\n    void setSmallOntologyTerm(Long smallOntologyTerm);\n\n    String getDescription();\n\n    void setDescription(String description);\n\n    String getShortName();\n\n    void setShortName(String shortName);\n\n    Boolean isVisible();\n\n    void setVisible(Boolean visible);\n\n    Integer getSortOrder();\n\n    void setSortOrder(Integer sortOrder);\n\n    Long getOntologyTermToLoad();\n\n    void setOntologyTermToLoad(Long ontologyTermToLoad);\n\n    Boolean isOnlyFeatured();\n\n    void setOnlyFeatured(Boolean onlyFeatured);\n}\n",
    "package utils;\r\n\r\nimport java.io.*;\r\nimport java.net.DatagramSocket;\r\nimport java.net.InetAddress;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport ch.ethz.ssh2.Connection;\r\nimport ch.ethz.ssh2.Session;\r\nimport ueb01.StringBufferImpl;\r\n\r\n/**\r\n * Created with IntelliJ IDEA.\r\n * User: Julian\r\n * Date: 16.10.13\r\n * Time: 13:37\r\n */\r\npublic class Utils {\r\n\r\n    private static long currentTime;\r\n\r\n    /**\r\n     * http://svn.apache.org/viewvc/camel/trunk/components/camel-test/src/main/java/org/apache/camel/test/AvailablePortFinder.java?view=markup#l130\r\n     * Checks to see if a specific port is available.\r\n     *\r\n     * @param port the port to check for availability\r\n     */\r\n    public static boolean available(int port) {\r\n        ServerSocket ss = null;\r\n        DatagramSocket ds = null;\r\n        try {\r\n            ss = new ServerSocket(port);\r\n            ss.setReuseAddress(true);\r\n            ds = new DatagramSocket(port);\r\n            ds.setReuseAddress(true);\r\n            return true;\r\n        } catch (IOException e) {\r\n        } finally {\r\n            if (ds != null) {\r\n                ds.close();\r\n            }\r\n\r\n            if (ss != null) {\r\n                try {\r\n                    ss.close();\r\n                } catch (IOException e) {\r\n                    /* should not be thrown */\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void stopwatchStart() {\r\n        currentTime = java.lang.System.nanoTime();\r\n    }\r\n\r\n    static ExecutorService pool = null;\r\n\r\n    public static class SyncTcpResponse {\r\n        public final Socket socket;\r\n        public final String message;\r\n\r\n        public boolean isValid() {\r\n            return this.socket != null;\r\n        }\r\n\r\n        public SyncTcpResponse(Socket s, String m) {\r\n            this.socket = s;\r\n            this.message = m;\r\n        }\r\n    }\r\n\r\n    public static String getTCPSync(final Socket socket) {\r\n        StringBuilder sb = new StringBuilder();\r\n        try {\r\n            Scanner s = new Scanner(socket.getInputStream());\r\n            while (s.hasNext()) {\r\n                sb.append(s.next());\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static SyncTcpResponse getTCPSync(final int port) {\r\n        ServerSocket server = null;\r\n        Socket client = null;\r\n        StringBuilder sb = new StringBuilder();\r\n        try {\r\n            server = new ServerSocket(port);\r\n            client = server.accept();\r\n            Scanner s = new Scanner(client.getInputStream());\r\n            while (s.hasNext()) {\r\n                sb.append(s.next());\r\n            }\r\n        } catch (IOException e)",
    "package org.eggermont.hm.cluster;\n\nimport cern.colt.matrix.DoubleFactory1D;\nimport cern.colt.matrix.DoubleMatrix1D;\nimport cern.colt.matrix.DoubleMatrix2D;\n\npublic class ClusterFactory {\n\n    private final DoubleMatrix2D x;\n\n    private final DoubleMatrix1D blocks;\n\n    private final DoubleMatrix1D vMin;\n\n    private final DoubleMatrix1D vMax;\n\n    private final int ndof;\n\n    public ClusterFactory(int d, int nidx, int ndof) {\n        this.ndof = ndof;\n        this.blocks = DoubleFactory1D.dense.make(d * nidx);\n        this.x = blocks.like2D(nidx, d);\n        this.vMin = DoubleFactory1D.dense.make(d);\n        this.vMax = DoubleFactory1D.dense.make(d);\n    }\n\n}\n",
    "package net.spy.digg.parsers;\n\nimport java.io.IOException;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport net.spy.digg.Story;\n\n/**\n * Parse a stories response.\n */\npublic class StoriesParser extends TimePagedItemParser<Story> {\n\n\t@Override\n\tprotected String getRootElementName() {\n\t\treturn \"stories\";\n\t}\n\n\t@Override\n\tprotected void handleDocument(Document doc)\n\t\tthrows SAXException, IOException {\n\t\tparseCommonFields(doc);\n\n\t\tfinal NodeList nl=doc.getElementsByTagName(\"story\");\n\t\tfor(int i=0; i<nl.getLength(); i++) {\n\t\t\taddItem(new StoryImpl(nl.item(i)));\n\t\t}\n\t}\n}\n",
    "package de.thomas.dreja.ec.musicquiz.gui.dialog;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Dialog;\r\nimport android.app.DialogFragment;\r\nimport android.content.DialogInterface;\r\nimport android.os.Bundle;\r\nimport de.thomas.dreja.ec.musicquiz.R;\r\nimport de.thomas.dreja.ec.musicquiz.ctrl.PlaylistResolver.SortOrder;\r\n\r\npublic class SortOrderSelectionDialog extends DialogFragment {\r\n\r\n\tprivate SortOrderSelectionListener listener;\r\n\t\r\n\t@Override\r\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n\t\t\r\n\t\tString[] items = new String[SortOrder.values().length];\r\n\t\t\r\n\t\tfor(int i=0; i<items.length; i++) {\r\n\t\t\titems[i] = SortOrder.values()[i].getName(getResources());\r\n\t\t}\r\n\t\t\r\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\r\n\t    builder.setTitle(R.string.sort_by)\r\n\t           .setItems(items, new DialogInterface.OnClickListener() {\r\n\t               public void onClick(DialogInterface dialog, int which) {\r\n\t            \t   listener.onSortOrderSelected(SortOrder.values()[which]);\r\n\t           }\r\n\t    });\r\n\r\n\t    return builder.create();\r\n\t}\r\n\r\n\tpublic interface SortOrderSelectionListener {\r\n\t\tpublic void onSortOrderSelected(SortOrder order);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onAttach(Activity activity) {\r\n\t\tsuper.onAttach(activity);\r\n\t\t\r\n\t\t// Verify that the host activity implements the callback interface\r\n        try {\r\n            // Instantiate the NoticeDialogListener so we can send events to the host\r\n            listener = (SortOrderSelectionListener) activity;\r\n        } catch (ClassCastException e) {\r\n            // The activity doesn't implement the interface, throw exception\r\n            throw new ClassCastException(activity.toString()\r\n                    + \" must implement SortOrderSelectionListener\");\r\n        }\r\n\t}\r\n}\r\n",
    "package com.github.fhtw.swp.tutorium.guice;\n\nimport com.github.fhtw.swp.tutorium.composite.Leaf;\nimport com.github.fhtw.swp.tutorium.composite.LeafTypeProvider;\nimport com.github.fhtw.swp.tutorium.reflection.AnnotatedTypeFinder;\nimport org.reflections.Configuration;\n\nimport javax.inject.Inject;\nimport java.util.Set;\n\npublic class LeafTypeProviderImpl implements LeafTypeProvider {\n\n    private final Configuration configuration;\n\n    @Inject\n    public LeafTypeProviderImpl(Configuration configuration) {\n        this.configuration = configuration;\n    }\n\n    @Override\n    public Set<Class<?>> getLeafTypes() {\n        return new AnnotatedTypeFinder(configuration, Leaf.class).getAnnotatedTypes();\n    }\n}\n",
    "class Solution {\n\n    public int solution(int[] A) {\n        \n        int[] temArray = new int[A.length + 2];\n    \t\t \n    \t \tfor (int i = 0; i < A.length; i++) {\n    \t \t\ttemArray[A[i]] = 1;\n    \t\t}\n            \n    \t \tfor (int i = 1; i < temArray.length + 1; i++) {\n    \t \t\tif(temArray[i] == 0){\n    \t \t\t\treturn i;\n    \t \t\t}\n    \t\t}\n  \t \t\n        return A[A.length - 1] + 1;\n        \n    }\n}\n",
    "package org.aikodi.chameleon.support.statement;\n\nimport org.aikodi.chameleon.core.declaration.Declaration;\nimport org.aikodi.chameleon.core.element.ElementImpl;\nimport org.aikodi.chameleon.core.lookup.DeclarationSelector;\nimport org.aikodi.chameleon.core.lookup.LookupContext;\nimport org.aikodi.chameleon.core.lookup.LookupException;\nimport org.aikodi.chameleon.core.lookup.SelectionResult;\nimport org.aikodi.chameleon.core.validation.Valid;\nimport org.aikodi.chameleon.core.validation.Verification;\nimport org.aikodi.chameleon.oo.statement.ExceptionSource;\nimport org.aikodi.chameleon.oo.statement.Statement;\nimport org.aikodi.chameleon.util.association.Multi;\n\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * A list of statement expressions as used in the initialization clause of a for\n * statement. It contains a list of statement expressions.\n * \n * @author Marko van Dooren\n */\npublic class StatementExprList extends ElementImpl implements ForInit, ExceptionSource {\n\n  public StatementExprList() {\n  }\n\n  /**\n   * STATEMENT EXPRESSIONS\n   */\n  private Multi<StatementExpression> _statementExpressions = new Multi<StatementExpression>(this);\n\n  public void addStatement(StatementExpression statement) {\n    add(_statementExpressions, statement);\n  }\n\n  public void removeStatement(StatementExpression statement) {\n    remove(_statementExpressions, statement);\n  }\n\n  public List<StatementExpression> statements() {\n    return _statementExpressions.getOtherEnds();\n  }\n\n  @Override\n  public StatementExprList cloneSelf() {\n    return new StatementExprList();\n  }\n\n  public int getIndexOf(Statement statement) {\n    return statements().indexOf(statement) + 1;\n  }\n\n  public int getNbStatements() {\n    return statements().size();\n  }\n\n  @Override\n  public List<? extends Declaration> locallyDeclaredDeclarations() throws LookupException {\n    return declarations();\n  }\n\n  @Override\n  public List<? extends Declaration> declarations() throws LookupException {\n    return Collections.EMPTY_LIST;\n  }\n\n  @Override\n  public LookupContext localContext() throws LookupException {\n    return language().lookupFactory().createLocalLookupStrategy(this);\n  }\n\n  @Override\n  public <D extends Declaration> List<? extends SelectionResult<D>> declarations(DeclarationSelector<D> selector)\n      throws LookupException {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public Verification verifySelf() {\n    return Valid.create();\n  }\n\n}\n",
    "package cn.libery.calendar.MaterialCalendar;\n\n\nimport android.content.Context;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport cn.libery.calendar.MaterialCalendar.spans.DotSpan;\n\n\n/**\n * Decorate several days with a dot\n */\npublic class EventDecorator implements DayViewDecorator {\n\n    private int color;\n    private HashSet<CalendarDay> dates;\n\n    public EventDecorator(int color, Collection<CalendarDay> dates) {\n        this.color = color;\n        this.dates = new HashSet<>(dates);\n    }\n\n    @Override\n    public boolean shouldDecorate(CalendarDay day) {\n        return dates.contains(day);\n    }\n\n    @Override\n    public void decorate(DayViewFacade view, Context context) {\n        view.addSpan(new DotSpan(4, color));\n    }\n}\n",
    "package br.com.k19.android.cap3;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\n\npublic class MainActivity extends Activity {\n\n\t@Override\n\tpublic  void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.frame);\n\t}\n\n\t\n}\n",
    "package com.mikescamell.sharedelementtransitions.recycler_view.recycler_view_to_viewpager;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\n\nimport com.mikescamell.sharedelementtransitions.R;\n\npublic class RecyclerViewToViewPagerActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_fragment_to_fragment);\n\n        getSupportFragmentManager()\n                .beginTransaction()\n                .add(R.id.content, RecyclerViewFragment.newInstance())\n                .commit();\n    }\n}\n"
  ]
}
